"use strict";const e="operator",t="operator-trim",n="bool",r="error",o="number",l="func",s="newline",c="whitespace",i="string",u="context_quote",a="context",f="range",h="range_beam",p="range_ternary",d="range_named",m="structured",y="fx_prefix",g="unknown",v="UnaryExpression",x="BinaryExpression",C="ReferenceIdentifier",A="Literal",$="ErrorLiteral",w="CallExpression",N="LambdaExpression",R="LetExpression",b="ArrayExpression",E="Identifier",k=16383,T=1048575,L={};function I(e,t){if(e.length){const n=e[0];t[n]=t[n]||{},I(e.slice(1),t[n])}else t.$=!0}[[f,":",f],[f,".:",f],[f,":.",f],[f,".:.",f],[f],[h],[p],[a,"!",f,":",f],[a,"!",f,".:",f],[a,"!",f,":.",f],[a,"!",f,".:.",f],[a,"!",f],[a,"!",h],[a,"!",p],[u,"!",f,":",f],[u,"!",f,".:",f],[u,"!",f,":.",f],[u,"!",f,".:.",f],[u,"!",f],[u,"!",h],[u,"!",p],[d],[a,"!",d],[u,"!",d],[m],[d,m],[a,"!",d,m],[u,"!",d,m]].forEach((e=>I(e.concat().reverse(),L)));const O=(t,n,r,o=0)=>{let l=o,s=n;const c=t.length-o;for(;l<=c;){const n=t[r-l];if(n){const t=n.type===e?n.value:n.type;if(t in s){s=s[t],l+=1;continue}}return s.$?l:0}};function U(e){const t=[];for(let n=e.length-1;n>=0;n--){let r=e[n];const o=r.type;if(o===f||o===h||o===p||o===d||o===m){const t=O(e,L,n);if(t>1){r={...r,value:""};const o=n-t+1;for(let t=o;t<=n;t++)r.value+=e[t].value;r.loc&&e[o].loc&&(r.loc[0]=e[o].loc[0]),n-=t-1}}t[t.length]=r}return t.reverse()}const F=/#(?:NAME\?|FIELD!|CALC!|VALUE!|REF!|DIV\/0!|NULL!|NUM!|N\/A|GETTING_DATA\b|SPILL!|UNKNOWN!|SYNTAX\?|ERROR!|CONNECT!|BLOCKED!|EXTERNAL!)/iy;function S(e){return 9===e||11===e||12===e||13===e||32===e||160===e||5760===e||8232===e||8233===e||8239===e||8287===e||12288===e||65279===e||e>=8192&&e<=8202}function M(e,t,n){const r=e.charCodeAt(t);let o,l;if(39===r){const r=t;for(t++;t<e.length;){const s=e.charCodeAt(t);if(91===s){if(o)return;o=t}else if(93===s){if(l)return;l=t}else if(39===s&&(t++,39!==e.charCodeAt(t))){let s=null==o&&null==l;return n.xlsx&&o===r+1&&l===t-2&&(s=!0),o>=r+1&&l<t-2&&l>o+1&&(s=!0),s&&33===e.charCodeAt(t)?{type:u,value:e.slice(r,t)}:void 0}t++}}else if(33!==r){const r=t;for(;t<e.length;){const s=e.charCodeAt(t);if(91===s){if(o)return;o=t}else if(93===s){if(l)return;l=t}else if(33===s){let s=null==o&&null==l;if(n.xlsx&&o===r&&l===t-1&&(s=!0),o>=r&&l<t-1&&l>o+1&&(s=!0),s)return{type:a,value:e.slice(r,t)}}else if((null==o||null!=l)&&!(s>=65&&s<=90||s>=97&&s<=122||s>=48&&s<=57||46===s||95===s||161===s||164===s||167===s||168===s||170===s||173===s||s>=175))return;t++}}}function D(e,t){const n=e.charCodeAt(t);if(46===n){if(58===e.charCodeAt(t+1))return 46===e.charCodeAt(t+2)?3:2}else if(58===n){return 46===e.charCodeAt(t+1)?2:1}return 0}function _(e,t){const n=e.charCodeAt(t);return!(n>=65&&n<=90||n>=97&&n<=122||n>=48&&n<=57||95===n||n>160)}function j(e,t){const n=e.charCodeAt(t);return!(n>=65&&n<=90||n>=97&&n<=122||n>=48&&n<=57||95===n||40===n||36===n||46===n)}function B(e,t){const n=t;36===e.charCodeAt(t)&&t++;const r=t+3;let o=0;do{const n=e.charCodeAt(t);if(n>=65&&n<=90)o=26*o+n-64,t++;else{if(!(n>=97&&n<=122))break;o=26*o+n-96,t++}}while(t<r&&t<e.length);return o&&o<=16384?t-n:0}function X(e,t){const n=t;36===e.charCodeAt(t)&&t++;const r=t+7;let o=0,l=e.charCodeAt(t);if(l>=49&&l<=57){o=10*o+l-48,t++;do{if(l=e.charCodeAt(t),!(l>=48&&l<=57))break;o=10*o+l-48,t++}while(t<r&&t<e.length)}return o&&o<=1048576?t-n:0}function P(e,t,n=!1){const r=t,o=e.charCodeAt(t);if(n?82===o||114===o:67===o||99===o){t++;let o=0,l=0,s=e.length;const c=e.charCodeAt(t);let i,u=1;const a=91===c;if(a)s=Math.min(s,t+(n?8:6)),t++,i=e.charCodeAt(t),43!==i&&45!==i||(t++,s++,u=45===i?-1:1);else if(c<49||c>57||isNaN(c))return 1;do{const n=e.charCodeAt(t);if(!(n>=48&&n<=57))break;l=10*l+n-48,o++,t++}while(t<s);const f=n?T:k;if(a){return 93!==e.charCodeAt(t)?0:(t++,l*=u,o&&-f<=l&&l<=f?t-r:0)}return o&&l<=f+1?t-r:0}return 0}function W(e,t,n){return n.r1c1?function(e,t,n){let r=t;const o=P(e,r,!0);r+=o;const l=P(e,r);if(r+=l,l||o){const s=D(e,r),c=r;if(s){r+=s;const c=P(e,r,!0);r+=c;const i=P(e,r);if(r+=i,o&&!l&&c&&i||!o&&l&&c&&i||o&&l&&c&&!i||o&&l&&!c&&i){if(n.allowTernary&&_(e,r))return{type:p,value:e.slice(t,r)}}else if((l&&i&&!o&&!c||!l&&!i&&o&&c)&&_(e,r))return{type:h,value:e.slice(t,r)}}if(_(e,c))return{type:o&&l?f:h,value:e.slice(t,c)}}}(e,t,n):function(e,t,n){let r=t;const o=B(e,r);let l=0,s=0;if(o){r+=o;const c=X(e,r);r+=c;const i=D(e,r),u=r;if(i)if(r+=i,l=B(e,r),r+=l,s=X(e,r),r+=s,c&&s&&l){if(_(e,r)&&n.mergeRefs)return{type:f,value:e.slice(t,r)}}else if(c||s){if(n.allowTernary&&(s||l)&&j(e,r))return{type:p,value:e.slice(t,r)}}else if(_(e,r))return{type:h,value:e.slice(t,r)};if(c&&_(e,u))return{type:f,value:e.slice(t,u)}}else{const o=X(e,r);if(o){r+=o;const c=D(e,r);if(c){if(r+=c,l=B(e,r),l&&(r+=l),s=X(e,r),r+=s,l&&s&&n.allowTernary&&j(e,r))return{type:p,value:e.slice(t,r)};if(!l&&s&&_(e,r))return{type:h,value:e.slice(t,r)}}}}}(e,t,n)}const z=93,G=91,Y={headers:1,data:2,totals:4,all:8,"this row":16,"@":16},H=(...e)=>Object.freeze(e),K={0:H(),1:H("headers"),2:H("data"),4:H("totals"),8:H("all"),16:H("this row"),3:H("headers","data"),6:H("data","totals")};function Z(e,t){let n=t;if(e.charCodeAt(n++)===G&&35===e.charCodeAt(n++)){do{const t=e.charCodeAt(n);if(!(t>=65&&t<=90||t>=97&&t<=122||32===t))break;n++}while(n<t+11);if(e.charCodeAt(n++)===z)return n-t}}function q(e,t){let n=t;for(;S(e.charCodeAt(n));)n++;return n-t}function V(e,t,n=!0){let r=t,o="";if(e.charCodeAt(r)===G){let n;r++;do{if(n=e.charCodeAt(r),39===n){if(r++,n=e.charCodeAt(r),39!==n&&35!==n&&64!==n&&n!==G&&n!==z)return;o+=String.fromCharCode(n),r++}else{if(39===n||35===n||64===n||n===G)return;if(n===z)return r++,[e.slice(t,r),o];o+=String.fromCharCode(n),r++}}while(r<e.length)}else if(n){let n;do{if(n=e.charCodeAt(r),39===n||35===n||64===n||n===G||n===z||58===n)break;o+=String.fromCharCode(n),r++}while(r<e.length);if(r!==t)return[o,o]}}function Q(e,t=0){const n=[],r=t;let o,l=0;if(e.charCodeAt(t)!==G)return;if(o=Z(e,t)){const n=e.slice(t+2,t+o-1);t+=o;const r=Y[n.toLowerCase()];if(!r)return;l|=r}else if(o=V(e,t,!1))t+=o[0].length,o[1]&&n.push(o[1]);else{let r=!0;for(t++,t+=q(e,t);r&&(o=Z(e,t));){const n=e.slice(t+2,t+o-1),s=Y[n.toLowerCase()];if(!s)return;l|=s,t+=o,t+=q(e,t),r=44===e.charCodeAt(t),r&&(t++,t+=q(e,t))}if(r&&64===e.charCodeAt(t)&&(l|=Y["@"],t+=1,r=e.charCodeAt(t)!==z),!K[l])return;const s=r&&V(e,t,!0);if(s){if(t+=s[0].length,n.push(s[1]),58===e.charCodeAt(t)){const r=V(e,++t,!0);if(!r)return;t+=r[0].length,n.push(r[1])}r=!1}if(t+=q(e,t),r||e.charCodeAt(t)!==z)return;t++}const s=K[l];return{columns:n,sections:s?s.concat():s,length:t-r,token:e.slice(r,t)}}function J(e,t){const n=Q(e,t);if(n&&n.length){let r=n.length;for(;S(e.charCodeAt(t+r));)r++;if(33!==e.charCodeAt(t+r))return{type:m,value:n.token}}}function ee(e,t){const n=t;do{const n=e.charCodeAt(t);if(n<48||n>57)break;t++}while(t<e.length);return t-n}function te(e,t){const n=t,r=e.charCodeAt(t);if(!(r>=65&&r<=90||r>=97&&r<=122||95===r||92===r||r>160))return;let o;t++;do{if(o=e.charCodeAt(t),!(o>=65&&o<=90||o>=97&&o<=122||o>=48&&o<=57||95===o||92===o||46===o||63===o||o>160))break;t++}while(isFinite(o));const l=t-n;if(l&&l<255){if(92===r&&l<3)return;if(1===l&&(114===r||82===r||99===r||67===r))return;return{type:d,value:e.slice(n,t)}}}const ne=[function(e,t){if(35===e.charCodeAt(t)){F.lastIndex=t;const n=F.exec(e);if(n)return{type:r,value:n[0]}}},function(e,n){const r=e.charCodeAt(n);if(46===r||58===r){const o=e.charCodeAt(n+1);if(r!==o){if(58===o)return{type:t,value:e.slice(n,n+(46===e.charCodeAt(n+2)?3:2))};if(46===o)return{type:t,value:e.slice(n,n+2)}}}},function(t,n){const r=t.charCodeAt(n),o=t.charCodeAt(n+1);return 60===r&&61===o||62===r&&61===o||60===r&&62===o?{type:e,value:t.slice(n,n+2)}:123===r||125===r||33===r||35===r||37===r||38===r||40===r||41===r||42===r||43===r||44===r||45===r||47===r||58===r||59===r||60===r||61===r||62===r||64===r||94===r?{type:e,value:t[n]}:void 0},function(e,t){const n=t;let r=e.charCodeAt(t);if(!(r<65||r>90)||!(r<97||r>122)||95===r){t++;do{if(r=e.charCodeAt(t),(r<65||r>90)&&(r<97||r>122)&&(r<48||r>57)&&95!==r&&46!==r)break;t++}while(t<e.length);return 40===e.charCodeAt(t)?{type:l,value:e.slice(n,t)}:void 0}},function(e,t){const r=e.charCodeAt(t);if(84===r||116===r){const r=e.charCodeAt(t+1);if(82===r||114===r){const r=e.charCodeAt(t+2);if(85===r||117===r){const r=e.charCodeAt(t+3);if(69===r||101===r)return{type:n,value:e.slice(t,t+4)}}}}if(70===r||102===r){const r=e.charCodeAt(t+1);if(65===r||97===r){const r=e.charCodeAt(t+2);if(76===r||108===r){const r=e.charCodeAt(t+3);if(83===r||115===r){const r=e.charCodeAt(t+4);if(69===r||101===r)return{type:n,value:e.slice(t,t+5)}}}}}},function(e,t){const n=t;for(;10===e.charCodeAt(t);)t++;if(t!==n)return{type:s,value:e.slice(n,t)}},function(e,t){const n=t;for(;S(e.charCodeAt(t));)t++;if(t!==n)return{type:c,value:e.slice(n,t)}},function(e,t){const n=t;if(34===e.charCodeAt(t)){for(t++;t<e.length;){if(34===e.charCodeAt(t)&&(t++,34!==e.charCodeAt(t)))return{type:i,value:e.slice(n,t)};t++}return{type:i,value:e.slice(n,t),unterminated:!0}}},M,W,J,function(e,t){const n=t,r=ee(e,t);if(!r)return;if(t+=r,46===e.charCodeAt(t)){const n=ee(e,++t);if(!n)return;t+=n}const l=e.charCodeAt(t);if(69===l||101===l){t++;const n=e.charCodeAt(t);43!==n&&45!==n||t++;const r=ee(e,t);if(!r)return;t+=r}return{type:o,value:e.slice(n,t)}},te],re=[function(t,n,r){if(33===t.charCodeAt(n))return{type:e,value:t[n]};if(!r.r1c1){const r=D(t,n);if(r)return{type:e,value:t.slice(n,n+r)}}},M,W,J,te],oe=(e,t)=>e&&e.type===t,le={withLocation:!1,mergeRefs:!0,allowTernary:!1,negativeNumbers:!0,r1c1:!1},se=e=>e.type===d||e.type===l,ce=t=>!oe(t,e)||"%"===t.value||"}"===t.value||")"===t.value||"#"===t.value;function ie(n,r,i={}){const u={...le,...i},{withLocation:a,mergeRefs:h,negativeNumbers:p}=u,m=[];let v=0,x=0,C=0;const A=[];let $=null,w=null,N=null;const R=e=>{const n=e.type===g,r=N&&N.type===g;N&&(n&&r||n&&se(N)||r&&se(e))?(N.value+=e.value,N.type=g,a&&(N.loc[1]=e.loc[1])):(e.type===t&&(A.push(m.length),e.type=g),m[m.length]=e,N=e,e.type!==c&&e.type!==s&&(w=$,$=e))};if(n.startsWith("=")){const e={type:y,value:"="};a&&(e.loc=[0,1]),v++,R(e)}const b=r.length;for(;v<n.length;){const t=v;let s;for(let e=0;e<b;e++)if(s=r[e](n,v,u),s){v+=s.value.length;break}if(s||(s={type:g,value:n[v]},v++),a&&(s.loc=[t,v]),N&&"("===s.value&&N.type===l&&/^l(?:ambda|et)$/i.test(N.value)&&x++,s.type===g&&1===s.value.length){const e=s.value.toLowerCase();C+="r"===e||"c"===e?1:0}if(p&&s.type===o){const t=N;if(t&&oe(t,e)&&"-"===t.value&&(!w||oe(w,y)||!ce(w))){const e=m.pop();s.value="-"+s.value,s.loc&&(s.loc[0]=e.loc[0]),$=w,N=m[m.length-1]}}R(s)}C&&x&&function(t){let n,r=0,o=0;for(const s of t){if(s.type===e)if("("===s.value){if(o++,n.type===l){const e=n.value.toLowerCase();"lambda"!==e&&"let"!==e||(r=o)}}else")"===s.value&&(o--,o<r&&(r=0));else r&&s.type===g&&/^[rc]$/.test(s.value)&&(s.type=d);n=s}}(m);for(const t of A){const n=m[t-1],r=m[t+1];n&&n.type===f&&r&&r.type===f?m[t].type=e:m[t].type=g}return h?U(m):m}function ue(e,t={}){return ie(e,ne,t)}function ae(e){return!!e&&(e.type===f||e.type===h||e.type===p)}function fe(e){return!!e&&(e.type===f||e.type===h||e.type===p||e.type===m||e.type===d)}function he(e){return!!e&&(e.type===n||e.type===r||e.type===o||e.type===i)}function pe(e){return!!e&&e.type===r}function de(e){return!!e&&(e.type===c||e.type===s)}function me(e){return!!e&&e.type===l}function ye(e){return!!e&&e.type===y}function ge(t){return!!t&&t.type===e}const ve="(END)",xe="(FUNCTION)",Ce="(WHITESPACE)",Ae=["ANCHORARRAY","CHOOSE","DROP","IF","IFS","INDEX","INDIRECT","LAMBDA","LET","OFFSET","REDUCE","SINGLE","SWITCH","TAKE","TRIMRANGE","XLOOKUP"],$e={};let we,Ne,Re,be=!1,Ee=!1,ke=!1;const Te=e=>ke||Ae.includes(e.toUpperCase()),Le=e=>!!e&&(e.type===C||(e.type===$||e.type===r)&&"#REF!"===e.value||e.type===x&&(":"===e.operator||" "===e.operator||","===e.operator)||fe(e)||e.type===w&&Te(e.callee.name));function Ie(e,t=null){const n=new Error(e);throw n.source=Ne.map((e=>e.value)).join(""),n.sourceOffset=Ne.slice(0,t??Re).reduce(((e,t)=>e+t.value.length),0),n}function Oe(e=!1){let t,n=Re;do{t=Ne[++n]}while(t&&(de(t)||ge(t)&&"("===t.value));return((e,t=!1)=>{const n=(e&&e.value)+"";return!(!fe(e)&&(!t||!ge(e)||":"!==n&&","!==n&&n.trim())&&(!me(e)||!Te(n))&&(!pe(e)||"#REF!"!==n))})(t,e)}function Ue(e=null,t=null){if(e&&e!==we.id&&Ie(`Expected ${e} but got ${we.id}`),de(Ne[Re])){const e=Le(t),n=e&&Oe(!1),r=e&&Ne[Re+1]&&"("===Ne[Re+1].value;if(!n&&!r)for(;de(Ne[Re]);)Re++}if(Re>=Ne.length)return void(we=$e[ve]);const n=Ne[Re];let r;return Re+=1,n.unterminated&&Ie("Encountered an unterminated token"),ge(n)?(r=$e[n.value],r||Ie(`Unknown operator ${n.value}`)):de(n)?r=$e[Ce]:he(n)?r=$e[A]:fe(n)?r=$e[C]:me(n)?r=$e[xe]:Ie(`Unexpected ${n.type} token: ${n.value}`),we=Object.create(r),we.type=n.type,we.value=n.value,n.loc&&(we.loc=[...n.loc]),we}function Fe(e){let t=we;Ue(null,t);let n=t.nud();for(;e<we.lbp;)t=we,Ue(null,t),n=t.led(n);return n}const Se={nud:()=>Ie("Invalid syntax"),led:()=>Ie("Missing operator")};function Me(e,t=0){let n=$e[e];return n?t>=n.lbp&&(n.lbp=t):(n={...Se},n.id=e,n.value=e,n.lbp=t,$e[e]=n),n}function De(e,t,n){const r=Me(e,t);return r.led=n||function(e){this.type=x,this.operator=this.value,delete this.value;const n=Fe(t);return this.arguments=[e,n],this.loc&&(this.loc=[e.loc[0],n.loc[1]]),this},r}function _e(e,t){const n=Me(e,0);return n.lbp=70,n.led=t||function(e){return this.type=v,this.operator=this.value,delete this.value,this.arguments=[e],this.loc&&(this.loc[0]=e.loc[0]),this},n}function je(e,t){const n=Me(e);return n.nud=t||function(){this.type=v,this.operator=this.value,delete this.value;const e=Fe(70);return this.arguments=[e],this.loc&&(this.loc[1]=e.loc[1]),this},n}function Be(e,t){return De(e,t,(function(n){Le(n)||Ie(`Unexpected ${e} operator`);const r=Fe(t);return Le(r)||Ie(`Unexpected ${we.type} following ${this.id}`),this.type=x,this.operator=this.value.trim()?this.value:" ",delete this.value,this.arguments=[n,r],this.loc&&(this.loc=[n.loc[0],r.loc[1]]),this}))}Me(ve),Be(":",80);const Xe=Be(",",80);Be(Ce,80);const Pe=e=>{const t=Xe.lbp>0;return null!=e&&(Xe.lbp=e?80:0),t};function We(e){const t=[],n={};let r,o=!1;const l=Pe(!1);if(")"!==we.id)for(;!o;){de(we)&&Ue();const e=Re,l=Fe(0);if(","===we.id){if(l.type===C&&"name"===l.kind){const e=l.value.toLowerCase();e in n&&Ie("Duplicate name: "+l.value),n[e]=1;const r={type:E,name:l.value};l.loc&&(r.loc=l.loc),t.push(r)}else Re=e,Ie("LAMBDA argument is not a name");Ue(",")}else r=l,o=!0}return Pe(l),delete this.value,this.type=N,this.params=t,this.body=r||null,e.loc&&(this.loc=[e.loc[0],we.loc[1]]),Ue(")",this),this}function ze(e){const t=[],n=[],r={};let o,l=0;const s=(e,s)=>{if(o&&Ie("Unexpected argument following calculation"),s&&l>=2)o=e;else{if(!(l%2))if(e&&e.type===C&&"name"===e.kind){const n=e.value.toLowerCase();n in r&&Ie("Duplicate name: "+e.value),r[n]=1,t.push({type:E,name:e.value,loc:e.loc})}else l>=2?o=e:Ie("Argument is not a name");else n.push(e)}l++},c=Pe(!1);let i=!1;if(")"!==we.id){for(;")"!==we.id;)if(de(we)&&Ue(),","===we.id)s(null),i=!0,Ue();else{s(Fe(0),","!==we.id),i=!1,","===we.id&&(Ue(","),i=!0)}Pe(c)}i&&s(null,!0),void 0===o&&Ie("Unexpected end of arguments"),Pe(c),delete this.value,this.type=R,this.declarations=[],t.length||Ie("Unexpected end of arguments");for(let e=0;e<t.length;e++){const r={type:"LetDeclarator",id:t[e],init:n[e],loc:t[e].loc&&[t[e].loc[0],n[e].loc[1]]};this.declarations.push(r)}return this.body=o,e.loc&&(this.loc=[e.loc[0],we.loc[1]]),Ue(")",this),this}function Ge(e,t=!1){let n=!1,r="";const o=[],l=()=>{r&&o.push(t?r:{value:r,braced:n}),r=""};for(let t=0;t<e.length;t++){const o=e[t];"["===o?(l(),n=!0):"]"===o?(l(),n=!1):r+=o}return l(),o}function Ye(e){return{context:Ge(e,!0)}}function He(e){const t={},n=Ge(e);if(n.length>1)t.workbookName=n[n.length-2].value,t.sheetName=n[n.length-1].value;else if(1===n.length){const e=n[0];e.braced?t.workbookName=e.value:t.sheetName=e.value}return t}_e("%"),_e("#",(function(e){return Le(e)||Ie("# expects a reference"),this.type=v,this.operator=this.value,delete this.value,this.arguments=[e],this})),je("+"),je("-"),je("@"),De("^",50),De("*",40),De("/",40),De("+",30),De("-",30),De("&",20),De("=",10),De("<",10),De(">",10),De("<=",10),De(">=",10),De("<>",10),Me(A).nud=function(){const{type:e,value:t}=this;if(this.type=A,this.raw=t,e===o)this.value=+t;else if(e===n)this.value="TRUE"===t.toUpperCase();else if(e===r)this.type=$,this.value=t.toUpperCase();else{if(e!==i)throw new Error("Unsupported literal type: "+e);this.value=t.slice(1,-1).replace(/""/g,'"')}return this},Me(C).nud=function(){return this.type===d?this.kind="name":this.type===m?this.kind="table":this.type===h?this.kind="beam":this.kind="range",this.type=C,this},Me(")"),je("(",(function(){const e=Pe(!0),t=Fe(0);return Ue(")",t),Pe(e),t})),Me(xe).nud=function(){return this},De("(",90,(function(e){let t={type:E,name:e.value};e.id!==xe&&(e.type===N||e.type===w||e.type===R||e.type===C||e.type===v&&"#"===e.value||e.type===$&&"#REF!"===e.value?t=e:Ie("Unexpected call",Re-1));const n=e.value.toLowerCase();if("lambda"===n)return We.call(this,e);if("let"===n)return ze.call(this,e);const r=[];let o=!1;if(")"!==we.id){const e=Pe(!1);for(;")"!==we.id;)if(de(we)&&Ue(),","===we.id)r.push(null),o=!0,Ue();else{const e=Fe(0);r.push(e),o=!1,","===we.id&&(Ue(","),o=!0)}Pe(e)}o&&r.push(null);const l=we;return delete this.value,this.type=w,this.callee=t,e.loc&&(this.callee.loc=[...e.loc]),this.arguments=r,e.loc&&(this.loc=[e.loc[0],l.loc[1]]),Ue(")",this),this})),Me("}"),Me(";"),je("{",(function(){"}"===we.id&&Ie("Unexpected empty array");let e=[],t=!1;const n=[e],r=Pe(!1);for(;!t;){if(de(we)&&Ue(),he(we))e.push($e[A].nud.call(we)),Ue();else if(be&&Le(we))e.push($e[C].nud.call(we)),Ue();else if(Ee&&me(we)){const t=Fe(0);e.push(t)}else Ie(`Unexpected ${we.type} in array: ${we.value}`);","===we.id?Ue(","):";"===we.id?(Ue(";"),e=[],n.push(e)):t=!0}const o=we;return Ue("}"),Pe(r),this.type=b,this.elements=n,this.loc&&(this.loc[1]=o.loc[1]),delete this.value,this}));const Ke=e=>e&&(":"===e.value||".:"===e.value||":."===e.value||".:."===e.value)&&{operator:e.value},Ze=e=>e&&e.type===f&&{r0:e.value},qe=e=>e&&e.type===p&&{r0:e.value},Ve=e=>e&&e.type===f&&{r1:e.value},Qe=t=>t&&t.type===e&&"!"===t.value&&{},Je=e=>e&&e.type===h&&{r0:e.value},et=e=>e&&e.type===m&&{struct:e.value},tt=(e,t)=>{const n=t.xlsx?He:Ye;return e&&e.type===a?n(e.value):e&&e.type===u?n(e.value.slice(1,-1).replace(/''/g,"'")):void 0},nt=e=>e&&e.type===d&&{name:e.value},rt=[[qe],[Ze,Ke,Ve],[Ze],[Je],[tt,Qe,qe],[tt,Qe,Ze,Ke,Ve],[tt,Qe,Ze],[tt,Qe,Je]],ot=rt.concat([[nt],[tt,Qe,nt],[et],[nt,et],[tt,Qe,nt,et]]);function lt(e,t){const n={withLocation:!1,mergeRefs:!1,allowTernary:!1,allowNamed:!0,r1c1:!1,xlsx:!1,...t},r=ie(e,re,n),o=n.xlsx?{workbookName:"",sheetName:"",r0:"",r1:"",name:"",operator:""}:{context:[],r0:"",r1:"",name:"",operator:""};r.length&&r[0].type===y&&r.shift();const l=n.allowNamed?ot:rt;for(let e=0;e<l.length;e++){const t={...o};if(l[e].length===r.length){const o=l[e].every(((e,o)=>{const l=e(r[o],n);return Object.assign(t,l),l}));if(o)return t}}return null}const st=String.fromCharCode;function ct(e){return(e>=702?st(((e-702)/676-0)%26+65):"")+(e>=26?st((e/26-1)%26+65):"")+st(e%26+65)}function it(e){const t=e||"",n=t.length;let r=0;if(n>2){const e=t.charCodeAt(n-3);r+=676*(1+e-(e>95?32:0)-65)}if(n>1){const e=t.charCodeAt(n-2);r+=26*(1+e-(e>95?32:0)-65)}if(n){const e=t.charCodeAt(n-1);r+=e-(e>95?32:0)-65}return r}const ut=/[^0-9A-Za-z._¡¤§¨ª\u00ad¯-\uffff]/;function at(e){let t="",n=0,r=0;const o=e.context||[];for(let e=o.length;e>-1;e--){const l=o[e];if(l){t=(r%2?"["+l+"]":l)+t,n+=+ut.test(l),r++}}return n&&(t="'"+t.replace(/'/g,"''")+"'"),t?t+"!":t}function ft(e){let t="",n=0;const{workbookName:r,sheetName:o}=e;return r&&(t+="["+r+"]",n+=+ut.test(r)),o&&(t+=o,n+=+ut.test(o)),n&&(t="'"+t.replace(/'/g,"''")+"'"),t?t+"!":t}const ht=(e,t,n)=>Math.min(Math.max(t,e),n),pt=(e,t)=>(t?"$":"")+ct(e),dt=(e,t)=>(t?"$":"")+String(e+1);function mt(e){return"both"===e?".:.":"head"===e?".:":"tail"===e?":.":":"}function yt(e,t){return e&&t?"both":e?"head":t?"tail":void 0}function gt(e){const t=/^(?=.)(\$(?=\D))?([A-Za-z]{0,3})?(\$)?([1-9][0-9]{0,6})?$/.exec(e);return t&&(t[2]||t[4])?[t[4]?(n=t[4],+n-1):null,t[2]?it(t[2]):null,!!t[3],!!t[1]]:null;var n}function vt(e){let t=null,n=null,r=null,o=null,l=!1,s=!1,c=!1,i=!1;const[u,a,f,h,p]=e.split(/(\.?:\.?)/);if(h||p)return null;const d=yt(!!a&&"."===a[0],!!a&&"."===a[a.length-1]),m=gt(u),y=f?gt(f):null;if(!m||f&&!y)return null;if(null!=m[0]&&null!=m[1]?[t,n,l,s]=m:null==m[0]&&null!=m[1]?[,n,,s]=m:null!=m[0]&&null==m[1]&&([t,,l]=m),f)null!=y[0]&&null!=y[1]?[r,o,c,i]=y:null==y[0]&&null!=y[1]?[,o,,i]=y:null!=y[0]&&null==y[1]&&([r,,c]=y);else{if(null==t||null==n)return null;r=t,o=n,c=l,i=s}null!=o&&(null==n||null!=n&&o<n)&&([n,o,s,i]=[o,n,i,s]),null!=r&&(null==t||null!=t&&r<t)&&([t,r,l,c]=[r,t,c,l]);const g={top:t,left:n,bottom:r,right:o,$top:l,$left:s,$bottom:c,$right:i};return d&&(g.trim=d),g}function xt(e,{allowNamed:t=!0,allowTernary:n=!1,xlsx:r=!1}={}){const o=lt(e,{allowNamed:t,allowTernary:n,xlsx:r,r1c1:!1});if(o&&(o.r0||o.name)){let e=null;return o.r0&&(e=vt(o.r1?o.r0+o.operator+o.r1:o.r0)),e?r?{workbookName:o.workbookName,sheetName:o.sheetName,range:e}:{context:o.context,range:e}:o.name?r?{workbookName:o.workbookName,sheetName:o.sheetName,name:o.name}:{context:o.context,name:o.name}:null}return null}function Ct(e,{xlsx:t=!1}={}){return(t?ft(e):at(e))+(e.name?e.name:function(e){let{top:t,left:n,bottom:r,right:o,trim:l}=e;const{$left:s,$right:c,$top:i,$bottom:u}=e,a=null==n,f=null==o,h=null==t,p=null==r;t=ht(0,0|t,T),n=ht(0,0|n,k),!a&&!h&&f&&p?(r=t,o=n):(r=ht(0,0|r,T),o=ht(0,0|o,k));const d=mt(l);return 0===t&&r>=T&&!a&&!f&&(!(s&&!a||c&&!f)||n===o)||h&&p?pt(n,s)+d+pt(o,c):0===n&&o>=k&&!h&&!p&&(!(i&&!h||u&&!p)||t===r)||a&&f?dt(t,i)+d+dt(r,u):a||h||f||!p?a||!h||f||p?a||h||!f||p?!a||h||f||p?o!==n||r!==t||c!==s||u!==i?pt(n,s)+dt(t,i)+d+pt(o,c)+dt(r,u):pt(n,s)+dt(t,i):pt(o,c)+dt(t,i)+d+dt(r,u):pt(n,s)+dt(t,i)+d+dt(r,u):pt(n,s)+dt(r,u)+d+pt(o,c):pt(n,s)+dt(t,i)+d+pt(o,c)}(e.range))}function At(e){return null==e.top&&(e.top=0,e.$top=!1),null==e.bottom&&(e.bottom=T,e.$bottom=!1),null==e.left&&(e.left=0,e.$left=!1),null==e.right&&(e.right=k,e.$right=!1),e}function $t(e,t={xlsx:!1}){const n=lt(e,t);if(n&&n.struct){const e=Q(n.struct);if(e&&e.length===n.struct.length)return t.xlsx?{workbookName:n.workbookName,sheetName:n.sheetName,table:n.name,columns:e.columns,sections:e.sections}:{context:n.context,table:n.name,columns:e.columns,sections:e.sections}}return null}function wt(e,t){return null==e&&null==t||e===t}function Nt(e,t){if(Array.isArray(e)!==Array.isArray(t)||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!wt(e[n],t[n]))return!1;return!0}function Rt(e,t){return!e&&!t||String(e).toLowerCase()===String(t).toLowerCase()}const bt=(e,t,n)=>Math.min(Math.max(t,e),n);function Et(e,t){return t?String(e+1):e?"["+e+"]":""}function kt(e){let t=null,n=null,r=null,o=null;const l=/^R(?:\[([+-]?\d+)\]|(\d+))?/.exec(e);l&&(l[1]?(t=parseInt(l[1],10),r=!1):l[2]?(t=parseInt(l[2],10)-1,r=!0):(t=0,r=!1),e=e.slice(l[0].length));const s=/^C(?:\[([+-]?\d+)\]|(\d+))?/.exec(e);return s&&(s[1]?(n=parseInt(s[1],10),o=!1):s[2]?(n=parseInt(s[2],10)-1,o=!0):(n=0,o=!1),e=e.slice(s[0].length)),!l&&!s||e.length?null:[t,n,r,o]}function Tt(e){let t=null;const[n,r,o,l]=e.split(/(\.?:\.?)/);if(l)return null;const s=kt(n),c=yt(!!r&&"."===r[0],!!r&&"."===r[r.length-1]);if(s){const[e,n,r,l]=s;if(o){const s=kt(o);if(!s)return null;{t={};const[o,c,i,u]=s;null!=e&&null!=o?(t.r0=r===i?Math.min(e,o):e,t.$r0=r,t.r1=r===i?Math.max(e,o):o,t.$r1=i):null!=e&&null==o?(t.r0=e,t.$r0=r,t.r1=null,t.$r1=r):null==e&&null!=o?(t.r0=o,t.$r0=i,t.r1=null,t.$r1=i):null==e&&null==o&&(t.r0=null,t.$r0=!1,t.r1=null,t.$r1=!1),null!=n&&null!=c?(t.c0=l===u?Math.min(n,c):n,t.$c0=l,t.c1=l===u?Math.max(n,c):c,t.$c1=u):null!=n&&null==c?(t.c0=n,t.$c0=l,t.c1=null,t.$c1=l):null==n&&null!=c?(t.c0=c,t.$c0=u,t.c1=null,t.$c1=u):null==n&&null==c&&(t.c0=null,t.$c0=!1,t.c1=null,t.$c1=!1)}}else t=null!=e&&null==n?{r0:e,c0:null,r1:e,c1:null,$r0:r,$c0:!1,$r1:r,$c1:!1}:null==e&&null!=n?{r0:null,c0:n,r1:null,c1:n,$r0:!1,$c0:l,$r1:!1,$c1:l}:{r0:e||0,c0:n||0,r1:e||0,c1:n||0,$r0:r||!1,$c0:l||!1,$r1:r||!1,$c1:l||!1}}return t&&c&&(t.trim=c),t}function Lt(e,{allowNamed:t=!0,allowTernary:n=!1,xlsx:r=!1}={}){const o=lt(e,{allowNamed:t,allowTernary:n,xlsx:r,r1c1:!0});if(o&&(o.r0||o.name)){const e=o.r1?Tt(o.r0+o.operator+o.r1):Tt(o.r0);return e?r?{workbookName:o.workbookName,sheetName:o.sheetName,range:e}:{context:o.context,range:e}:o.name?r?{workbookName:o.workbookName,sheetName:o.sheetName,name:o.name}:{context:o.context,name:o.name}:null}return null}function It(e,{xlsx:t=!1}={}){return(t?ft(e):at(e))+(e.name?e.name:function(e){let{r0:t,c0:n,r1:r,c1:o}=e;const{$c0:l,$c1:s,$r0:c,$r1:i}=e,u=null==t,a=null==n;let f=null==r,h=null==o;const p=mt(e.trim),d=!!e.trim;if(t=bt(c?0:-1048575,0|t,T),n=bt(l?0:-16383,0|n,k),!u&&f&&!a&&h?(r=t,f=!1,o=n,h=!1):(r=bt(i?0:-1048575,0|r,T),o=bt(s?0:-16383,0|o,k)),0===t&&r>=T&&!a&&!h||u&&f){const e=Et(n,l),t=Et(o,s);return"C"+(e!==t||d?e+p+"C"+t:e)}if(0===n&&o>=k&&!u&&!f||a&&h){const e=Et(t,c),n=Et(r,i);return"R"+(e!==n||d?e+p+"R"+n:e)}const m=Et(t,c),y=Et(r,i),g=Et(n,l),v=Et(o,s);return u||f||a||h?(u?"":"R"+m)+(a?"":"C"+g)+p+(f?"":"R"+y)+(h?"":"C"+v):m!==y||g!==v?"R"+m+"C"+g+p+"R"+y+"C"+v:"R"+m+"C"+g}(e.range))}const Ot=(e,t,n)=>null==t?null:e?t:t-n,Ut={withLocation:!1,mergeRefs:!1,allowTernary:!0,r1c1:!1};function Ft(e,t,n,r,o=!0){let l=e;if(null!=l&&!t){if(l=n+e,l<0){if(!o)return NaN;l=r+l+1}if(l>r){if(!o)return NaN;l-=r+1}}return l}const St={wrapEdges:!0,mergeRefs:!0,allowTernary:!0,xlsx:!1};function Mt(e){return e.replace(/([[\]#'@])/g,"'$1")}function Dt(e){return e[0].toUpperCase()+e.slice(1).toLowerCase()}function _t(e,t={}){const{xlsx:n,thisRow:r}=t;let o=n?ft(e):at(e);e.table&&(o+=e.table);const l=e.columns?.length??0,s=e.sections?.length??0;if(1!==s||l)if(s||1!==l){o+="[";const t=!r&&1===s&&"this row"===e.sections[0].toLowerCase();t?o+="@":s&&(o+=e.sections.map((e=>`[#${Dt(e)}]`)).join(","),l&&(o+=",")),t&&1===e.columns.length&&(c=e.columns[0],/^[a-zA-Z0-9\u00a1-\uffff]+$/.test(c))?o+=Mt(e.columns[0]):l&&(o+=e.columns.slice(0,2).map((e=>`[${Mt(e)}]`)).join(":")),o+="]"}else o+=`[${Mt(e.columns[0])}]`;else o+=`[#${Dt(e.sections[0])}]`;var c;return o}const jt=Object.freeze({OPERATOR:e,BOOLEAN:n,ERROR:r,NUMBER:o,FUNCTION:l,NEWLINE:s,WHITESPACE:c,STRING:i,CONTEXT:a,CONTEXT_QUOTE:u,REF_RANGE:f,REF_BEAM:h,REF_TERNARY:p,REF_NAMED:d,REF_STRUCT:m,FX_PREFIX:y,UNKNOWN:g}),Bt=Object.freeze({UNARY:v,BINARY:x,REFERENCE:C,LITERAL:A,ERROR:$,CALL:w,ARRAY:b,IDENTIFIER:E});exports.MAX_COLS=k,exports.MAX_ROWS=T,exports.addA1RangeBounds=At,exports.addTokenMeta=function(e,{sheetName:t="",workbookName:n=""}={}){const r=[];let o=null;const l=function(){let e=1;return()=>"fxg"+e++}(),s=[],c=()=>r.length+(o?1:0);return e.forEach(((e,i)=>{if(e.index=i,e.depth=c(),"("===e.value)r.push(e),e.depth=c();else if(")"===e.value){const t=r.pop();if(t){const n=l();e.groupId=n,e.depth=t.depth,t.groupId=n}else e.error=!0}else if("{"===e.value)o?e.error=!0:(o=e,e.depth=c());else if("}"===e.value){if(o){const t=l();e.groupId=t,e.depth=o.depth,o.groupId=t}else e.error=!0;o=null}else if(e.type===f||e.type===h||e.type===p||e.type===m){const r=e.type===m?$t(e.value,{xlsx:!0}):xt(e.value,{allowTernary:!0,xlsx:!0});if(r&&(r.range||r.columns)){r.source=e.value,function(e,t,n){e.sheetName||(e.sheetName=t),e.workbookName||(e.workbookName=n)}(r,t,n);const o=s.find((e=>function(e,t){if((e.name||t.name)&&e.name!==t.name)return!1;if(e.columns||t.columns){if(e.table!==t.table)return!1;if(!Nt(e.columns,t.columns))return!1;if(!Nt(e.sections,t.sections))return!1}return!!(!e.range&&!t.range||wt(e.range.top,t.range.top)&&wt(e.range.bottom,t.range.bottom)&&wt(e.range.left,t.range.left)&&wt(e.range.right,t.range.right))&&!(!Rt(e.workbookName,t.workbookName)||!Rt(e.sheetName,t.sheetName))}(e,r)));o?e.groupId=o.groupId:(r.groupId=l(),e.groupId=r.groupId,s.push(r))}}else e.type===g&&(e.error=!0)})),e},exports.fixRanges=function e(t,n={addBounds:!1}){if("string"==typeof t)return e(ue(t,n),n).map((e=>e.value)).join("");if(!Array.isArray(t))throw new Error("fixRanges expects an array of tokens");const{addBounds:r,r1c1:o,xlsx:l,thisRow:s}=n;if(o)throw new Error("fixRanges does not have an R1C1 mode");let c=0;return t.map((e=>{const t={...e};e.loc&&(t.loc=[...e.loc]);let n=0;if(t.type===m){const e=_t($t(t.value,{xlsx:l}),{xlsx:l,thisRow:s});n=e.length-t.value.length,t.value=e}else if(ae(t)){const e=xt(t.value,{xlsx:l,allowTernary:!0}),o=e.range;r&&At(o);const s=Ct(e,{xlsx:l});n=s.length-t.value.length,t.value=s}return c||n?(t.loc&&(t.loc[0]+=c),c+=n,t.loc&&(t.loc[1]+=c)):c+=n,t}))},exports.fromCol=it,exports.isError=pe,exports.isFunction=me,exports.isFxPrefix=ye,exports.isLiteral=he,exports.isOperator=ge,exports.isRange=ae,exports.isReference=fe,exports.isWhitespace=de,exports.mergeRefTokens=U,exports.nodeTypes=Bt,exports.parse=function(e,t){if("string"==typeof e)Ne=ue(e,{withLocation:!1,...t,mergeRefs:!0});else{if(!Array.isArray(e))throw new Error("Parse requires a string or array of tokens.");Ne=e}for(be=t?.permitArrayRanges,Ee=t?.permitArrayCalls,ke=t?.looseRefCalls,Re=0;de(Ne[Re])||ye(Ne[Re]);)Re++;Ue(),Pe(!0);const n=Fe(0);return Ue(ve),n},exports.parseA1Ref=xt,exports.parseR1C1Ref=Lt,exports.parseStructRef=$t,exports.stringifyA1Ref=Ct,exports.stringifyR1C1Ref=It,exports.stringifyStructRef=_t,exports.toCol=ct,exports.tokenTypes=jt,exports.tokenize=ue,exports.translateToA1=function(e,t,n=St){const o=vt(t),l="string"==typeof e,s={...St,...n},c=l?ue(e,{withLocation:!1,mergeRefs:s.mergeRefs,xlsx:s.xlsx,allowTernary:s.allowTernary,r1c1:!0}):e;let i=0;const u={xlsx:s.xlsx,allowTernary:s.allowTernary};return c.forEach((e=>{if(ae(e)){const t=e.value,n=Lt(t,u),l=n.range,c={},a=Ft(l.r0,l.$r0,o.top,T,s.wrapEdges),f=Ft(l.r1,l.$r1,o.top,T,s.wrapEdges);a>f?(c.top=f,c.$top=l.$r1,c.bottom=a,c.$bottom=l.$r0):(c.top=a,c.$top=l.$r0,c.bottom=f,c.$bottom=l.$r1);const h=Ft(l.c0,l.$c0,o.left,k,s.wrapEdges),p=Ft(l.c1,l.$c1,o.left,k,s.wrapEdges);h>p?(c.left=p,c.$left=l.$c1,c.right=h,c.$right=l.$c0):(c.left=h,c.$left=l.$c0,c.right=p,c.$right=l.$c1),l.trim&&(c.trim=l.trim),isNaN(a)||isNaN(f)||isNaN(h)||isNaN(p)?(e.type=r,e.value="#REF!",delete e.groupId):(n.range=c,e.value=Ct(n,u)),e.loc&&(e.loc[0]+=i,i+=e.value.length-t.length,e.loc[1]+=i)}else i&&e.loc&&(e.loc[0]+=i,e.loc[1]+=i)})),l?c.map((e=>e.value)).join(""):c},exports.translateToR1C1=function(e,t,{xlsx:n=!1,allowTernary:r=!0}={}){const{top:o,left:l}=vt(t),s="string"==typeof e,c=s?ue(e,{...Ut,xlsx:n,allowTernary:r}):e;let i=0;const u={xlsx:n,allowTernary:r};return c.forEach((e=>{if(ae(e)){const t=e.value,n=xt(t,u),r=n.range,s={};s.r0=Ot(r.$top,r.top,o),s.r1=Ot(r.$bottom,r.bottom,o),s.c0=Ot(r.$left,r.left,l),s.c1=Ot(r.$right,r.right,l),s.$r0=r.$top,s.$r1=r.$bottom,s.$c0=r.$left,s.$c1=r.$right,r.trim&&(s.trim=r.trim),n.range=s,e.value=It(n,u),e.loc&&(e.loc[0]+=i,i+=e.value.length-t.length,e.loc[1]+=i)}else i&&e.loc&&(e.loc[0]+=i,e.loc[1]+=i)})),s?c.map((e=>e.value)).join(""):c};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
