"use strict";const e="operator",t="operator-trim",n="bool",l="error",o="number",r="func",s="newline",u="whitespace",i="string",a="context_quote",c="context",f="range",p="range_beam",h="range_ternary",g="range_named",d="structured",m="fx_prefix",x="unknown",y="UnaryExpression",v="BinaryExpression",$="ReferenceIdentifier",w="Literal",R="ErrorLiteral",N="CallExpression",E="LambdaExpression",b="LetExpression",A="ArrayExpression",C="Identifier",k=16383,T=1048575;function L(e){const t=e||"",n=t.length;let l=0;if(n>2){const e=t.charCodeAt(n-3);l+=676*(1+e-(e>95?32:0)-65)}if(n>1){const e=t.charCodeAt(n-2);l+=26*(1+e-(e>95?32:0)-65)}if(n){const e=t.charCodeAt(n-1);l+=e-(e>95?32:0)-65}return l}const I=/^\[('['#@[\]]|[^'#@[\]])*\]/i,O=/^([^#@[\]:]+)/i,U={headers:1,data:2,totals:4,all:8,"this row":16,"@":16},F=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Object.freeze(t)},_={0:F(),1:F("headers"),2:F("data"),4:F("totals"),8:F("all"),16:F("this row"),3:F("headers","data"),6:F("data","totals")},S=function(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=I.exec(e);if(n){const e=n[0].slice(1,-1).replace(/'(['#@[\]])/g,"$1");return[n[0],e]}return t&&(n=O.exec(e),n)?[n[0],n[0]]:null};function M(e){const t=[];let n,l,o=0,r=e,s=0;if(!(n=/^(\[\s*)/.exec(r)))return null;if(l=/^\[#([a-z ]+)\]/i.exec(r)){const e=l[1].toLowerCase();if(o+=l[0].length,!U[e])return null;s|=U[e]}else if(l=S(r,!1))o+=l[0].length,l[1]&&t.push(l[1]);else{let l=!0;for(r=r.slice(n[1].length),o+=n[1].length;l&&(n=/^\[#([a-z ]+)\](\s*,\s*)?/i.exec(r));){const e=n[1].toLowerCase();if(!U[e])return null;s|=U[e],r=r.slice(n[0].length),o+=n[0].length,l=!!n[2]}if(l&&(n=/^@/.exec(r))&&(s|=U["@"],r=r.slice(1),o+=1,l="]"!==r[0]),!(s in _))return null;const u=l?S(e.slice(o)):null;if(u){if(o+=u[0].length,t.push(u[1]),r=e.slice(o),":"===r[0]){r=r.slice(1),o++;const e=S(r);if(!e)return null;o+=e[0].length,t.push(e[1])}l=!1}for(;" "===e[o];)o++;if(l||"]"!==e[o])return null;o++}const u=_[s];return{columns:t,sections:u?u.concat():u,length:o,token:e.slice(0,o)}}const D=/^(?!!)(\[(?:[^\]])+\])?([0-9A-Za-z._¡¤§¨ª\u00ad¯-\uffff]+)?(?=!)/,z=/^'(?:''|[^'])*('|$)(?=!)/,j="\\$?[A-Z]{1,3}\\$?[1-9][0-9]{0,6}",B="\\$?[A-Z]{1,3}",Z="\\$?[1-9][0-9]{0,6}",X="\\.?:\\.?",P="(?![a-z0-9_\\u00a1-\\uffff])",W=new RegExp(`^${B}${X}${B}${P}`,"i"),G=new RegExp(`^${Z}${X}${Z}${P}`,"i"),Y=new RegExp(`^${j}${P}`,"i"),H=new RegExp(`^((${B}|${Z})${X}${j}|${j}${X}(${B}|${Z}))(?![\\w($.])`,"i"),K="(?:R(?:\\[[+-]?\\d+\\]|[1-9][0-9]{0,6})?)",q="(?:C(?:\\[[+-]?\\d+\\]|[1-9][0-9]{0,4})?)",V=new RegExp(`^${q}(${X}${q})?${P}`,"i"),Q=new RegExp(`^${K}(${X}${K})?${P}`,"i"),J=new RegExp(`^(?:(?=[RC])${K}${q})${P}`,"i"),ee=new RegExp(`^(${K}${q}(${X}${q}|${X}${K})(?![[\\d])|(${K}|${q})(${X}${K}${q}))${P}`,"i"),te=/^[a-zA-Z\\_\u00a1-\uffff][a-zA-Z0-9\\_.?\u00a1-\uffff]{0,254}/i;function ne(e,t){return n=>{const l=t.exec(n);if(l)return{type:e,value:l[0]}}}function le(e){const t=te.exec(e);if(t){const e=t[0].toLowerCase();return"\\"===e[0]&&t[0].length<3||("r"===e||"c"===e)?null:{type:g,value:t[0]}}}const oe=/^'(?:[^[\]]+?)?(?:\[(.+?)\])?(?:[^[\]]+?)'$/,re=/^'\[(.+?)\]'$/;function se(e,t){const n=z.exec(e);if(n){const e=n[0];if(t.xlsx&&re.test(e)||oe.test(e))return{type:a,value:e}}const l=D.exec(e);if(l){const[,e,n]=l;if(e&&n||n||e&&!n&&t.xlsx)return{type:c,value:l[0]}}}function ue(e){const t=M(e);if(t){let n=t.length;for(;" "===e[n];)n++;if("!"!==e[n])return{type:d,value:t.token}}return null}const ie=/([RC])(\[?)(-?\d+)/gi,ae=/(\d+|[a-zA-Z]+)/gi;function ce(e,t){let n,l;if(t.r1c1){if(t.allowTernary&&(n=ee.exec(e))?l={type:h,value:n[0]}:(n=J.exec(e))?l={type:f,value:n[0]}:((n=Q.exec(e))||(n=V.exec(e)))&&(l={type:p,value:n[0]}),l){for(ie.lastIndex=0;null!==(n=ie.exec(l.value));){const e=("R"===n[1]?T:k)+(n[2]?0:1),t=parseInt(n[3],10);if(t>e||t<-e)return null}return l}}else if(t.allowTernary&&(n=H.exec(e))?l={type:h,value:n[0]}:(n=W.exec(e))||(n=G.exec(e))?l={type:p,value:n[0]}:(n=Y.exec(e))&&(l={type:f,value:n[0]}),l){for(ae.lastIndex=0;null!==(n=ae.exec(l.value));)if(/^\d/.test(n[1])){if(parseInt(n[1],10)-1>T)return null}else if(L(n[1])>k)return null;return l}}const fe=[ne(l,/^#(NAME\?|FIELD!|CALC!|VALUE!|REF!|DIV\/0!|NULL!|NUM!|N\/A|GETTING_DATA\b|SPILL!|UNKNOWN!|FIELD\b|CALC\b|SYNTAX\?|ERROR!|CONNECT!|BLOCKED!|EXTERNAL!)/i),ne(t,/^(\.:\.|\.:|:\.)/),ne(e,/^(<=|>=|<>|[-+/*^%&<>=]|[{},;]|[()]|@|:|!|#)/),ne(r,/^[A-Z_]+[A-Z\d_.]*(?=\()/i),ne(n,/^(TRUE|FALSE)\b/i),ne(s,/^\n+/),ne(u,/^[ \f\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/),ne(i,/^"(?:""|[^"])*("|$)/),se,ce,ue,ne(o,/^(?:\d+(\.\d+)?(?:[eE][+-]?\d+)?|\d+)/),le],pe=[function(t,n){if(n.r1c1)return"!"===t[0]?{type:e,value:t[0]}:null;const l=/^(!|\.?:\.?)/.exec(t);return l?{type:e,value:l[1]}:null},se,ce,ue,le],he={};function ge(e,t){if(e.length){const n=e[0];t[n]=t[n]||{},ge(e.slice(1),t[n])}else t.$=!0}[[f,":",f],[f,".:",f],[f,":.",f],[f,".:.",f],[f],[p],[h],[c,"!",f,":",f],[c,"!",f,".:",f],[c,"!",f,":.",f],[c,"!",f,".:.",f],[c,"!",f],[c,"!",p],[c,"!",h],[a,"!",f,":",f],[a,"!",f,".:",f],[a,"!",f,":.",f],[a,"!",f,".:.",f],[a,"!",f],[a,"!",p],[a,"!",h],[g],[c,"!",g],[a,"!",g],[d],[g,d],[c,"!",g,d],[a,"!",g,d]].forEach((e=>ge(e.concat().reverse(),he)));const de=function(t,n,l){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;const r=t[l-o];if(r){const s=r.type===e?r.value:r.type;if(s in n)return de(t,n[s],l,o+1)}return n.$?o:0};function me(e){const t=[];for(let n=e.length-1;n>=0;n--){let l=e[n];const o=de(e,he,n);if(o){const t=e.slice(n-o+1,n+1);l={...l},l.value=t.map((e=>e.value)).join(""),l.loc&&t[0].loc&&(l.loc[0]=t[0].loc[0]),n-=o-1}t.unshift(l)}return t}const xe=(e,t)=>e&&e.type===t,ye={withLocation:!1,mergeRefs:!0,allowTernary:!1,negativeNumbers:!0,r1c1:!1},ve=e=>e.type===g||e.type===r,$e=t=>!xe(t,e)||"%"===t.value||"}"===t.value||")"===t.value||"#"===t.value;function we(n,l){let a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const c=Object.assign({},ye,a),{withLocation:p,mergeRefs:h,negativeNumbers:d}=c,y=[];let v=0,$=0,w=0;const R=[];let N=null,E=null,b=null;const A=e=>{const n=e.type===x,l=b&&b.type===x;b&&(n&&l||n&&ve(b)||l&&ve(e))?(b.value+=e.value,b.type=x,p&&(b.loc[1]=e.loc[1])):(e.type===t&&(R.push(y.length),e.type=x),y.push(e),b=e,e.type!==u&&e.type!==s&&(E=N,N=e))};if("="===n[0]){v++,A({type:m,value:"=",...p?{loc:[0,1]}:{}})}for(;v<n.length;){const t=v,s=n.slice(v);let u="",a="";for(let e=0;e<l.length;e++){const t=l[e](s,c);if(t){u=t.type,a=t.value,v+=a.length;break}}u||(u=x,a=n[v],v++);const f={type:u,value:a,...p?{loc:[t,v]}:{}};if(b&&b.type===r&&"("===a){const e=b.value.toLowerCase();"lambda"!==e&&"let"!==e||$++}if(u===x){const e=a.toLowerCase();w+="r"===e||"c"===e?1:0}if(u===i){const e=a.length;if('""'===a);else if('"'===a||'"'!==a[e-1])f.unterminated=!0;else if('""'!==a&&'"'===a[e-2]){let t=e-1;for(;'"'===a[t];)t--;!(t+1)^(e-t+1)%2==0&&(f.unterminated=!0)}}if(d&&u===o){const t=b;if(t&&xe(t,e)&&"-"===t.value&&(!E||xe(E,m)||!$e(E))){const e=y.pop();f.value="-"+a,p&&(f.loc[0]=e.loc[0]),N=E,b=y[y.length-1]}}A(f)}w&&$&&function(t){let n,l=0,o=0;for(const s of t){if(s.type===e)if("("===s.value){if(o++,n.type===r){const e=n.value.toLowerCase();"lambda"!==e&&"let"!==e||(l=o)}}else")"===s.value&&(o--,o<l&&(l=0));else l&&s.type===x&&/^[rc]$/.test(s.value)&&(s.type=g);n=s}}(y);for(const t of R){const n=y[t-1],l=y[t-1];n&&n.type===f&&l&&l.type===f?y[t].type=e:y[t].type=x}return h?me(y):y}function Re(e){return we(e,fe,arguments.length>1&&void 0!==arguments[1]?arguments[1]:{})}function Ne(e){return!!e&&(e.type===f||e.type===p||e.type===h)}function Ee(e){return!!e&&(e.type===f||e.type===p||e.type===h||e.type===d||e.type===g)}function be(e){return!!e&&(e.type===n||e.type===l||e.type===o||e.type===i)}function Ae(e){return!!e&&e.type===l}function Ce(e){return!!e&&(e.type===u||e.type===s)}function ke(e){return!!e&&e.type===r}function Te(e){return!!e&&e.type===m}function Le(t){return!!t&&t.type===e}const Ie="(END)",Oe="(FUNCTION)",Ue="(WHITESPACE)",Fe=["ANCHORARRAY","CHOOSE","DROP","IF","IFS","INDEX","INDIRECT","LAMBDA","LET","OFFSET","REDUCE","SINGLE","SWITCH","TAKE","TRIMRANGE","XLOOKUP"],_e={};let Se,Me,De,ze=!1,je=!1,Be=!1;const Ze=e=>Be||Fe.includes(e.toUpperCase()),Xe=e=>!!e&&(e.type===$||(e.type===R||e.type===l)&&"#REF!"===e.value||e.type===v&&(":"===e.operator||" "===e.operator||","===e.operator)||Ee(e)||e.type===N&&Ze(e.callee.name));function Pe(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n=new Error(e);throw n.source=Me.map((e=>e.value)).join(""),n.sourceOffset=Me.slice(0,t??De).reduce(((e,t)=>e+t.value.length),0),n}function We(){let e,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=De;do{e=Me[++n]}while(e&&(Ce(e)||Le(e)&&"("===e.value));return function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const n=(e&&e.value)+"";return!(!Ee(e)&&(!t||!Le(e)||":"!==n&&","!==n&&n.trim())&&(!ke(e)||!Ze(n))&&(!Ae(e)||"#REF!"!==n))}(e,t)}function Ge(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(e&&e!==Se.id&&Pe(`Expected ${e} but got ${Se.id}`),Ce(Me[De])){const e=Xe(t),n=e&&We(!1),l=e&&Me[De+1]&&"("===Me[De+1].value;if(!n&&!l)for(;Ce(Me[De]);)De++}if(De>=Me.length)return void(Se=_e[Ie]);const n=Me[De];let l;return De+=1,n.unterminated&&Pe("Encountered an unterminated token"),Le(n)?(l=_e[n.value],l||Pe(`Unknown operator ${n.value}`)):Ce(n)?l=_e[Ue]:be(n)?l=_e[w]:Ee(n)?l=_e[$]:ke(n)?l=_e[Oe]:Pe(`Unexpected ${n.type} token: ${n.value}`),Se=Object.create(l),Se.type=n.type,Se.value=n.value,n.loc&&(Se.loc=[...n.loc]),Se}function Ye(e){let t=Se;Ge(null,t);let n=t.nud();for(;e<Se.lbp;)t=Se,Ge(null,t),n=t.led(n);return n}const He={nud:()=>Pe("Invalid syntax"),led:()=>Pe("Missing operator")};function Ke(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=_e[e];return n?t>=n.lbp&&(n.lbp=t):(n={...He},n.id=e,n.value=e,n.lbp=t,_e[e]=n),n}function qe(e,t,n){const l=Ke(e,t);return l.led=n||function(e){this.type=v,this.operator=this.value,delete this.value;const n=Ye(t);return this.arguments=[e,n],this.loc&&(this.loc=[e.loc[0],n.loc[1]]),this},l}function Ve(e,t){const n=Ke(e,0);return n.lbp=70,n.led=t||function(e){return this.type=y,this.operator=this.value,delete this.value,this.arguments=[e],this.loc&&(this.loc[0]=e.loc[0]),this},n}function Qe(e,t){const n=Ke(e);return n.nud=t||function(){this.type=y,this.operator=this.value,delete this.value;const e=Ye(70);return this.arguments=[e],this.loc&&(this.loc[1]=e.loc[1]),this},n}function Je(e,t){return qe(e,t,(function(n){Xe(n)||Pe(`Unexpected ${e} operator`);const l=Ye(t);return Xe(l)||Pe(`Unexpected ${Se.type} following ${this.id}`),this.type=v,this.operator=this.value.trim()?this.value:" ",delete this.value,this.arguments=[n,l],this.loc&&(this.loc=[n.loc[0],l.loc[1]]),this}))}Ke(Ie),Je(":",80);const et=Je(",",80);Je(Ue,80);const tt=e=>{const t=et.lbp>0;return null!=e&&(et.lbp=e?80:0),t};function nt(e){const t=[],n={};let l,o=!1;const r=tt(!1);if(")"!==Se.id)for(;!o;){Ce(Se)&&Ge();const e=De,r=Ye(0);if(","===Se.id){if(r.type===$&&"name"===r.kind){const e=r.value.toLowerCase();e in n&&Pe("Duplicate name: "+r.value),n[e]=1;const l={type:C,name:r.value};r.loc&&(l.loc=r.loc),t.push(l)}else De=e,Pe("LAMBDA argument is not a name");Ge(",")}else l=r,o=!0}return tt(r),delete this.value,this.type=E,this.params=t,this.body=l||null,e.loc&&(this.loc=[e.loc[0],Se.loc[1]]),Ge(")",this),this}function lt(e){const t=[],n=[],l={};let o,r=0;const s=(e,s)=>{if(o&&Pe("Unexpected argument following calculation"),s&&r>=2)o=e;else{if(!(r%2))if(e&&e.type===$&&"name"===e.kind){const n=e.value.toLowerCase();n in l&&Pe("Duplicate name: "+e.value),l[n]=1,t.push({type:C,name:e.value,loc:e.loc})}else r>=2?o=e:Pe("Argument is not a name");else n.push(e)}r++},u=tt(!1);let i=!1;if(")"!==Se.id){for(;")"!==Se.id;)if(Ce(Se)&&Ge(),","===Se.id)s(null),i=!0,Ge();else{s(Ye(0),","!==Se.id),i=!1,","===Se.id&&(Ge(","),i=!0)}tt(u)}i&&s(null,!0),void 0===o&&Pe("Unexpected end of arguments"),tt(u),delete this.value,this.type=b,this.declarations=[],t.length||Pe("Unexpected end of arguments");for(let e=0;e<t.length;e++){const l={type:"LetDeclarator",id:t[e],init:n[e],loc:t[e].loc&&[t[e].loc[0],n[e].loc[1]]};this.declarations.push(l)}return this.body=o,e.loc&&(this.loc=[e.loc[0],Se.loc[1]]),Ge(")",this),this}function ot(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=!1,l="";const o=[],r=()=>{l&&o.push(t?l:{value:l,braced:n}),l=""};for(let t=0;t<e.length;t++){const o=e[t];"["===o?(r(),n=!0):"]"===o?(r(),n=!1):l+=o}return r(),o}function rt(e){return{context:ot(e,!0)}}function st(e){const t={},n=ot(e);if(n.length>1)t.workbookName=n[n.length-2].value,t.sheetName=n[n.length-1].value;else if(1===n.length){const e=n[0];e.braced?t.workbookName=e.value:t.sheetName=e.value}return t}Ve("%"),Ve("#",(function(e){return Xe(e)||Pe("# expects a reference"),this.type=y,this.operator=this.value,delete this.value,this.arguments=[e],this})),Qe("+"),Qe("-"),Qe("@"),qe("^",50),qe("*",40),qe("/",40),qe("+",30),qe("-",30),qe("&",20),qe("=",10),qe("<",10),qe(">",10),qe("<=",10),qe(">=",10),qe("<>",10),Ke(w).nud=function(){const{type:e,value:t}=this;if(this.type=w,this.raw=t,e===o)this.value=+t;else if(e===n)this.value="TRUE"===t.toUpperCase();else if(e===l)this.type=R,this.value=t.toUpperCase();else{if(e!==i)throw new Error("Unsupported literal type: "+e);this.value=t.slice(1,-1).replace(/""/g,'"')}return this},Ke($).nud=function(){return this.type===g?this.kind="name":this.type===d?this.kind="table":this.type===p?this.kind="beam":this.kind="range",this.type=$,this},Ke(")"),Qe("(",(function(){const e=tt(!0),t=Ye(0);return Ge(")",t),tt(e),t})),Ke(Oe).nud=function(){return this},qe("(",90,(function(e){let t={type:C,name:e.value};e.id!==Oe&&(e.type===E||e.type===N||e.type===b||e.type===$||e.type===y&&"#"===e.value||e.type===R&&"#REF!"===e.value?t=e:Pe("Unexpected call",De-1));const n=e.value.toLowerCase();if("lambda"===n)return nt.call(this,e);if("let"===n)return lt.call(this,e);const l=[];let o=!1;if(")"!==Se.id){const e=tt(!1);for(;")"!==Se.id;)if(Ce(Se)&&Ge(),","===Se.id)l.push(null),o=!0,Ge();else{const e=Ye(0);l.push(e),o=!1,","===Se.id&&(Ge(","),o=!0)}tt(e)}o&&l.push(null);const r=Se;return delete this.value,this.type=N,this.callee=t,e.loc&&(this.callee.loc=[...e.loc]),this.arguments=l,e.loc&&(this.loc=[e.loc[0],r.loc[1]]),Ge(")",this),this})),Ke("}"),Ke(";"),Qe("{",(function(){"}"===Se.id&&Pe("Unexpected empty array");let e=[],t=!1;const n=[e],l=tt(!1);for(;!t;){if(Ce(Se)&&Ge(),be(Se))e.push(_e[w].nud.call(Se)),Ge();else if(ze&&Xe(Se))e.push(_e[$].nud.call(Se)),Ge();else if(je&&ke(Se)){const t=Ye(0);e.push(t)}else Pe(`Unexpected ${Se.type} in array: ${Se.value}`);","===Se.id?Ge(","):";"===Se.id?(Ge(";"),e=[],n.push(e)):t=!0}const o=Se;return Ge("}"),tt(l),this.type=A,this.elements=n,this.loc&&(this.loc[1]=o.loc[1]),delete this.value,this}));const ut=e=>e&&(":"===e.value||".:"===e.value||":."===e.value||".:."===e.value)&&{operator:e.value},it=e=>e&&e.type===f&&{r0:e.value},at=e=>e&&e.type===h&&{r0:e.value},ct=e=>e&&e.type===f&&{r1:e.value},ft=t=>t&&t.type===e&&"!"===t.value&&{},pt=e=>e&&e.type===p&&{r0:e.value},ht=e=>e&&e.type===d&&{struct:e.value},gt=(e,t)=>{const n=t.xlsx?st:rt;return e&&e.type===c?n(e.value):e&&e.type===a?n(e.value.slice(1,-1).replace(/''/g,"'")):void 0},dt=e=>e&&e.type===g&&{name:e.value},mt=[[at],[it,ut,ct],[it],[pt],[gt,ft,at],[gt,ft,it,ut,ct],[gt,ft,it],[gt,ft,pt]],xt=mt.concat([[dt],[gt,ft,dt],[ht],[dt,ht],[gt,ft,dt,ht]]);function yt(e,t){const n={withLocation:!1,mergeRefs:!1,allowTernary:!1,allowNamed:!0,r1c1:!1,xlsx:!1,...t},l=we(e,pe,n),o=n.xlsx?{workbookName:"",sheetName:"",r0:"",r1:"",name:"",operator:""}:{context:[],r0:"",r1:"",name:"",operator:""};l.length&&l[0].type===m&&l.shift();const r=n.allowNamed?xt:mt;for(let e=0;e<r.length;e++){const t={...o};if(r[e].length===l.length){const o=r[e].every(((e,o)=>{const r=e(l[o],n);return Object.assign(t,r),r}));if(o)return t}}return null}const vt=String.fromCharCode;function $t(e){return(e>=702?vt(((e-702)/676-0)%26+65):"")+(e>=26?vt((e/26-1)%26+65):"")+vt(e%26+65)}const wt=/[^0-9A-Za-z._¡¤§¨ª\u00ad¯-\uffff]/;function Rt(e){let t="",n=0,l=0;const o=e.context||[];for(let e=o.length;e>-1;e--){const r=o[e];if(r){t=(l%2?"["+r+"]":r)+t,n+=+wt.test(r),l++}}return n&&(t="'"+t.replace(/'/g,"''")+"'"),t?t+"!":t}function Nt(e){let t="",n=0;const{workbookName:l,sheetName:o}=e;return l&&(t+="["+l+"]",n+=+wt.test(l)),o&&(t+=o,n+=+wt.test(o)),n&&(t="'"+t.replace(/'/g,"''")+"'"),t?t+"!":t}const Et=(e,t,n)=>Math.min(Math.max(t,e),n),bt=(e,t)=>(t?"$":"")+$t(e),At=(e,t)=>(t?"$":"")+String(e+1);function Ct(e){return"both"===e?".:.":"head"===e?".:":"tail"===e?":.":":"}function kt(e,t){return e&&t?"both":e?"head":t?"tail":void 0}function Tt(e){const t=/^(?=.)(\$(?=\D))?([A-Za-z]{0,3})?(\$)?([1-9][0-9]{0,6})?$/.exec(e);return t&&(t[2]||t[4])?[t[4]?(n=t[4],+n-1):null,t[2]?L(t[2]):null,!!t[3],!!t[1]]:null;var n}function Lt(e){let t=null,n=null,l=null,o=null,r=!1,s=!1,u=!1,i=!1;const[a,c,f,p,h]=e.split(/(\.?:\.?)/);if(p||h)return null;const g=kt(!!c&&"."===c[0],!!c&&"."===c[c.length-1]),d=Tt(a),m=f?Tt(f):null;if(!d||f&&!m)return null;if(null!=d[0]&&null!=d[1]?[t,n,r,s]=d:null==d[0]&&null!=d[1]?[,n,,s]=d:null!=d[0]&&null==d[1]&&([t,,r]=d),f)null!=m[0]&&null!=m[1]?[l,o,u,i]=m:null==m[0]&&null!=m[1]?[,o,,i]=m:null!=m[0]&&null==m[1]&&([l,,u]=m);else{if(null==t||null==n)return null;l=t,o=n,u=r,i=s}null!=o&&(null==n||null!=n&&o<n)&&([n,o,s,i]=[o,n,i,s]),null!=l&&(null==t||null!=t&&l<t)&&([t,l,r,u]=[l,t,u,r]);const x={top:t,left:n,bottom:l,right:o,$top:r,$left:s,$bottom:u,$right:i};return g&&(x.trim=g),x}function It(e){let{allowNamed:t=!0,allowTernary:n=!1,xlsx:l=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const o=yt(e,{allowNamed:t,allowTernary:n,xlsx:l,r1c1:!1});if(o&&(o.r0||o.name)){let e=null;return o.r0&&(e=Lt(o.r1?o.r0+o.operator+o.r1:o.r0)),e?l?{workbookName:o.workbookName,sheetName:o.sheetName,range:e}:{context:o.context,range:e}:o.name?l?{workbookName:o.workbookName,sheetName:o.sheetName,name:o.name}:{context:o.context,name:o.name}:null}return null}function Ot(e){let{xlsx:t=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(t?Nt(e):Rt(e))+(e.name?e.name:function(e){let{top:t,left:n,bottom:l,right:o,trim:r}=e;const{$left:s,$right:u,$top:i,$bottom:a}=e,c=null==n,f=null==o,p=null==t,h=null==l;t=Et(0,0|t,T),n=Et(0,0|n,k),!c&&!p&&f&&h?(l=t,o=n):(l=Et(0,0|l,T),o=Et(0,0|o,k));const g=Ct(r);return 0===t&&l>=T&&!c&&!f&&(!(s&&!c||u&&!f)||n===o)||p&&h?bt(n,s)+g+bt(o,u):0===n&&o>=k&&!p&&!h&&(!(i&&!p||a&&!h)||t===l)||c&&f?At(t,i)+g+At(l,a):c||p||f||!h?c||!p||f||h?c||p||!f||h?!c||p||f||h?o!==n||l!==t||u!==s||a!==i?bt(n,s)+At(t,i)+g+bt(o,u)+At(l,a):bt(n,s)+At(t,i):bt(o,u)+At(t,i)+g+At(l,a):bt(n,s)+At(t,i)+g+At(l,a):bt(n,s)+At(l,a)+g+bt(o,u):bt(n,s)+At(t,i)+g+bt(o,u)}(e.range))}function Ut(e){return null==e.top&&(e.top=0,e.$top=!1),null==e.bottom&&(e.bottom=T,e.$bottom=!1),null==e.left&&(e.left=0,e.$left=!1),null==e.right&&(e.right=k,e.$right=!1),e}function Ft(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{xlsx:!1};const n=yt(e,t);if(n&&n.struct){const e=M(n.struct);if(e&&e.length===n.struct.length)return t.xlsx?{workbookName:n.workbookName,sheetName:n.sheetName,table:n.name,columns:e.columns,sections:e.sections}:{context:n.context,table:n.name,columns:e.columns,sections:e.sections}}return null}function _t(e,t){return null==e&&null==t||e===t}function St(e,t){if(Array.isArray(e)!==Array.isArray(t)||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!_t(e[n],t[n]))return!1;return!0}function Mt(e,t){return!e&&!t||String(e).toLowerCase()===String(t).toLowerCase()}const Dt=(e,t,n)=>Math.min(Math.max(t,e),n);function zt(e,t){return t?String(e+1):e?"["+e+"]":""}function jt(e){let t=null,n=null,l=null,o=null;const r=/^R(?:\[([+-]?\d+)\]|(\d+))?/.exec(e);r&&(r[1]?(t=parseInt(r[1],10),l=!1):r[2]?(t=parseInt(r[2],10)-1,l=!0):(t=0,l=!1),e=e.slice(r[0].length));const s=/^C(?:\[([+-]?\d+)\]|(\d+))?/.exec(e);return s&&(s[1]?(n=parseInt(s[1],10),o=!1):s[2]?(n=parseInt(s[2],10)-1,o=!0):(n=0,o=!1),e=e.slice(s[0].length)),!r&&!s||e.length?null:[t,n,l,o]}function Bt(e){let t=null;const[n,l,o,r]=e.split(/(\.?:\.?)/);if(r)return null;const s=jt(n),u=kt(!!l&&"."===l[0],!!l&&"."===l[l.length-1]);if(s){const[e,n,l,r]=s;if(o){const s=jt(o);if(!s)return null;{t={};const[o,u,i,a]=s;null!=e&&null!=o?(t.r0=l===i?Math.min(e,o):e,t.$r0=l,t.r1=l===i?Math.max(e,o):o,t.$r1=i):null!=e&&null==o?(t.r0=e,t.$r0=l,t.r1=null,t.$r1=l):null==e&&null!=o?(t.r0=o,t.$r0=i,t.r1=null,t.$r1=i):null==e&&null==o&&(t.r0=null,t.$r0=!1,t.r1=null,t.$r1=!1),null!=n&&null!=u?(t.c0=r===a?Math.min(n,u):n,t.$c0=r,t.c1=r===a?Math.max(n,u):u,t.$c1=a):null!=n&&null==u?(t.c0=n,t.$c0=r,t.c1=null,t.$c1=r):null==n&&null!=u?(t.c0=u,t.$c0=a,t.c1=null,t.$c1=a):null==n&&null==u&&(t.c0=null,t.$c0=!1,t.c1=null,t.$c1=!1)}}else t=null!=e&&null==n?{r0:e,c0:null,r1:e,c1:null,$r0:l,$c0:!1,$r1:l,$c1:!1}:null==e&&null!=n?{r0:null,c0:n,r1:null,c1:n,$r0:!1,$c0:r,$r1:!1,$c1:r}:{r0:e||0,c0:n||0,r1:e||0,c1:n||0,$r0:l||!1,$c0:r||!1,$r1:l||!1,$c1:r||!1}}return t&&u&&(t.trim=u),t}function Zt(e){let{allowNamed:t=!0,allowTernary:n=!1,xlsx:l=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const o=yt(e,{allowNamed:t,allowTernary:n,xlsx:l,r1c1:!0});if(o&&(o.r0||o.name)){const e=o.r1?Bt(o.r0+o.operator+o.r1):Bt(o.r0);return e?l?{workbookName:o.workbookName,sheetName:o.sheetName,range:e}:{context:o.context,range:e}:o.name?l?{workbookName:o.workbookName,sheetName:o.sheetName,name:o.name}:{context:o.context,name:o.name}:null}return null}function Xt(e){let{xlsx:t=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(t?Nt(e):Rt(e))+(e.name?e.name:function(e){let{r0:t,c0:n,r1:l,c1:o}=e;const{$c0:r,$c1:s,$r0:u,$r1:i}=e,a=null==t,c=null==n;let f=null==l,p=null==o;const h=Ct(e.trim),g=!!e.trim;if(t=Dt(u?0:-1048575,0|t,T),n=Dt(r?0:-16383,0|n,k),!a&&f&&!c&&p?(l=t,f=!1,o=n,p=!1):(l=Dt(i?0:-1048575,0|l,T),o=Dt(s?0:-16383,0|o,k)),0===t&&l>=T&&!c&&!p||a&&f){const e=zt(n,r),t=zt(o,s);return"C"+(e!==t||g?e+h+"C"+t:e)}if(0===n&&o>=k&&!a&&!f||c&&p){const e=zt(t,u),n=zt(l,i);return"R"+(e!==n||g?e+h+"R"+n:e)}const d=zt(t,u),m=zt(l,i),x=zt(n,r),y=zt(o,s);return a||f||c||p?(a?"":"R"+d)+(c?"":"C"+x)+h+(f?"":"R"+m)+(p?"":"C"+y):d!==m||x!==y?"R"+d+"C"+x+h+"R"+m+"C"+y:"R"+d+"C"+x}(e.range))}const Pt=(e,t,n)=>null==t?null:e?t:t-n,Wt={withLocation:!1,mergeRefs:!1,allowTernary:!0,r1c1:!1};function Gt(e,t,n,l){let o=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],r=e;if(null!=r&&!t){if(r=n+e,r<0){if(!o)return NaN;r=l+r+1}if(r>l){if(!o)return NaN;r-=l+1}}return r}const Yt={wrapEdges:!0,mergeRefs:!0,allowTernary:!0,xlsx:!1};function Ht(e){return e.replace(/([[\]#'@])/g,"'$1")}function Kt(e){return e[0].toUpperCase()+e.slice(1).toLowerCase()}function qt(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{xlsx:n,thisRow:l}=t;let o=n?Nt(e):Rt(e);e.table&&(o+=e.table);const r=e.columns?.length??0,s=e.sections?.length??0;if(1!==s||r)if(s||1!==r){o+="[";const t=!l&&1===s&&"this row"===e.sections[0].toLowerCase();t?o+="@":s&&(o+=e.sections.map((e=>`[#${Kt(e)}]`)).join(","),r&&(o+=",")),t&&1===e.columns.length&&(u=e.columns[0],/^[a-zA-Z0-9\u00a1-\uffff]+$/.test(u))?o+=Ht(e.columns[0]):r&&(o+=e.columns.slice(0,2).map((e=>`[${Ht(e)}]`)).join(":")),o+="]"}else o+=`[${Ht(e.columns[0])}]`;else o+=`[#${Kt(e.sections[0])}]`;var u;return o}const Vt=Object.freeze({OPERATOR:e,BOOLEAN:n,ERROR:l,NUMBER:o,FUNCTION:r,NEWLINE:s,WHITESPACE:u,STRING:i,CONTEXT:c,CONTEXT_QUOTE:a,REF_RANGE:f,REF_BEAM:p,REF_TERNARY:h,REF_NAMED:g,REF_STRUCT:d,FX_PREFIX:m,UNKNOWN:x}),Qt=Object.freeze({UNARY:y,BINARY:v,REFERENCE:$,LITERAL:w,ERROR:R,CALL:N,ARRAY:A,IDENTIFIER:C});exports.MAX_COLS=k,exports.MAX_ROWS=T,exports.addA1RangeBounds=Ut,exports.addTokenMeta=function(e){let{sheetName:t="",workbookName:n=""}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const l=[];let o=null;const r=function(){let e=1;return()=>"fxg"+e++}(),s=[],u=()=>l.length+(o?1:0);return e.forEach(((e,i)=>{if(e.index=i,e.depth=u(),"("===e.value)l.push(e),e.depth=u();else if(")"===e.value){const t=l.pop();if(t){const n=r();e.groupId=n,e.depth=t.depth,t.groupId=n}else e.error=!0}else if("{"===e.value)o?e.error=!0:(o=e,e.depth=u());else if("}"===e.value){if(o){const t=r();e.groupId=t,e.depth=o.depth,o.groupId=t}else e.error=!0;o=null}else if(e.type===f||e.type===p||e.type===h||e.type===d){const l=e.type===d?Ft(e.value,{xlsx:!0}):It(e.value,{allowTernary:!0,xlsx:!0});if(l&&(l.range||l.columns)){l.source=e.value,function(e,t,n){e.sheetName||(e.sheetName=t),e.workbookName||(e.workbookName=n)}(l,t,n);const o=s.find((e=>function(e,t){if((e.name||t.name)&&e.name!==t.name)return!1;if(e.columns||t.columns){if(e.table!==t.table)return!1;if(!St(e.columns,t.columns))return!1;if(!St(e.sections,t.sections))return!1}return!!(!e.range&&!t.range||_t(e.range.top,t.range.top)&&_t(e.range.bottom,t.range.bottom)&&_t(e.range.left,t.range.left)&&_t(e.range.right,t.range.right))&&!(!Mt(e.workbookName,t.workbookName)||!Mt(e.sheetName,t.sheetName))}(e,l)));o?e.groupId=o.groupId:(l.groupId=r(),e.groupId=l.groupId,s.push(l))}}else e.type===x&&(e.error=!0)})),e},exports.fixRanges=function e(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{addBounds:!1};if("string"==typeof t)return e(Re(t,n),n).map((e=>e.value)).join("");if(!Array.isArray(t))throw new Error("fixRanges expects an array of tokens");const{addBounds:l,r1c1:o,xlsx:r,thisRow:s}=n;if(o)throw new Error("fixRanges does not have an R1C1 mode");let u=0;return t.map((e=>{const t={...e};e.loc&&(t.loc=[...e.loc]);let n=0;if(t.type===d){const e=qt(Ft(t.value,{xlsx:r}),{xlsx:r,thisRow:s});n=e.length-t.value.length,t.value=e}else if(Ne(t)){const e=It(t.value,{xlsx:r,allowTernary:!0}),o=e.range;l&&Ut(o);const s=Ot(e,{xlsx:r});n=s.length-t.value.length,t.value=s}return u||n?(t.loc&&(t.loc[0]+=u),u+=n,t.loc&&(t.loc[1]+=u)):u+=n,t}))},exports.fromCol=L,exports.isError=Ae,exports.isFunction=ke,exports.isFxPrefix=Te,exports.isLiteral=be,exports.isOperator=Le,exports.isRange=Ne,exports.isReference=Ee,exports.isWhitespace=Ce,exports.mergeRefTokens=me,exports.nodeTypes=Qt,exports.parse=function(e,t){if("string"==typeof e)Me=Re(e,{withLocation:!1,...t,mergeRefs:!0});else{if(!Array.isArray(e))throw new Error("Parse requires a string or array of tokens.");Me=e}for(ze=t?.permitArrayRanges,je=t?.permitArrayCalls,Be=t?.looseRefCalls,De=0;Ce(Me[De])||Te(Me[De]);)De++;Ge(),tt(!0);const n=Ye(0);return Ge(Ie),n},exports.parseA1Ref=It,exports.parseR1C1Ref=Zt,exports.parseStructRef=Ft,exports.stringifyA1Ref=Ot,exports.stringifyR1C1Ref=Xt,exports.stringifyStructRef=qt,exports.toCol=$t,exports.tokenTypes=Vt,exports.tokenize=Re,exports.translateToA1=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Yt;const o=Lt(t),r="string"==typeof e,s={...Yt,...n},u=r?Re(e,{withLocation:!1,mergeRefs:s.mergeRefs,xlsx:s.xlsx,allowTernary:s.allowTernary,r1c1:!0}):e;let i=0;const a={xlsx:s.xlsx,allowTernary:s.allowTernary};return u.forEach((e=>{if(Ne(e)){const t=e.value,n=Zt(t,a),r=n.range,u={},c=Gt(r.r0,r.$r0,o.top,T,s.wrapEdges),f=Gt(r.r1,r.$r1,o.top,T,s.wrapEdges);c>f?(u.top=f,u.$top=r.$r1,u.bottom=c,u.$bottom=r.$r0):(u.top=c,u.$top=r.$r0,u.bottom=f,u.$bottom=r.$r1);const p=Gt(r.c0,r.$c0,o.left,k,s.wrapEdges),h=Gt(r.c1,r.$c1,o.left,k,s.wrapEdges);p>h?(u.left=h,u.$left=r.$c1,u.right=p,u.$right=r.$c0):(u.left=p,u.$left=r.$c0,u.right=h,u.$right=r.$c1),r.trim&&(u.trim=r.trim),isNaN(c)||isNaN(f)||isNaN(p)||isNaN(h)?(e.type=l,e.value="#REF!",delete e.groupId):(n.range=u,e.value=Ot(n,a)),e.loc&&(e.loc[0]+=i,i+=e.value.length-t.length,e.loc[1]+=i)}else i&&e.loc&&(e.loc[0]+=i,e.loc[1]+=i)})),r?u.map((e=>e.value)).join(""):u},exports.translateToR1C1=function(e,t){let{xlsx:n=!1,allowTernary:l=!0}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{top:o,left:r}=Lt(t),s="string"==typeof e,u=s?Re(e,{...Wt,xlsx:n,allowTernary:l}):e;let i=0;const a={xlsx:n,allowTernary:l};return u.forEach((e=>{if(Ne(e)){const t=e.value,n=It(t,a),l=n.range,s={};s.r0=Pt(l.$top,l.top,o),s.r1=Pt(l.$bottom,l.bottom,o),s.c0=Pt(l.$left,l.left,r),s.c1=Pt(l.$right,l.right,r),s.$r0=l.$top,s.$r1=l.$bottom,s.$c0=l.$left,s.$c1=l.$right,l.trim&&(s.trim=l.trim),n.range=s,e.value=Xt(n,a),e.loc&&(e.loc[0]+=i,i+=e.value.length-t.length,e.loc[1]+=i)}else i&&e.loc&&(e.loc[0]+=i,e.loc[1]+=i)})),s?u.map((e=>e.value)).join(""):u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
