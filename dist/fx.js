"use strict";const e="operator",t="operator-trim",n="bool",l="error",r="number",o="func",s="newline",u="whitespace",i="string",a="context_quote",c="context",f="range",p="range_beam",h="range_ternary",g="range_named",d="structured",m="fx_prefix",x="unknown",y="UnaryExpression",v="BinaryExpression",$="ReferenceIdentifier",w="Literal",R="ErrorLiteral",N="CallExpression",E="LambdaExpression",b="LetExpression",A="ArrayExpression",C="Identifier",k=16383,T=1048575;function L(e){const t=e||"",n=t.length;let l=0;if(n>2){const e=t.charCodeAt(n-3);l+=676*(1+e-(e>95?32:0)-65)}if(n>1){const e=t.charCodeAt(n-2);l+=26*(1+e-(e>95?32:0)-65)}if(n){const e=t.charCodeAt(n-1);l+=e-(e>95?32:0)-65}return l}const I=/^\[('['#@[\]]|[^'#@[\]])+\]/i,O=/^([^#@[\]:]+)/i,U={headers:1,data:2,totals:4,all:8,"this row":16,"@":16},F=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Object.freeze(t)},_={0:F(),1:F("headers"),2:F("data"),4:F("totals"),8:F("all"),16:F("this row"),3:F("headers","data"),6:F("data","totals")},S=function(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=I.exec(e);if(n){const e=n[0].slice(1,-1).replace(/'(['#@[\]])/g,"$1");return[n[0],e]}return t&&(n=O.exec(e),n)?[n[0],n[0]]:null};function M(e){const t=[];let n,l,r=0,o=e,s=0;if(!(n=/^(\[\s*)/.exec(o)))return null;if(l=/^\[#([a-z ]+)\]/i.exec(o)){const e=l[1].toLowerCase();if(r+=l[0].length,!U[e])return null;s|=U[e]}else if(l=S(o,!1))r+=l[0].length,t.push(l[1]);else{let l=!0;for(o=o.slice(n[1].length),r+=n[1].length;l&&(n=/^\[#([a-z ]+)\](\s*,\s*)?/i.exec(o));){const e=n[1].toLowerCase();if(!U[e])return null;s|=U[e],o=o.slice(n[0].length),r+=n[0].length,l=!!n[2]}if(l&&(n=/^@/.exec(o))&&(s|=U["@"],o=o.slice(1),r+=1,l="]"!==o[0]),!(s in _))return null;const u=l?S(e.slice(r)):null;if(u){if(r+=u[0].length,t.push(u[1]),o=e.slice(r),":"===o[0]){o=o.slice(1),r++;const e=S(o);if(!e)return null;r+=e[0].length,t.push(e[1])}l=!1}for(;" "===e[r];)r++;if(l||"]"!==e[r])return null;r++}const u=_[s];return{columns:t,sections:u?u.concat():u,length:r,token:e.slice(0,r)}}const D=/^(?!!)(\[(?:[^\]])+\])?([0-9A-Za-z._¡¤§¨ª\u00ad¯-\uffff]+)?(?=!)/,z=/^'(?:''|[^'])*('|$)(?=!)/,j="\\$?[A-Z]{1,3}\\$?[1-9][0-9]{0,6}",B="\\$?[A-Z]{1,3}",Z="\\$?[1-9][0-9]{0,6}",X="\\.?:\\.?",P="(?![a-z0-9_\\u00a1-\\uffff])",W=new RegExp(`^${B}${X}${B}${P}`,"i"),G=new RegExp(`^${Z}${X}${Z}${P}`,"i"),Y=new RegExp(`^${j}${P}`,"i"),H=new RegExp(`^((${B}|${Z})${X}${j}|${j}${X}(${B}|${Z}))(?![\\w($.])`,"i"),K="(?:R(?:\\[[+-]?\\d+\\]|[1-9][0-9]{0,6})?)",q="(?:C(?:\\[[+-]?\\d+\\]|[1-9][0-9]{0,4})?)",V=new RegExp(`^${q}(${X}${q})?${P}`,"i"),Q=new RegExp(`^${K}(${X}${K})?${P}`,"i"),J=new RegExp(`^(?:(?=[RC])${K}${q})${P}`,"i"),ee=new RegExp(`^(${K}${q}(${X}${q}|${X}${K})(?![[\\d])|(${K}|${q})(${X}${K}${q}))${P}`,"i"),te=/^[a-zA-Z\\_\u00a1-\uffff][a-zA-Z0-9\\_.?\u00a1-\uffff]{0,254}/i;function ne(e,t){return n=>{const l=t.exec(n);if(l)return{type:e,value:l[0]}}}function le(e){const t=te.exec(e);if(t){const e=t[0].toLowerCase();return"\\"===e[0]&&t[0].length<3||("r"===e||"c"===e)?null:{type:g,value:t[0]}}}const re=/^'(?:[^[\]]+?)?(?:\[(.+?)\])?(?:[^[\]]+?)'$/,oe=/^'\[(.+?)\]'$/;function se(e,t){const n=z.exec(e);if(n){const e=n[0];if(t.xlsx&&oe.test(e)||re.test(e))return{type:a,value:e}}const l=D.exec(e);if(l){const[,e,n]=l;if(e&&n||n||e&&!n&&t.xlsx)return{type:c,value:l[0]}}}function ue(e){const t=M(e);if(t){let n=t.length;for(;" "===e[n];)n++;if("!"!==e[n])return{type:d,value:t.token}}return null}const ie=/([RC])(\[?)(-?\d+)/gi,ae=/(\d+|[a-zA-Z]+)/gi;function ce(e,t){let n,l;if(t.r1c1){if(t.allowTernary&&(n=ee.exec(e))?l={type:h,value:n[0]}:(n=J.exec(e))?l={type:f,value:n[0]}:((n=Q.exec(e))||(n=V.exec(e)))&&(l={type:p,value:n[0]}),l){for(ie.lastIndex=0;null!==(n=ie.exec(l.value));){const e=("R"===n[1]?T:k)+(n[2]?0:1),t=parseInt(n[3],10);if(t>e||t<-e)return null}return l}}else if(t.allowTernary&&(n=H.exec(e))?l={type:h,value:n[0]}:(n=W.exec(e))||(n=G.exec(e))?l={type:p,value:n[0]}:(n=Y.exec(e))&&(l={type:f,value:n[0]}),l){for(ae.lastIndex=0;null!==(n=ae.exec(l.value));)if(/^\d/.test(n[1])){if(parseInt(n[1],10)-1>T)return null}else if(L(n[1])>k)return null;return l}}const fe=[ne(l,/^#(NAME\?|FIELD!|CALC!|VALUE!|REF!|DIV\/0!|NULL!|NUM!|N\/A|GETTING_DATA\b|SPILL!|UNKNOWN!|FIELD\b|CALC\b|SYNTAX\?|ERROR!|CONNECT!|BLOCKED!|EXTERNAL!)/i),ne(t,/^(\.:\.|\.:|:\.)/),ne(e,/^(<=|>=|<>|[-+/*^%&<>=]|[{},;]|[()]|@|:|!|#)/),ne(o,/^[A-Z_]+[A-Z\d_.]*(?=\()/i),ne(n,/^(TRUE|FALSE)\b/i),ne(s,/^\n+/),ne(u,/^[ \f\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/),ne(i,/^"(?:""|[^"])*("|$)/),se,ce,ue,ne(r,/^(?:\d+(\.\d+)?(?:[eE][+-]?\d+)?|\d+)/),le],pe=[function(t,n){if(n.r1c1)return"!"===t[0]?{type:e,value:t[0]}:null;const l=/^(!|\.?:\.?)/.exec(t);return l?{type:e,value:l[1]}:null},se,ce,ue,le],he={};function ge(e,t){if(e.length){const n=e[0];t[n]=t[n]||{},ge(e.slice(1),t[n])}else t.$=!0}[[f,":",f],[f,".:",f],[f,":.",f],[f,".:.",f],[f],[p],[h],[c,"!",f,":",f],[c,"!",f,".:",f],[c,"!",f,":.",f],[c,"!",f,".:.",f],[c,"!",f],[c,"!",p],[c,"!",h],[a,"!",f,":",f],[a,"!",f,".:",f],[a,"!",f,":.",f],[a,"!",f,".:.",f],[a,"!",f],[a,"!",p],[a,"!",h],[g],[c,"!",g],[a,"!",g],[d],[g,d],[c,"!",g,d],[a,"!",g,d]].forEach((e=>ge(e.concat().reverse(),he)));const de=function(t,n,l){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;const o=t[l-r];if(o){const s=o.type===e?o.value:o.type;if(s in n)return de(t,n[s],l,r+1)}return n.$?r:0};function me(e){const t=[];for(let n=e.length-1;n>=0;n--){let l=e[n];const r=de(e,he,n);if(r){const t=e.slice(n-r+1,n+1);l={...l},l.value=t.map((e=>e.value)).join(""),l.loc&&t[0].loc&&(l.loc[0]=t[0].loc[0]),n-=r-1}t.unshift(l)}return t}const xe=(e,t)=>e&&e.type===t,ye={withLocation:!1,mergeRefs:!0,allowTernary:!1,negativeNumbers:!0,r1c1:!1},ve=e=>e.type===g||e.type===o,$e=t=>!xe(t,e)||"%"===t.value||"}"===t.value||")"===t.value||"#"===t.value;function we(n,l){let a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const c=Object.assign({},ye,a),{withLocation:p,mergeRefs:h,negativeNumbers:d}=c,y=[];let v=0,$=0,w=0;const R=[];let N=null,E=null,b=null;const A=e=>{const n=e.type===x,l=b&&b.type===x;b&&(n&&l||n&&ve(b)||l&&ve(e))?(b.value+=e.value,b.type=x,p&&(b.loc[1]=e.loc[1])):(e.type===t&&(R.push(y.length),e.type=x),y.push(e),b=e,e.type!==u&&e.type!==s&&(E=N,N=e))};if("="===n[0]){v++,A({type:m,value:"=",...p?{loc:[0,1]}:{}})}for(;v<n.length;){const t=v,s=n.slice(v);let u="",a="";for(let e=0;e<l.length;e++){const t=l[e](s,c);if(t){u=t.type,a=t.value,v+=a.length;break}}u||(u=x,a=n[v],v++);const f={type:u,value:a,...p?{loc:[t,v]}:{}};if(b&&b.type===o&&"("===a){const e=b.value.toLowerCase();"lambda"!==e&&"let"!==e||$++}if(u===x){const e=a.toLowerCase();w+="r"===e||"c"===e?1:0}if(u===i){const e=a.length;if('""'===a);else if('"'===a||'"'!==a[e-1])f.unterminated=!0;else if('""'!==a&&'"'===a[e-2]){let t=e-1;for(;'"'===a[t];)t--;!(t+1)^(e-t+1)%2==0&&(f.unterminated=!0)}}if(d&&u===r){const t=b;if(t&&xe(t,e)&&"-"===t.value&&(!E||xe(E,m)||!$e(E))){const e=y.pop();f.value="-"+a,p&&(f.loc[0]=e.loc[0]),N=E,b=y[y.length-1]}}A(f)}w&&$&&function(t){let n,l=0,r=0;for(const s of t){if(s.type===e)if("("===s.value){if(r++,n.type===o){const e=n.value.toLowerCase();"lambda"!==e&&"let"!==e||(l=r)}}else")"===s.value&&(r--,r<l&&(l=0));else l&&s.type===x&&/^[rc]$/.test(s.value)&&(s.type=g);n=s}}(y);for(const t of R){const n=y[t-1],l=y[t-1];n&&n.type===f&&l&&l.type===f?y[t].type=e:y[t].type=x}return h?me(y):y}function Re(e){return we(e,fe,arguments.length>1&&void 0!==arguments[1]?arguments[1]:{})}function Ne(e){return!!e&&(e.type===f||e.type===p||e.type===h)}function Ee(e){return!!e&&(e.type===f||e.type===p||e.type===h||e.type===d||e.type===g)}function be(e){return!!e&&(e.type===n||e.type===l||e.type===r||e.type===i)}function Ae(e){return!!e&&e.type===l}function Ce(e){return!!e&&(e.type===u||e.type===s)}function ke(e){return!!e&&e.type===o}function Te(e){return!!e&&e.type===m}function Le(t){return!!t&&t.type===e}const Ie="(END)",Oe="(FUNCTION)",Ue="(WHITESPACE)",Fe=["ANCHORARRAY","CHOOSE","DROP","IF","IFS","INDEX","INDIRECT","LAMBDA","LET","OFFSET","REDUCE","SINGLE","SWITCH","TAKE","TRIMRANGE","XLOOKUP"],_e=e=>Fe.includes(e.toUpperCase()),Se=e=>!!e&&(e.type===$||(e.type===R||e.type===l)&&"#REF!"===e.value||e.type===v&&(":"===e.operator||" "===e.operator||","===e.operator)||Ee(e)||e.type===N&&_e(e.callee.name)),Me={};let De,ze,je,Be=!1,Ze=!1;function Xe(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n=new Error(e);throw n.source=ze.map((e=>e.value)).join(""),n.sourceOffset=ze.slice(0,t??je).reduce(((e,t)=>e+t.value.length),0),n}function Pe(){let e,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=je;do{e=ze[++n]}while(e&&(Ce(e)||Le(e)&&"("===e.value));return function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const n=(e&&e.value)+"";return!(!Ee(e)&&(!t||!Le(e)||":"!==n&&","!==n&&n.trim())&&(!ke(e)||!_e(n))&&(!Ae(e)||"#REF!"!==n))}(e,t)}function We(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(e&&e!==De.id&&Xe(`Expected ${e} but got ${De.id}`),Ce(ze[je])){const e=Se(t),n=e&&Pe(!1),l=e&&ze[je+1]&&"("===ze[je+1].value;if(!n&&!l)for(;Ce(ze[je]);)je++}if(je>=ze.length)return void(De=Me[Ie]);const n=ze[je];let l;return je+=1,n.unterminated&&Xe("Encountered an unterminated token"),Le(n)?(l=Me[n.value],l||Xe(`Unknown operator ${n.value}`)):Ce(n)?l=Me[Ue]:be(n)?l=Me[w]:Ee(n)?l=Me[$]:ke(n)?l=Me[Oe]:Xe(`Unexpected ${n.type} token: ${n.value}`),De=Object.create(l),De.type=n.type,De.value=n.value,n.loc&&(De.loc=[...n.loc]),De}function Ge(e){let t=De;We(null,t);let n=t.nud();for(;e<De.lbp;)t=De,We(null,t),n=t.led(n);return n}const Ye={nud:()=>Xe("Invalid syntax"),led:()=>Xe("Missing operator")};function He(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=Me[e];return n?t>=n.lbp&&(n.lbp=t):(n={...Ye},n.id=e,n.value=e,n.lbp=t,Me[e]=n),n}function Ke(e,t,n){const l=He(e,t);return l.led=n||function(e){this.type=v,this.operator=this.value,delete this.value;const n=Ge(t);return this.arguments=[e,n],this.loc&&(this.loc=[e.loc[0],n.loc[1]]),this},l}function qe(e,t){const n=He(e,0);return n.lbp=70,n.led=t||function(e){return this.type=y,this.operator=this.value,delete this.value,this.arguments=[e],this.loc&&(this.loc[0]=e.loc[0]),this},n}function Ve(e,t){const n=He(e);return n.nud=t||function(){this.type=y,this.operator=this.value,delete this.value;const e=Ge(70);return this.arguments=[e],this.loc&&(this.loc[1]=e.loc[1]),this},n}function Qe(e,t){return Ke(e,t,(function(n){Se(n)||Xe(`Unexpected ${e} operator`);const l=Ge(t);return Se(l)||Xe(`Unexpected ${De.type} following ${this.id}`),this.type=v,this.operator=this.value.trim()?this.value:" ",delete this.value,this.arguments=[n,l],this.loc&&(this.loc=[n.loc[0],l.loc[1]]),this}))}He(Ie),Qe(":",80);const Je=Qe(",",80);Qe(Ue,80);const et=e=>{const t=Je.lbp>0;return null!=e&&(Je.lbp=e?80:0),t};function tt(e){const t=[],n={};let l,r=!1;const o=et(!1);if(")"!==De.id)for(;!r;){Ce(De)&&We();const e=je,o=Ge(0);if(","===De.id){if(o.type===$&&"name"===o.kind){const e=o.value.toLowerCase();e in n&&Xe("Duplicate name: "+o.value),n[e]=1;const l={type:C,name:o.value};o.loc&&(l.loc=o.loc),t.push(l)}else je=e,Xe("LAMBDA argument is not a name");We(",")}else l=o,r=!0}return et(o),delete this.value,this.type=E,this.params=t,this.body=l||null,e.loc&&(this.loc=[e.loc[0],De.loc[1]]),We(")",this),this}function nt(e){const t=[],n=[],l={};let r,o=0;const s=(e,s)=>{if(r&&Xe("Unexpected argument following calculation"),s&&o>=2)r=e;else{if(!(o%2))if(e&&e.type===$&&"name"===e.kind){const n=e.value.toLowerCase();n in l&&Xe("Duplicate name: "+e.value),l[n]=1,t.push({type:C,name:e.value,loc:e.loc})}else o>=2?r=e:Xe("Argument is not a name");else n.push(e)}o++},u=et(!1);let i=!1;if(")"!==De.id){for(;")"!==De.id;)if(Ce(De)&&We(),","===De.id)s(null),i=!0,We();else{s(Ge(0),","!==De.id),i=!1,","===De.id&&(We(","),i=!0)}et(u)}i&&s(null,!0),void 0===r&&Xe("Unexpected end of arguments"),et(u),delete this.value,this.type=b,this.declarations=[],t.length||Xe("Unexpected end of arguments");for(let e=0;e<t.length;e++){const l={type:"LetDeclarator",id:t[e],init:n[e],loc:t[e].loc&&[t[e].loc[0],n[e].loc[1]]};this.declarations.push(l)}return this.body=r,e.loc&&(this.loc=[e.loc[0],De.loc[1]]),We(")",this),this}function lt(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=!1,l="";const r=[],o=()=>{l&&r.push(t?l:{value:l,braced:n}),l=""};for(let t=0;t<e.length;t++){const r=e[t];"["===r?(o(),n=!0):"]"===r?(o(),n=!1):l+=r}return o(),r}function rt(e){return{context:lt(e,!0)}}function ot(e){const t={},n=lt(e);if(n.length>1)t.workbookName=n[n.length-2].value,t.sheetName=n[n.length-1].value;else if(1===n.length){const e=n[0];e.braced?t.workbookName=e.value:t.sheetName=e.value}return t}qe("%"),qe("#",(function(e){return Se(e)||Xe("# expects a reference"),this.type=y,this.operator=this.value,delete this.value,this.arguments=[e],this})),Ve("+"),Ve("-"),Ve("@"),Ke("^",50),Ke("*",40),Ke("/",40),Ke("+",30),Ke("-",30),Ke("&",20),Ke("=",10),Ke("<",10),Ke(">",10),Ke("<=",10),Ke(">=",10),Ke("<>",10),He(w).nud=function(){const{type:e,value:t}=this;if(this.type=w,this.raw=t,e===r)this.value=+t;else if(e===n)this.value="TRUE"===t.toUpperCase();else if(e===l)this.type=R,this.value=t.toUpperCase();else{if(e!==i)throw new Error("Unsupported literal type: "+e);this.value=t.slice(1,-1).replace(/""/g,'"')}return this},He($).nud=function(){return this.type===g?this.kind="name":this.type===d?this.kind="table":this.type===p?this.kind="beam":this.kind="range",this.type=$,this},He(")"),Ve("(",(function(){const e=et(!0),t=Ge(0);return We(")",t),et(e),t})),He(Oe).nud=function(){return this},Ke("(",90,(function(e){let t={type:C,name:e.value};e.id!==Oe&&(e.type===E||e.type===N||e.type===b||e.type===$||e.type===y&&"#"===e.value||e.type===R&&"#REF!"===e.value?t=e:Xe("Unexpected call",je-1));const n=e.value.toLowerCase();if("lambda"===n)return tt.call(this,e);if("let"===n)return nt.call(this,e);const l=[];let r=!1;if(")"!==De.id){const e=et(!1);for(;")"!==De.id;)if(Ce(De)&&We(),","===De.id)l.push(null),r=!0,We();else{const e=Ge(0);l.push(e),r=!1,","===De.id&&(We(","),r=!0)}et(e)}r&&l.push(null);const o=De;return delete this.value,this.type=N,this.callee=t,e.loc&&(this.callee.loc=[...e.loc]),this.arguments=l,e.loc&&(this.loc=[e.loc[0],o.loc[1]]),We(")",this),this})),He("}"),He(";"),Ve("{",(function(){"}"===De.id&&Xe("Unexpected empty array");let e=[],t=!1;const n=[e],l=et(!1);for(;!t;){if(Ce(De)&&We(),be(De))e.push(Me[w].nud.call(De)),We();else if(Be&&Se(De))e.push(Me[$].nud.call(De)),We();else if(Ze&&ke(De)){const t=Ge(0);e.push(t)}else Xe(`Unexpected ${De.type} in array: ${De.value}`);","===De.id?We(","):";"===De.id?(We(";"),e=[],n.push(e)):t=!0}const r=De;return We("}"),et(l),this.type=A,this.elements=n,this.loc&&(this.loc[1]=r.loc[1]),delete this.value,this}));const st=e=>e&&(":"===e.value||".:"===e.value||":."===e.value||".:."===e.value)&&{operator:e.value},ut=e=>e&&e.type===f&&{r0:e.value},it=e=>e&&e.type===h&&{r0:e.value},at=e=>e&&e.type===f&&{r1:e.value},ct=t=>t&&t.type===e&&"!"===t.value&&{},ft=e=>e&&e.type===p&&{r0:e.value},pt=e=>e&&e.type===d&&{struct:e.value},ht=(e,t)=>{const n=t.xlsx?ot:rt;return e&&e.type===c?n(e.value):e&&e.type===a?n(e.value.slice(1,-1).replace(/''/g,"'")):void 0},gt=e=>e&&e.type===g&&{name:e.value},dt=[[it],[ut,st,at],[ut],[ft],[ht,ct,it],[ht,ct,ut,st,at],[ht,ct,ut],[ht,ct,ft]],mt=dt.concat([[gt],[ht,ct,gt],[pt],[gt,pt],[ht,ct,gt,pt]]);function xt(e,t){const n={withLocation:!1,mergeRefs:!1,allowTernary:!1,allowNamed:!0,r1c1:!1,xlsx:!1,...t},l=we(e,pe,n),r=n.xlsx?{workbookName:"",sheetName:"",r0:"",r1:"",name:"",operator:""}:{context:[],r0:"",r1:"",name:"",operator:""};l.length&&l[0].type===m&&l.shift();const o=n.allowNamed?mt:dt;for(let e=0;e<o.length;e++){const t={...r};if(o[e].length===l.length){const r=o[e].every(((e,r)=>{const o=e(l[r],n);return Object.assign(t,o),o}));if(r)return t}}return null}const yt=String.fromCharCode;function vt(e){return(e>=702?yt(((e-702)/676-0)%26+65):"")+(e>=26?yt((e/26-1)%26+65):"")+yt(e%26+65)}const $t=/[^0-9A-Za-z._¡¤§¨ª\u00ad¯-\uffff]/;function wt(e){let t="",n=0,l=0;const r=e.context||[];for(let e=r.length;e>-1;e--){const o=r[e];if(o){t=(l%2?"["+o+"]":o)+t,n+=+$t.test(o),l++}}return n&&(t="'"+t.replace(/'/g,"''")+"'"),t?t+"!":t}function Rt(e){let t="",n=0;const{workbookName:l,sheetName:r}=e;return l&&(t+="["+l+"]",n+=+$t.test(l)),r&&(t+=r,n+=+$t.test(r)),n&&(t="'"+t.replace(/'/g,"''")+"'"),t?t+"!":t}const Nt=(e,t,n)=>Math.min(Math.max(t,e),n),Et=(e,t)=>(t?"$":"")+vt(e),bt=(e,t)=>(t?"$":"")+String(e+1);function At(e){return"both"===e?".:.":"head"===e?".:":"tail"===e?":.":":"}function Ct(e,t){return e&&t?"both":e?"head":t?"tail":void 0}function kt(e){const t=/^(?=.)(\$(?=\D))?([A-Za-z]{0,3})?(\$)?([1-9][0-9]{0,6})?$/.exec(e);return t&&(t[2]||t[4])?[t[4]?(n=t[4],+n-1):null,t[2]?L(t[2]):null,!!t[3],!!t[1]]:null;var n}function Tt(e){let t=null,n=null,l=null,r=null,o=!1,s=!1,u=!1,i=!1;const[a,c,f,p,h]=e.split(/(\.?:\.?)/);if(p||h)return null;const g=Ct(!!c&&"."===c[0],!!c&&"."===c[c.length-1]),d=kt(a),m=f?kt(f):null;if(!d||f&&!m)return null;if(null!=d[0]&&null!=d[1]?[t,n,o,s]=d:null==d[0]&&null!=d[1]?[,n,,s]=d:null!=d[0]&&null==d[1]&&([t,,o]=d),f)null!=m[0]&&null!=m[1]?[l,r,u,i]=m:null==m[0]&&null!=m[1]?[,r,,i]=m:null!=m[0]&&null==m[1]&&([l,,u]=m);else{if(null==t||null==n)return null;l=t,r=n,u=o,i=s}null!=r&&(null==n||null!=n&&r<n)&&([n,r,s,i]=[r,n,i,s]),null!=l&&(null==t||null!=t&&l<t)&&([t,l,o,u]=[l,t,u,o]);const x={top:t,left:n,bottom:l,right:r,$top:o,$left:s,$bottom:u,$right:i};return g&&(x.trim=g),x}function Lt(e){let{allowNamed:t=!0,allowTernary:n=!1,xlsx:l=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r=xt(e,{allowNamed:t,allowTernary:n,xlsx:l,r1c1:!1});if(r&&(r.r0||r.name)){let e=null;return r.r0&&(e=Tt(r.r1?r.r0+r.operator+r.r1:r.r0)),e?l?{workbookName:r.workbookName,sheetName:r.sheetName,range:e}:{context:r.context,range:e}:r.name?l?{workbookName:r.workbookName,sheetName:r.sheetName,name:r.name}:{context:r.context,name:r.name}:null}return null}function It(e){let{xlsx:t=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(t?Rt(e):wt(e))+(e.name?e.name:function(e){let{top:t,left:n,bottom:l,right:r,trim:o}=e;const{$left:s,$right:u,$top:i,$bottom:a}=e,c=null==n,f=null==r,p=null==t,h=null==l;t=Nt(0,0|t,T),n=Nt(0,0|n,k),!c&&!p&&f&&h?(l=t,r=n):(l=Nt(0,0|l,T),r=Nt(0,0|r,k));const g=At(o);return 0===t&&l>=T&&!c&&!f&&(!(s&&!c||u&&!f)||n===r)||p&&h?Et(n,s)+g+Et(r,u):0===n&&r>=k&&!p&&!h&&(!(i&&!p||a&&!h)||t===l)||c&&f?bt(t,i)+g+bt(l,a):c||p||f||!h?c||!p||f||h?c||p||!f||h?!c||p||f||h?r!==n||l!==t||u!==s||a!==i?Et(n,s)+bt(t,i)+g+Et(r,u)+bt(l,a):Et(n,s)+bt(t,i):Et(r,u)+bt(t,i)+g+bt(l,a):Et(n,s)+bt(t,i)+g+bt(l,a):Et(n,s)+bt(l,a)+g+Et(r,u):Et(n,s)+bt(t,i)+g+Et(r,u)}(e.range))}function Ot(e){return null==e.top&&(e.top=0,e.$top=!1),null==e.bottom&&(e.bottom=T,e.$bottom=!1),null==e.left&&(e.left=0,e.$left=!1),null==e.right&&(e.right=k,e.$right=!1),e}function Ut(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{xlsx:!1};const n=xt(e,t);if(n&&n.struct){const e=M(n.struct);if(e&&e.length===n.struct.length)return t.xlsx?{workbookName:n.workbookName,sheetName:n.sheetName,table:n.name,columns:e.columns,sections:e.sections}:{context:n.context,table:n.name,columns:e.columns,sections:e.sections}}return null}function Ft(e,t){return null==e&&null==t||e===t}function _t(e,t){if(Array.isArray(e)!==Array.isArray(t)||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!Ft(e[n],t[n]))return!1;return!0}function St(e,t){return!e&&!t||String(e).toLowerCase()===String(t).toLowerCase()}const Mt=(e,t,n)=>Math.min(Math.max(t,e),n);function Dt(e,t){return t?String(e+1):e?"["+e+"]":""}function zt(e){let t=null,n=null,l=null,r=null;const o=/^R(?:\[([+-]?\d+)\]|(\d+))?/.exec(e);o&&(o[1]?(t=parseInt(o[1],10),l=!1):o[2]?(t=parseInt(o[2],10)-1,l=!0):(t=0,l=!1),e=e.slice(o[0].length));const s=/^C(?:\[([+-]?\d+)\]|(\d+))?/.exec(e);return s&&(s[1]?(n=parseInt(s[1],10),r=!1):s[2]?(n=parseInt(s[2],10)-1,r=!0):(n=0,r=!1),e=e.slice(s[0].length)),!o&&!s||e.length?null:[t,n,l,r]}function jt(e){let t=null;const[n,l,r,o]=e.split(/(\.?:\.?)/);if(o)return null;const s=zt(n),u=Ct(!!l&&"."===l[0],!!l&&"."===l[l.length-1]);if(s){const[e,n,l,o]=s;if(r){const s=zt(r);if(!s)return null;{t={};const[r,u,i,a]=s;null!=e&&null!=r?(t.r0=l===i?Math.min(e,r):e,t.$r0=l,t.r1=l===i?Math.max(e,r):r,t.$r1=i):null!=e&&null==r?(t.r0=e,t.$r0=l,t.r1=null,t.$r1=l):null==e&&null!=r?(t.r0=r,t.$r0=i,t.r1=null,t.$r1=i):null==e&&null==r&&(t.r0=null,t.$r0=!1,t.r1=null,t.$r1=!1),null!=n&&null!=u?(t.c0=o===a?Math.min(n,u):n,t.$c0=o,t.c1=o===a?Math.max(n,u):u,t.$c1=a):null!=n&&null==u?(t.c0=n,t.$c0=o,t.c1=null,t.$c1=o):null==n&&null!=u?(t.c0=u,t.$c0=a,t.c1=null,t.$c1=a):null==n&&null==u&&(t.c0=null,t.$c0=!1,t.c1=null,t.$c1=!1)}}else t=null!=e&&null==n?{r0:e,c0:null,r1:e,c1:null,$r0:l,$c0:!1,$r1:l,$c1:!1}:null==e&&null!=n?{r0:null,c0:n,r1:null,c1:n,$r0:!1,$c0:o,$r1:!1,$c1:o}:{r0:e||0,c0:n||0,r1:e||0,c1:n||0,$r0:l||!1,$c0:o||!1,$r1:l||!1,$c1:o||!1}}return t&&u&&(t.trim=u),t}function Bt(e){let{allowNamed:t=!0,allowTernary:n=!1,xlsx:l=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r=xt(e,{allowNamed:t,allowTernary:n,xlsx:l,r1c1:!0});if(r&&(r.r0||r.name)){const e=r.r1?jt(r.r0+r.operator+r.r1):jt(r.r0);return e?l?{workbookName:r.workbookName,sheetName:r.sheetName,range:e}:{context:r.context,range:e}:r.name?l?{workbookName:r.workbookName,sheetName:r.sheetName,name:r.name}:{context:r.context,name:r.name}:null}return null}function Zt(e){let{xlsx:t=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(t?Rt(e):wt(e))+(e.name?e.name:function(e){let{r0:t,c0:n,r1:l,c1:r}=e;const{$c0:o,$c1:s,$r0:u,$r1:i}=e,a=null==t,c=null==n;let f=null==l,p=null==r;const h=At(e.trim),g=!!e.trim;if(t=Mt(u?0:-1048575,0|t,T),n=Mt(o?0:-16383,0|n,k),!a&&f&&!c&&p?(l=t,f=!1,r=n,p=!1):(l=Mt(i?0:-1048575,0|l,T),r=Mt(s?0:-16383,0|r,k)),0===t&&l>=T&&!c&&!p||a&&f){const e=Dt(n,o),t=Dt(r,s);return"C"+(e!==t||g?e+h+"C"+t:e)}if(0===n&&r>=k&&!a&&!f||c&&p){const e=Dt(t,u),n=Dt(l,i);return"R"+(e!==n||g?e+h+"R"+n:e)}const d=Dt(t,u),m=Dt(l,i),x=Dt(n,o),y=Dt(r,s);return a||f||c||p?(a?"":"R"+d)+(c?"":"C"+x)+h+(f?"":"R"+m)+(p?"":"C"+y):d!==m||x!==y?"R"+d+"C"+x+h+"R"+m+"C"+y:"R"+d+"C"+x}(e.range))}const Xt=(e,t,n)=>null==t?null:e?t:t-n,Pt={withLocation:!1,mergeRefs:!1,allowTernary:!0,r1c1:!1};function Wt(e,t,n,l){let r=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],o=e;if(null!=o&&!t){if(o=n+e,o<0){if(!r)return NaN;o=l+o+1}if(o>l){if(!r)return NaN;o-=l+1}}return o}const Gt={wrapEdges:!0,mergeRefs:!0,allowTernary:!0,xlsx:!1};function Yt(e){return e.replace(/([[\]#'@])/g,"'$1")}function Ht(e){return e[0].toUpperCase()+e.slice(1).toLowerCase()}function Kt(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{xlsx:n,thisRow:l}=t;let r=n?Rt(e):wt(e);e.table&&(r+=e.table);const o=e.columns?.length??0,s=e.sections?.length??0;if(1!==s||o)if(s||1!==o){r+="[";const t=!l&&1===s&&"this row"===e.sections[0].toLowerCase();t?r+="@":s&&(r+=e.sections.map((e=>`[#${Ht(e)}]`)).join(","),o&&(r+=",")),t&&1===e.columns.length&&(u=e.columns[0],/^[a-zA-Z0-9\u00a1-\uffff]+$/.test(u))?r+=Yt(e.columns[0]):o&&(r+=e.columns.slice(0,2).map((e=>`[${Yt(e)}]`)).join(":")),r+="]"}else r+=`[${Yt(e.columns[0])}]`;else r+=`[#${Ht(e.sections[0])}]`;var u;return r}const qt=Object.freeze({OPERATOR:e,BOOLEAN:n,ERROR:l,NUMBER:r,FUNCTION:o,NEWLINE:s,WHITESPACE:u,STRING:i,CONTEXT:c,CONTEXT_QUOTE:a,REF_RANGE:f,REF_BEAM:p,REF_TERNARY:h,REF_NAMED:g,REF_STRUCT:d,FX_PREFIX:m,UNKNOWN:x}),Vt=Object.freeze({UNARY:y,BINARY:v,REFERENCE:$,LITERAL:w,ERROR:R,CALL:N,ARRAY:A,IDENTIFIER:C});exports.MAX_COLS=k,exports.MAX_ROWS=T,exports.addA1RangeBounds=Ot,exports.addTokenMeta=function(e){let{sheetName:t="",workbookName:n=""}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const l=[];let r=null;const o=function(){let e=1;return()=>"fxg"+e++}(),s=[],u=()=>l.length+(r?1:0);return e.forEach(((e,i)=>{if(e.index=i,e.depth=u(),"("===e.value)l.push(e),e.depth=u();else if(")"===e.value){const t=l.pop();if(t){const n=o();e.groupId=n,e.depth=t.depth,t.groupId=n}else e.error=!0}else if("{"===e.value)r?e.error=!0:(r=e,e.depth=u());else if("}"===e.value){if(r){const t=o();e.groupId=t,e.depth=r.depth,r.groupId=t}else e.error=!0;r=null}else if(e.type===f||e.type===p||e.type===h||e.type===d){const l=e.type===d?Ut(e.value,{xlsx:!0}):Lt(e.value,{allowTernary:!0,xlsx:!0});if(l&&(l.range||l.columns)){l.source=e.value,function(e,t,n){e.sheetName||(e.sheetName=t),e.workbookName||(e.workbookName=n)}(l,t,n);const r=s.find((e=>function(e,t){if((e.name||t.name)&&e.name!==t.name)return!1;if(e.columns||t.columns){if(e.table!==t.table)return!1;if(!_t(e.columns,t.columns))return!1;if(!_t(e.sections,t.sections))return!1}return!!(!e.range&&!t.range||Ft(e.range.top,t.range.top)&&Ft(e.range.bottom,t.range.bottom)&&Ft(e.range.left,t.range.left)&&Ft(e.range.right,t.range.right))&&!(!St(e.workbookName,t.workbookName)||!St(e.sheetName,t.sheetName))}(e,l)));r?e.groupId=r.groupId:(l.groupId=o(),e.groupId=l.groupId,s.push(l))}}else e.type===x&&(e.error=!0)})),e},exports.fixRanges=function e(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{addBounds:!1};if("string"==typeof t)return e(Re(t,n),n).map((e=>e.value)).join("");if(!Array.isArray(t))throw new Error("fixRanges expects an array of tokens");const{addBounds:l,r1c1:r,xlsx:o,thisRow:s}=n;if(r)throw new Error("fixRanges does not have an R1C1 mode");let u=0;return t.map((e=>{const t={...e};e.loc&&(t.loc=[...e.loc]);let n=0;if(t.type===d){const e=Kt(Ut(t.value,{xlsx:o}),{xlsx:o,thisRow:s});n=e.length-t.value.length,t.value=e}else if(Ne(t)){const e=Lt(t.value,{xlsx:o,allowTernary:!0}),r=e.range;l&&Ot(r);const s=It(e,{xlsx:o});n=s.length-t.value.length,t.value=s}return u||n?(t.loc&&(t.loc[0]+=u),u+=n,t.loc&&(t.loc[1]+=u)):u+=n,t}))},exports.fromCol=L,exports.isError=Ae,exports.isFunction=ke,exports.isFxPrefix=Te,exports.isLiteral=be,exports.isOperator=Le,exports.isRange=Ne,exports.isReference=Ee,exports.isWhitespace=Ce,exports.mergeRefTokens=me,exports.nodeTypes=Vt,exports.parse=function(e,t){if("string"==typeof e)ze=Re(e,{withLocation:!1,...t,mergeRefs:!0});else{if(!Array.isArray(e))throw new Error("Parse requires a string or array of tokens.");ze=e}for(Be=t?.permitArrayRanges,Ze=t?.permitArrayCalls,je=0;Ce(ze[je])||Te(ze[je]);)je++;We(),et(!0);const n=Ge(0);return We(Ie),n},exports.parseA1Ref=Lt,exports.parseR1C1Ref=Bt,exports.parseStructRef=Ut,exports.stringifyA1Ref=It,exports.stringifyR1C1Ref=Zt,exports.stringifyStructRef=Kt,exports.toCol=vt,exports.tokenTypes=qt,exports.tokenize=Re,exports.translateToA1=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Gt;const r=Tt(t),o="string"==typeof e,s={...Gt,...n},u=o?Re(e,{withLocation:!1,mergeRefs:s.mergeRefs,xlsx:s.xlsx,allowTernary:s.allowTernary,r1c1:!0}):e;let i=0;const a={xlsx:s.xlsx,allowTernary:s.allowTernary};return u.forEach((e=>{if(Ne(e)){const t=e.value,n=Bt(t,a),o=n.range,u={},c=Wt(o.r0,o.$r0,r.top,T,s.wrapEdges),f=Wt(o.r1,o.$r1,r.top,T,s.wrapEdges);c>f?(u.top=f,u.$top=o.$r1,u.bottom=c,u.$bottom=o.$r0):(u.top=c,u.$top=o.$r0,u.bottom=f,u.$bottom=o.$r1);const p=Wt(o.c0,o.$c0,r.left,k,s.wrapEdges),h=Wt(o.c1,o.$c1,r.left,k,s.wrapEdges);p>h?(u.left=h,u.$left=o.$c1,u.right=p,u.$right=o.$c0):(u.left=p,u.$left=o.$c0,u.right=h,u.$right=o.$c1),o.trim&&(u.trim=o.trim),isNaN(c)||isNaN(f)||isNaN(p)||isNaN(h)?(e.type=l,e.value="#REF!",delete e.groupId):(n.range=u,e.value=It(n,a)),e.loc&&(e.loc[0]+=i,i+=e.value.length-t.length,e.loc[1]+=i)}else i&&e.loc&&(e.loc[0]+=i,e.loc[1]+=i)})),o?u.map((e=>e.value)).join(""):u},exports.translateToR1C1=function(e,t){let{xlsx:n=!1,allowTernary:l=!0}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{top:r,left:o}=Tt(t),s="string"==typeof e,u=s?Re(e,{...Pt,xlsx:n,allowTernary:l}):e;let i=0;const a={xlsx:n,allowTernary:l};return u.forEach((e=>{if(Ne(e)){const t=e.value,n=Lt(t,a),l=n.range,s={};s.r0=Xt(l.$top,l.top,r),s.r1=Xt(l.$bottom,l.bottom,r),s.c0=Xt(l.$left,l.left,o),s.c1=Xt(l.$right,l.right,o),s.$r0=l.$top,s.$r1=l.$bottom,s.$c0=l.$left,s.$c1=l.$right,l.trim&&(s.trim=l.trim),n.range=s,e.value=Zt(n,a),e.loc&&(e.loc[0]+=i,i+=e.value.length-t.length,e.loc[1]+=i)}else i&&e.loc&&(e.loc[0]+=i,e.loc[1]+=i)})),s?u.map((e=>e.value)).join(""):u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
