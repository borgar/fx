"use strict";const e="operator",t="operator-trim",n="bool",l="error",r="number",o="func",s="newline",u="whitespace",i="string",a="context_quote",c="context",f="range",p="range_beam",h="range_ternary",g="range_named",d="structured",m="fx_prefix",x="unknown",y="UnaryExpression",v="BinaryExpression",$="ReferenceIdentifier",w="Literal",R="ErrorLiteral",N="CallExpression",E="LambdaExpression",b="LetExpression",A="ArrayExpression",C="Identifier",k=16383,T=1048575;function L(e){const t=e||"",n=t.length;let l=0;if(n>2){const e=t.charCodeAt(n-3);l+=676*(1+e-(e>95?32:0)-65)}if(n>1){const e=t.charCodeAt(n-2);l+=26*(1+e-(e>95?32:0)-65)}if(n){const e=t.charCodeAt(n-1);l+=e-(e>95?32:0)-65}return l}const I=/^\[('['#@[\]]|[^'#@[\]])+\]/i,O=/^([^#@[\]:]+)/i,U={headers:1,data:2,totals:4,all:8,"this row":16,"@":16},F=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Object.freeze(t)},_={0:F(),1:F("headers"),2:F("data"),4:F("totals"),8:F("all"),16:F("this row"),3:F("headers","data"),6:F("data","totals")},S=function(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=I.exec(e);if(n){const e=n[0].slice(1,-1).replace(/'(['#@[\]])/g,"$1");return[n[0],e]}return t&&(n=O.exec(e),n)?[n[0],n[0]]:null};function M(e){const t=[];let n,l,r=0,o=e,s=0;if(!(n=/^(\[\s*)/.exec(o)))return null;if(l=/^\[#([a-z ]+)\]/i.exec(o)){const e=l[1].toLowerCase();if(r+=l[0].length,!U[e])return null;s|=U[e]}else if(l=S(o,!1))r+=l[0].length,t.push(l[1]);else{let l=!0;for(o=o.slice(n[1].length),r+=n[1].length;l&&(n=/^\[#([a-z ]+)\](\s*,\s*)?/i.exec(o));){const e=n[1].toLowerCase();if(!U[e])return null;s|=U[e],o=o.slice(n[0].length),r+=n[0].length,l=!!n[2]}if(l&&(n=/^@/.exec(o))&&(s|=U["@"],o=o.slice(1),r+=1,l="]"!==o[0]),!(s in _))return null;const u=l?S(e.slice(r)):null;if(u){if(r+=u[0].length,t.push(u[1]),o=e.slice(r),":"===o[0]){o=o.slice(1),r++;const e=S(o);if(!e)return null;r+=e[0].length,t.push(e[1])}l=!1}for(;" "===e[r];)r++;if(l||"]"!==e[r])return null;r++}const u=_[s];return{columns:t,sections:u?u.concat():u,length:r,token:e.slice(0,r)}}const D=/^(?!!)(\[(?:[^\]])+\])?([0-9A-Za-z._¡¤§¨ª\u00ad¯-\uffff]+)?(?=!)/,z=/^'(?:''|[^'])*('|$)(?=!)/,j="\\$?[A-Z]{1,3}\\$?[1-9][0-9]{0,6}",B="\\$?[A-Z]{1,3}",Z="\\$?[1-9][0-9]{0,6}",X="\\.?:\\.?",P="(?![a-z0-9_\\u00a1-\\uffff])",W=new RegExp(`^${B}${X}${B}${P}`,"i"),G=new RegExp(`^${Z}${X}${Z}${P}`,"i"),Y=new RegExp(`^${j}${P}`,"i"),H=new RegExp(`^((${B}|${Z})${X}${j}|${j}${X}(${B}|${Z}))(?![\\w($.])`,"i"),K="(?:R(?:\\[[+-]?\\d+\\]|[1-9][0-9]{0,6})?)",q="(?:C(?:\\[[+-]?\\d+\\]|[1-9][0-9]{0,4})?)",V=new RegExp(`^${q}(${X}${q})?${P}`,"i"),Q=new RegExp(`^${K}(${X}${K})?${P}`,"i"),J=new RegExp(`^(?:(?=[RC])${K}${q})${P}`,"i"),ee=new RegExp(`^(${K}${q}(${X}${q}|${X}${K})(?![[\\d])|(${K}|${q})(${X}${K}${q}))${P}`,"i"),te=/^[a-zA-Z\\_\u00a1-\uffff][a-zA-Z0-9\\_.?\u00a1-\uffff]{0,254}/i;function ne(e,t){return n=>{const l=t.exec(n);if(l)return{type:e,value:l[0]}}}function le(e){const t=te.exec(e);if(t){const e=t[0].toLowerCase();return"\\"===e[0]&&t[0].length<3||("r"===e||"c"===e)?null:{type:g,value:t[0]}}}const re=/^'(?:[^[\]]+?)?(?:\[(.+?)\])?(?:[^[\]]+?)'$/,oe=/^'\[(.+?)\]'$/;function se(e,t){const n=z.exec(e);if(n){const e=n[0];if(t.xlsx&&oe.test(e)||re.test(e))return{type:a,value:e}}const l=D.exec(e);if(l){const[,e,n]=l;if(e&&n||n||e&&!n&&t.xlsx)return{type:c,value:l[0]}}}function ue(e){const t=M(e);if(t){let n=t.length;for(;" "===e[n];)n++;if("!"!==e[n])return{type:d,value:t.token}}return null}const ie=/([RC])(\[?)(-?\d+)/gi,ae=/(\d+|[a-zA-Z]+)/gi;function ce(e,t){let n,l;if(t.r1c1){if(t.allowTernary&&(n=ee.exec(e))?l={type:h,value:n[0]}:(n=J.exec(e))?l={type:f,value:n[0]}:((n=Q.exec(e))||(n=V.exec(e)))&&(l={type:p,value:n[0]}),l){for(ie.lastIndex=0;null!==(n=ie.exec(l.value));){const e=("R"===n[1]?T:k)+(n[2]?0:1),t=parseInt(n[3],10);if(t>e||t<-e)return null}return l}}else if(t.allowTernary&&(n=H.exec(e))?l={type:h,value:n[0]}:(n=W.exec(e))||(n=G.exec(e))?l={type:p,value:n[0]}:(n=Y.exec(e))&&(l={type:f,value:n[0]}),l){for(ae.lastIndex=0;null!==(n=ae.exec(l.value));)if(/^\d/.test(n[1])){if(parseInt(n[1],10)-1>T)return null}else if(L(n[1])>k)return null;return l}}const fe=[ne(l,/^#(NAME\?|FIELD!|CALC!|VALUE!|REF!|DIV\/0!|NULL!|NUM!|N\/A|GETTING_DATA\b|SPILL!|UNKNOWN!|FIELD\b|CALC\b|SYNTAX\?|ERROR!|CONNECT!|BLOCKED!|EXTERNAL!)/i),ne(t,/^(\.:\.|\.:|:\.)/),ne(e,/^(<=|>=|<>|[-+/*^%&<>=]|[{},;]|[()]|@|:|!|#)/),ne(o,/^[A-Z_]+[A-Z\d_.]*(?=\()/i),ne(n,/^(TRUE|FALSE)\b/i),ne(s,/^\n+/),ne(u,/^[ \f\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/),ne(i,/^"(?:""|[^"])*("|$)/),se,ce,ue,ne(r,/^(?:\d+(\.\d+)?(?:[eE][+-]?\d+)?|\d+)/),le],pe=[function(t,n){if(n.r1c1)return"!"===t[0]?{type:e,value:t[0]}:null;const l=/^(!|\.?:\.?)/.exec(t);return l?{type:e,value:l[1]}:null},se,ce,ue,le],he={};function ge(e,t){if(e.length){const n=e[0];t[n]=t[n]||{},ge(e.slice(1),t[n])}else t.$=!0}[[f,":",f],[f,".:",f],[f,":.",f],[f,".:.",f],[f],[p],[h],[c,"!",f,":",f],[c,"!",f,".:",f],[c,"!",f,":.",f],[c,"!",f,".:.",f],[c,"!",f],[c,"!",p],[c,"!",h],[a,"!",f,":",f],[a,"!",f,".:",f],[a,"!",f,":.",f],[a,"!",f,".:.",f],[a,"!",f],[a,"!",p],[a,"!",h],[g],[c,"!",g],[a,"!",g],[d],[g,d],[c,"!",g,d],[a,"!",g,d]].forEach((e=>ge(e.concat().reverse(),he)));const de=function(t,n,l){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;const o=t[l-r];if(o){const s=o.type===e?o.value:o.type;if(s in n)return de(t,n[s],l,r+1)}return n.$?r:0};function me(e){const t=[];for(let n=e.length-1;n>=0;n--){let l=e[n];const r=de(e,he,n);if(r){const t=e.slice(n-r+1,n+1);l={...l},l.value=t.map((e=>e.value)).join(""),l.loc&&t[0].loc&&(l.loc[0]=t[0].loc[0]),n-=r-1}t.unshift(l)}return t}const xe=(e,t)=>e&&e.type===t,ye={withLocation:!1,mergeRefs:!0,allowTernary:!1,negativeNumbers:!0,r1c1:!1},ve=e=>e.type===g||e.type===o,$e=t=>!xe(t,e)||"%"===t.value||"}"===t.value||")"===t.value||"#"===t.value;function we(n,l){let a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const c=Object.assign({},ye,a),{withLocation:p,mergeRefs:h,negativeNumbers:d}=c,y=[];let v=0,$=0,w=0;const R=[];let N=null,E=null,b=null;const A=e=>{const n=e.type===x,l=b&&b.type===x;b&&(n&&l||n&&ve(b)||l&&ve(e))?(b.value+=e.value,b.type=x,p&&(b.loc[1]=e.loc[1])):(e.type===t&&(R.push(y.length),e.type=x),y.push(e),b=e,e.type!==u&&e.type!==s&&(E=N,N=e))};if("="===n[0]){v++,A({type:m,value:"=",...p?{loc:[0,1]}:{}})}for(;v<n.length;){const t=v,s=n.slice(v);let u="",a="";for(let e=0;e<l.length;e++){const t=l[e](s,c);if(t){u=t.type,a=t.value,v+=a.length;break}}u||(u=x,a=n[v],v++);const f={type:u,value:a,...p?{loc:[t,v]}:{}};if(b&&b.type===o&&"("===a){const e=b.value.toLowerCase();"lambda"!==e&&"let"!==e||$++}if(u===x){const e=a.toLowerCase();w+="r"===e||"c"===e?1:0}if(u===i){const e=a.length;if('""'===a);else if('"'===a||'"'!==a[e-1])f.unterminated=!0;else if('""'!==a&&'"'===a[e-2]){let t=e-1;for(;'"'===a[t];)t--;!(t+1)^(e-t+1)%2==0&&(f.unterminated=!0)}}if(d&&u===r){const t=b;if(t&&xe(t,e)&&"-"===t.value&&(!E||xe(E,m)||!$e(E))){const e=y.pop();f.value="-"+a,p&&(f.loc[0]=e.loc[0]),N=E,b=y[y.length-1]}}A(f)}w&&$&&function(t){let n,l=0,r=0;for(const s of t){if(s.type===e)if("("===s.value){if(r++,n.type===o){const e=n.value.toLowerCase();"lambda"!==e&&"let"!==e||(l=r)}}else")"===s.value&&(r--,r<l&&(l=0));else l&&s.type===x&&/^[rc]$/.test(s.value)&&(s.type=g);n=s}}(y);for(const t of R){const n=y[t-1],l=y[t-1];n&&n.type===f&&l&&l.type===f?y[t].type=e:y[t].type=x}return h?me(y):y}function Re(e){return we(e,fe,arguments.length>1&&void 0!==arguments[1]?arguments[1]:{})}function Ne(e){return!!e&&(e.type===f||e.type===p||e.type===h)}function Ee(e){return!!e&&(e.type===f||e.type===p||e.type===h||e.type===d||e.type===g)}function be(e){return!!e&&(e.type===n||e.type===l||e.type===r||e.type===i)}function Ae(e){return!!e&&e.type===l}function Ce(e){return!!e&&(e.type===u||e.type===s)}function ke(e){return!!e&&e.type===o}function Te(e){return!!e&&e.type===m}function Le(t){return!!t&&t.type===e}const Ie="(END)",Oe="(FUNCTION)",Ue="(WHITESPACE)",Fe=["ANCHORARRAY","CHOOSE","DROP","IF","IFS","INDEX","INDIRECT","LAMBDA","LET","OFFSET","REDUCE","SINGLE","SWITCH","TAKE","TRIMRANGE","XLOOKUP"],_e=e=>Fe.includes(e.toUpperCase()),Se=e=>!!e&&(e.type===$||(e.type===R||e.type===l)&&"#REF!"===e.value||e.type===v&&(":"===e.operator||" "===e.operator||","===e.operator)||Ee(e)||e.type===N&&_e(e.callee.name)),Me={};let De,ze,je,Be=!1,Ze=!1;function Xe(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n=new Error(e);throw n.source=ze.map((e=>e.value)).join(""),n.sourceOffset=ze.slice(0,t??je).reduce(((e,t)=>e+t.value.length),0),n}function Pe(){let e,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=je;do{e=ze[++n]}while(e&&(Ce(e)||Le(e)&&"("===e.value));return function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const n=(e&&e.value)+"";return!(!Ee(e)&&(!t||!Le(e)||":"!==n&&","!==n&&n.trim())&&(!ke(e)||!_e(n))&&(!Ae(e)||"#REF!"!==n))}(e,t)}function We(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(e&&e!==De.id&&Xe(`Expected ${e} but got ${De.id}`),Ce(ze[je])){const e=Se(t),n=e&&Pe(!1),l=e&&ze[je+1]&&"("===ze[je+1].value;if(!n&&!l)for(;Ce(ze[je]);)je++}if(je>=ze.length)return void(De=Me[Ie]);const n=ze[je];let l;return je+=1,n.unterminated&&Xe("Encountered an unterminated token"),Le(n)?(l=Me[n.value],l||Xe(`Unknown operator ${n.value}`)):Ce(n)?l=Me[Ue]:be(n)?l=Me[w]:Ee(n)?l=Me[$]:ke(n)?l=Me[Oe]:Xe(`Unexpected ${n.type} token: ${n.value}`),De=Object.create(l),De.type=n.type,De.value=n.value,n.loc&&(De.loc=[...n.loc]),De}function Ge(e){let t=De;We(null,t);let n=t.nud();for(;e<De.lbp;)t=De,We(null,t),n=t.led(n);return n}const Ye={nud:()=>Xe("Invalid syntax"),led:()=>Xe("Missing operator")};function He(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=Me[e];return n?t>=n.lbp&&(n.lbp=t):(n={...Ye},n.id=e,n.value=e,n.lbp=t,Me[e]=n),n}function Ke(e,t,n){const l=He(e,t);return l.led=n||function(e){this.type=v,this.operator=this.value,delete this.value;const n=Ge(t);return this.arguments=[e,n],this.loc&&(this.loc=[e.loc[0],n.loc[1]]),this},l}function qe(e,t){const n=He(e,0);return n.lbp=70,n.led=t||function(e){return this.type=y,this.operator=this.value,delete this.value,this.arguments=[e],this.loc&&(this.loc[0]=e.loc[0]),this},n}function Ve(e,t){const n=He(e);return n.nud=t||function(){this.type=y,this.operator=this.value,delete this.value;const e=Ge(70);return this.arguments=[e],this.loc&&(this.loc[1]=e.loc[1]),this},n}function Qe(e,t){return Ke(e,t,(function(n){Se(n)||Xe(`Unexpected ${e} operator`);const l=Ge(t);return Se(l)||Xe(`Unexpected ${De.type} following ${this.id}`),this.type=v,this.operator=this.value.trim()?this.value:" ",delete this.value,this.arguments=[n,l],this.loc&&(this.loc=[n.loc[0],l.loc[1]]),this}))}He(Ie),Qe(":",80);const Je=Qe(",",80);Qe(Ue,80);const et=e=>{const t=Je.lbp>0;return null!=e&&(Je.lbp=e?80:0),t};function tt(e){const t=[],n={};let l,r=!1;const o=et(!1);if(")"!==De.id)for(;!r;){Ce(De)&&We();const e=je,o=Ge(0);if(","===De.id){if(o.type===$&&"name"===o.kind){const e=o.value.toLowerCase();e in n&&Xe("Duplicate name: "+o.value),n[e]=1;const l={type:C,name:o.value};o.loc&&(l.loc=o.loc),t.push(l)}else je=e,Xe("LAMBDA argument is not a name");We(",")}else l=o,r=!0}return et(o),delete this.value,this.type=E,this.params=t,this.body=l||null,e.loc&&(this.loc=[e.loc[0],De.loc[1]]),We(")",this),this}function nt(e){const t=[],n=[],l={};let r,o=0;const s=(e,s)=>{if(r&&Xe("Unexpected argument following calculation"),s&&o>=2)r=e;else{if(!(o%2))if(e&&e.type===$&&"name"===e.kind){const n=e.value.toLowerCase();n in l&&Xe("Duplicate name: "+e.value),l[n]=1,t.push({type:C,name:e.value,loc:e.loc})}else o>=2?r=e:Xe("Argument is not a name");else n.push(e)}o++},u=et(!1);let i=!1;if(")"!==De.id){for(;")"!==De.id;)if(Ce(De)&&We(),","===De.id)s(null),i=!0,We();else{s(Ge(0),","!==De.id),i=!1,","===De.id&&(We(","),i=!0)}et(u)}i&&s(null,!0),void 0===r&&Xe("Unexpected end of arguments"),et(u),delete this.value,this.type=b,this.declarations=[],t.length||Xe("Unexpected end of arguments");for(let e=0;e<t.length;e++){const l={type:"LetDeclarator",id:t[e],init:n[e],loc:t[e].loc&&[t[e].loc[0],n[e].loc[1]]};this.declarations.push(l)}return this.body=r,e.loc&&(this.loc=[e.loc[0],De.loc[1]]),We(")",this),this}function lt(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=!1,l="";const r=[],o=()=>{l&&r.push(t?l:{value:l,braced:n}),l=""};for(let t=0;t<e.length;t++){const r=e[t];"["===r?(o(),n=!0):"]"===r?(o(),n=!1):l+=r}return o(),r}function rt(e){return{context:lt(e,!0)}}function ot(e){const t={},n=lt(e);if(n.length>1)t.workbookName=n[n.length-2].value,t.sheetName=n[n.length-1].value;else if(1===n.length){const e=n[0];e.braced?t.workbookName=e.value:t.sheetName=e.value}return t}qe("%"),qe("#",(function(e){return Se(e)||Xe("# expects a reference"),this.type=y,this.operator=this.value,delete this.value,this.arguments=[e],this})),Ve("+"),Ve("-"),Ve("@"),Ke("^",50),Ke("*",40),Ke("/",40),Ke("+",30),Ke("-",30),Ke("&",20),Ke("=",10),Ke("<",10),Ke(">",10),Ke("<=",10),Ke(">=",10),Ke("<>",10),He(w).nud=function(){const{type:e,value:t}=this;if(this.type=w,this.raw=t,e===r)this.value=+t;else if(e===n)this.value="TRUE"===t.toUpperCase();else if(e===l)this.type=R,this.value=t.toUpperCase();else{if(e!==i)throw new Error("Unsupported literal type: "+e);this.value=t.slice(1,-1).replace(/""/g,'"')}return this},He($).nud=function(){return this.type===g?this.kind="name":this.type===d?this.kind="table":this.type===p?this.kind="beam":this.kind="range",this.type=$,this},He(")"),Ve("(",(function(){const e=et(!0),t=Ge(0);return We(")",t),et(e),t})),He(Oe).nud=function(){return this},Ke("(",90,(function(e){let t={type:C,name:e.value};e.id!==Oe&&(e.type===E||e.type===N||e.type===b||e.type===$||e.type===y&&"#"===e.value||e.type===R&&"#REF!"===e.value?t=e:Xe("Unexpected call",je-1));const n=e.value.toLowerCase();if("lambda"===n)return tt.call(this,e);if("let"===n)return nt.call(this,e);const l=[];let r=!1;if(")"!==De.id){const e=et(!1);for(;")"!==De.id;)if(Ce(De)&&We(),","===De.id)l.push(null),r=!0,We();else{const e=Ge(0);l.push(e),r=!1,","===De.id&&(We(","),r=!0)}et(e)}r&&l.push(null);const o=De;return delete this.value,this.type=N,this.callee=t,e.loc&&(this.callee.loc=[...e.loc]),this.arguments=l,e.loc&&(this.loc=[e.loc[0],o.loc[1]]),We(")",this),this})),He("}"),He(";"),Ve("{",(function(){"}"===De.id&&Xe("Unexpected empty array");let e=[],t=!1;const n=[e],l=et(!1);for(;!t;){if(Ce(De)&&We(),be(De))e.push(Me[w].nud.call(De)),We();else if(Be&&Se(De))e.push(Me[$].nud.call(De)),We();else if(Ze&&ke(De)){const t=Ge(0);e.push(t)}else Xe(`Unexpected ${De.type} in array: ${De.value}`);","===De.id?We(","):";"===De.id?(We(";"),e=[],n.push(e)):t=!0}const r=De;return We("}"),et(l),this.type=A,this.elements=n,this.loc&&(this.loc[1]=r.loc[1]),delete this.value,this}));const st=e=>e&&(":"===e.value||".:"===e.value||":."===e.value||".:."===e.value)&&{operator:e.value},ut=e=>e&&e.type===f&&{r0:e.value},it=e=>e&&e.type===h&&{r0:e.value},at=e=>e&&e.type===f&&{r1:e.value},ct=t=>t&&t.type===e&&"!"===t.value&&{},ft=e=>e&&e.type===p&&{r0:e.value},pt=e=>e&&e.type===d&&{struct:e.value},ht=(e,t)=>{const n=t.xlsx?ot:rt;return e&&e.type===c?n(e.value):e&&e.type===a?n(e.value.slice(1,-1).replace(/''/g,"'")):void 0},gt=e=>e&&e.type===g&&{name:e.value},dt=[[it],[ut,st,at],[ut],[ft],[ht,ct,it],[ht,ct,ut,st,at],[ht,ct,ut],[ht,ct,ft]],mt=dt.concat([[gt],[ht,ct,gt],[pt],[gt,pt],[ht,ct,gt,pt]]);function xt(e,t){const n={withLocation:!1,mergeRefs:!1,allowTernary:!1,allowNamed:!0,r1c1:!1,xlsx:!1,...t},l=we(e,pe,n),r=n.xlsx?{workbookName:"",sheetName:"",r0:"",r1:"",name:"",operator:""}:{context:[],r0:"",r1:"",name:"",operator:""};l.length&&l[0].type===m&&l.shift();const o=n.allowNamed?mt:dt;for(let e=0;e<o.length;e++){const t={...r};if(o[e].length===l.length){const r=o[e].every(((e,r)=>{const o=e(l[r],n);return Object.assign(t,o),o}));if(r)return t}}return null}const yt=String.fromCharCode;function vt(e){return(e>=702?yt(((e-702)/676-0)%26+65):"")+(e>=26?yt((e/26-1)%26+65):"")+yt(e%26+65)}const $t=/[^0-9A-Za-z._¡¤§¨ª\u00ad¯-\uffff]/;function wt(e){let t="",n=0,l=0;const r=e.context||[];for(let e=r.length;e>-1;e--){const o=r[e];if(o){t=(l%2?"["+o+"]":o)+t,n+=+$t.test(o),l++}}return n&&(t="'"+t.replace(/'/g,"''")+"'"),t?t+"!":t}function Rt(e){let t="",n=0;const{workbookName:l,sheetName:r}=e;return l&&(t+="["+l+"]",n+=+$t.test(l)),r&&(t+=r,n+=+$t.test(r)),n&&(t="'"+t.replace(/'/g,"''")+"'"),t?t+"!":t}const Nt=(e,t,n)=>Math.min(Math.max(t,e),n),Et=(e,t)=>(t?"$":"")+vt(e),bt=(e,t)=>(t?"$":"")+String(e+1);function At(e){return"both"===e?".:.":"head"===e?".:":"tail"===e?":.":":"}function Ct(e,t){return e&&t?"both":e?"head":t?"tail":void 0}function kt(e){const t=/^(?=.)(\$(?=\D))?([A-Za-z]{0,3})?(\$)?([1-9][0-9]{0,6})?$/.exec(e);return t&&(t[2]||t[4])?[t[4]?(n=t[4],+n-1):null,t[2]?L(t[2]):null,!!t[3],!!t[1]]:null;var n}function Tt(e){let t=null,n=null,l=null,r=null,o=!1,s=!1,u=!1,i=!1;const[a,c,f,p,h]=e.split(/(\.?:\.?)/);if(p||h)return null;const g=Ct(!!c&&"."===c[0],!!c&&"."===c[c.length-1]),d=kt(a),m=f?kt(f):null;if(!d||f&&!m)return null;if(null!=d[0]&&null!=d[1]?[t,n,o,s]=d:null==d[0]&&null!=d[1]?[,n,,s]=d:null!=d[0]&&null==d[1]&&([t,,o]=d),f)null!=m[0]&&null!=m[1]?[l,r,u,i]=m:null==m[0]&&null!=m[1]?[,r,,i]=m:null!=m[0]&&null==m[1]&&([l,,u]=m);else{if(null==t||null==n)return null;l=t,r=n,u=o,i=s}null!=r&&(null==n||null!=n&&r<n)&&([n,r,s,i]=[r,n,i,s]),null!=l&&(null==t||null!=t&&l<t)&&([t,l,o,u]=[l,t,u,o]);const x={top:t,left:n,bottom:l,right:r,$top:o,$left:s,$bottom:u,$right:i};return g&&(x.trim=g),x}function Lt(e){let{allowNamed:t=!0,allowTernary:n=!1,xlsx:l=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r=xt(e,{allowNamed:t,allowTernary:n,xlsx:l,r1c1:!1});if(r&&(r.r0||r.name)){let e=null;return r.r0&&(e=Tt(r.r1?r.r0+r.operator+r.r1:r.r0)),e?l?{workbookName:r.workbookName,sheetName:r.sheetName,range:e}:{context:r.context,range:e}:r.name?l?{workbookName:r.workbookName,sheetName:r.sheetName,name:r.name}:{context:r.context,name:r.name}:null}return null}function It(e){let{xlsx:t=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(t?Rt(e):wt(e))+(e.name?e.name:function(e){let{top:t,left:n,bottom:l,right:r,trim:o}=e;const{$left:s,$right:u,$top:i,$bottom:a}=e,c=null==n,f=null==r,p=null==t,h=null==l;t=Nt(0,0|t,T),n=Nt(0,0|n,k),!c&&!p&&f&&h?(l=t,r=n):(l=Nt(0,0|l,T),r=Nt(0,0|r,k));const g=At(o);return 0===t&&l>=T&&!c&&!f&&(!(s&&!c||u&&!f)||n===r)||p&&h?Et(n,s)+g+Et(r,u):0===n&&r>=k&&!p&&!h&&(!(i&&!p||a&&!h)||t===l)||c&&f?bt(t,i)+g+bt(l,a):c||p||f||!h?c||!p||f||h?c||p||!f||h?!c||p||f||h?r!==n||l!==t||u!==s||a!==i?Et(n,s)+bt(t,i)+g+Et(r,u)+bt(l,a):Et(n,s)+bt(t,i):Et(r,u)+bt(t,i)+g+bt(l,a):Et(n,s)+bt(t,i)+g+bt(l,a):Et(n,s)+bt(l,a)+g+Et(r,u):Et(n,s)+bt(t,i)+g+Et(r,u)}(e.range))}function Ot(e){return null==e.top&&(e.top=0,e.$top=!1),null==e.bottom&&(e.bottom=T,e.$bottom=!1),null==e.left&&(e.left=0,e.$left=!1),null==e.right&&(e.right=k,e.$right=!1),e}function Ut(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{xlsx:!1};const n=xt(e,t);if(n&&n.struct){const e=M(n.struct);if(e&&e.length===n.struct.length)return t.xlsx?{workbookName:n.workbookName,sheetName:n.sheetName,table:n.name,columns:e.columns,sections:e.sections}:{context:n.context,table:n.name,columns:e.columns,sections:e.sections}}return null}function Ft(e,t){return null==e&&null==t||e===t}function _t(e,t){if(Array.isArray(e)!==Array.isArray(t)||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!Ft(e[n],t[n]))return!1;return!0}function St(e,t){return!e&&!t||String(e).toLowerCase()===String(t).toLowerCase()}const Mt=(e,t,n)=>Math.min(Math.max(t,e),n);function Dt(e,t){return t?String(e+1):e?"["+e+"]":""}function zt(e){let t=null,n=null,l=null,r=null;const o=/^R(?:\[([+-]?\d+)\]|(\d+))?/.exec(e);o&&(o[1]?(t=parseInt(o[1],10),l=!1):o[2]?(t=parseInt(o[2],10)-1,l=!0):(t=0,l=!1),e=e.slice(o[0].length));const s=/^C(?:\[([+-]?\d+)\]|(\d+))?/.exec(e);return s&&(s[1]?(n=parseInt(s[1],10),r=!1):s[2]?(n=parseInt(s[2],10)-1,r=!0):(n=0,r=!1),e=e.slice(s[0].length)),!o&&!s||e.length?null:[t,n,l,r]}function jt(e){let t=null;const[n,l,r,o]=e.split(/(\.?:\.?)/);if(o)return null;const s=zt(n),u=Ct(!!l&&"."===l[0],!!l&&"."===l[l.length-1]);if(s){const[e,n,l,o]=s;if(r){const s=zt(r);if(!s)return null;{t={};const[r,u,i,a]=s;null!=e&&null!=r?(t.r0=l===i?Math.min(e,r):e,t.$r0=l,t.r1=l===i?Math.max(e,r):r,t.$r1=i):null!=e&&null==r?(t.r0=e,t.$r0=l,t.r1=null,t.$r1=l):null==e&&null!=r?(t.r0=r,t.$r0=i,t.r1=null,t.$r1=i):null==e&&null==r&&(t.r0=null,t.$r0=!1,t.r1=null,t.$r1=!1),null!=n&&null!=u?(t.c0=o===a?Math.min(n,u):n,t.$c0=o,t.c1=o===a?Math.max(n,u):u,t.$c1=a):null!=n&&null==u?(t.c0=n,t.$c0=o,t.c1=null,t.$c1=o):null==n&&null!=u?(t.c0=u,t.$c0=a,t.c1=null,t.$c1=a):null==n&&null==u&&(t.c0=null,t.$c0=!1,t.c1=null,t.$c1=!1)}}else t=null!=e&&null==n?{r0:e,c0:null,r1:e,c1:null,$r0:l,$c0:!1,$r1:l,$c1:!1}:null==e&&null!=n?{r0:null,c0:n,r1:null,c1:n,$r0:!1,$c0:o,$r1:!1,$c1:o}:{r0:e||0,c0:n||0,r1:e||0,c1:n||0,$r0:l||!1,$c0:o||!1,$r1:l||!1,$c1:o||!1}}return t&&u&&(t.trim=u),t}function Bt(e){let{allowNamed:t=!0,allowTernary:n=!1,xlsx:l=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r=xt(e,{allowNamed:t,allowTernary:n,xlsx:l,r1c1:!0});if(r&&(r.r0||r.name)){const e=r.r1?jt(r.r0+r.operator+r.r1):jt(r.r0);return e?l?{workbookName:r.workbookName,sheetName:r.sheetName,range:e}:{context:r.context,range:e}:r.name?l?{workbookName:r.workbookName,sheetName:r.sheetName,name:r.name}:{context:r.context,name:r.name}:null}return null}function Zt(e){let{xlsx:t=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(t?Rt(e):wt(e))+(e.name?e.name:function(e){let{r0:t,c0:n,r1:l,c1:r}=e;const{$c0:o,$c1:s,$r0:u,$r1:i}=e,a=null==t,c=null==n;let f=null==l,p=null==r;const h=At(e.trim),g=!!e.trim;if(t=Mt(u?0:-1048575,0|t,T),n=Mt(o?0:-16383,0|n,k),!a&&f&&!c&&p?(l=t,f=!1,r=n,p=!1):(l=Mt(i?0:-1048575,0|l,T),r=Mt(s?0:-16383,0|r,k)),0===t&&l>=T&&!c&&!p||a&&f){const e=Dt(n,o),t=Dt(r,s);return"C"+(e!==t||g?e+h+"C"+t:e)}if(0===n&&r>=k&&!a&&!f||c&&p){const e=Dt(t,u),n=Dt(l,i);return"R"+(e!==n||g?e+h+"R"+n:e)}const d=Dt(t,u),m=Dt(l,i),x=Dt(n,o),y=Dt(r,s);return a||f||c||p?(a?"":"R"+d)+(c?"":"C"+x)+h+(f?"":"R"+m)+(p?"":"C"+y):d!==m||x!==y?"R"+d+"C"+x+h+"R"+m+"C"+y:"R"+d+"C"+x}(e.range))}const Xt=(e,t,n)=>null==t?null:e?t:t-n,Pt={withLocation:!1,mergeRefs:!1,allowTernary:!0,r1c1:!1};function Wt(e,t,n,l){let r=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],o=e;if(null!=o&&!t){if(o=n+e,o<0){if(!r)return NaN;o=l+o+1}if(o>l){if(!r)return NaN;o-=l+1}}return o}const Gt={wrapEdges:!0,mergeRefs:!0,allowTernary:!0,xlsx:!1};function Yt(e){return e.replace(/([[\]#'@])/g,"'$1")}function Ht(e){return e[0].toUpperCase()+e.slice(1).toLowerCase()}function Kt(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{xlsx:n,thisRow:l}=t;let r=n?Rt(e):wt(e);e.table&&(r+=e.table);const o=e.columns?.length??0,s=e.sections?.length??0;if(1!==s||o)if(s||1!==o){r+="[";const t=!l&&1===s&&"this row"===e.sections[0].toLowerCase();t?r+="@":s&&(r+=e.sections.map((e=>`[#${Ht(e)}]`)).join(","),o&&(r+=",")),t&&1===e.columns.length&&(u=e.columns[0],/^[a-zA-Z0-9\u00a1-\uffff]+$/.test(u))?r+=Yt(e.columns[0]):o&&(r+=e.columns.slice(0,2).map((e=>`[${Yt(e)}]`)).join(":")),r+="]"}else r+=`[${Yt(e.columns[0])}]`;else r+=`[#${Ht(e.sections[0])}]`;var u;return r}const qt=Object.freeze({OPERATOR:e,BOOLEAN:n,ERROR:l,NUMBER:r,FUNCTION:o,NEWLINE:s,WHITESPACE:u,STRING:i,CONTEXT:c,CONTEXT_QUOTE:a,REF_RANGE:f,REF_BEAM:p,REF_TERNARY:h,REF_NAMED:g,REF_STRUCT:d,FX_PREFIX:m,UNKNOWN:x}),Vt=Object.freeze({UNARY:y,BINARY:v,REFERENCE:$,LITERAL:w,ERROR:R,CALL:N,ARRAY:A,IDENTIFIER:C});exports.MAX_COLS=k,exports.MAX_ROWS=T,exports.addA1RangeBounds=Ot,exports.addTokenMeta=function(e){let{sheetName:t="",workbookName:n=""}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const l=[];let r=null;const o=function(){let e=1;return()=>"fxg"+e++}(),s=[],u=()=>l.length+(r?1:0);return e.forEach(((e,i)=>{if(e.index=i,e.depth=u(),"("===e.value)l.push(e),e.depth=u();else if(")"===e.value){const t=l.pop();if(t){const n=o();e.groupId=n,e.depth=t.depth,t.groupId=n}else e.error=!0}else if("{"===e.value)r?e.error=!0:(r=e,e.depth=u());else if("}"===e.value){if(r){const t=o();e.groupId=t,e.depth=r.depth,r.groupId=t}else e.error=!0;r=null}else if(e.type===f||e.type===p||e.type===h||e.type===d){const l=e.type===d?Ut(e.value,{xlsx:!0}):Lt(e.value,{allowTernary:!0,xlsx:!0});if(l&&(l.range||l.columns)){l.source=e.value,function(e,t,n){e.sheetName||(e.sheetName=t),e.workbookName||(e.workbookName=n)}(l,t,n);const r=s.find((e=>function(e,t){if((e.name||t.name)&&e.name!==t.name)return!1;if(e.columns||t.columns){if(e.table!==t.table)return!1;if(!_t(e.columns,t.columns))return!1;if(!_t(e.sections,t.sections))return!1}return!!(!e.range&&!t.range||Ft(e.range.top,t.range.top)&&Ft(e.range.bottom,t.range.bottom)&&Ft(e.range.left,t.range.left)&&Ft(e.range.right,t.range.right))&&!(!St(e.workbookName,t.workbookName)||!St(e.sheetName,t.sheetName))}(e,l)));r?e.groupId=r.groupId:(l.groupId=o(),e.groupId=l.groupId,s.push(l))}}else e.type===x&&(e.error=!0)})),e},exports.fixRanges=function e(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{addBounds:!1};if("string"==typeof t)return e(Re(t,n),n).map((e=>e.value)).join("");if(!Array.isArray(t))throw new Error("fixRanges expects an array of tokens");const{addBounds:l,r1c1:r,xlsx:o,thisRow:s}=n;if(r)throw new Error("fixRanges does not have an R1C1 mode");let u=0;return t.map((e=>{const t={...e};e.loc&&(t.loc=[...e.loc]);let n=0;if(t.type===d){const e=Kt(Ut(t.value,{xlsx:o}),{xlsx:o,thisRow:s});n=e.length-t.value.length,t.value=e}else if(Ne(t)){const e=Lt(t.value,{xlsx:o,allowTernary:!0}),r=e.range;l&&Ot(r);const s=It(e,{xlsx:o});n=s.length-t.value.length,t.value=s}return u||n?(t.loc&&(t.loc[0]+=u),u+=n,t.loc&&(t.loc[1]+=u)):u+=n,t}))},exports.fromCol=L,exports.isError=Ae,exports.isFunction=ke,exports.isFxPrefix=Te,exports.isLiteral=be,exports.isOperator=Le,exports.isRange=Ne,exports.isReference=Ee,exports.isWhitespace=Ce,exports.mergeRefTokens=me,exports.nodeTypes=Vt,exports.parse=function(e,t){if("string"==typeof e)ze=Re(e,{withLocation:!1,...t,mergeRefs:!0});else{if(!Array.isArray(e))throw new Error("Parse requires a string or array of tokens.");ze=e}for(Be=t?.permitArrayRanges,Ze=t?.permitArrayCalls,je=0;Ce(ze[je])||Te(ze[je]);)je++;We(),et(!0);const n=Ge(0);return We(Ie),n},exports.parseA1Ref=Lt,exports.parseR1C1Ref=Bt,exports.parseStructRef=Ut,exports.stringifyA1Ref=It,exports.stringifyR1C1Ref=Zt,exports.stringifyStructRef=Kt,exports.toCol=vt,exports.tokenTypes=qt,exports.tokenize=Re,exports.translateToA1=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Gt;const r=Tt(t),o="string"==typeof e,s={...Gt,...n},u=o?Re(e,{withLocation:!1,mergeRefs:s.mergeRefs,xlsx:s.xlsx,allowTernary:s.allowTernary,r1c1:!0}):e;let i=0;const a={xlsx:s.xlsx,allowTernary:s.allowTernary};return u.forEach((e=>{if(Ne(e)){const t=e.value,n=Bt(t,a),o=n.range,u={},c=Wt(o.r0,o.$r0,r.top,T,s.wrapEdges),f=Wt(o.r1,o.$r1,r.top,T,s.wrapEdges);c>f?(u.top=f,u.$top=o.$r1,u.bottom=c,u.$bottom=o.$r0):(u.top=c,u.$top=o.$r0,u.bottom=f,u.$bottom=o.$r1);const p=Wt(o.c0,o.$c0,r.left,k,s.wrapEdges),h=Wt(o.c1,o.$c1,r.left,k,s.wrapEdges);p>h?(u.left=h,u.$left=o.$c1,u.right=p,u.$right=o.$c0):(u.left=p,u.$left=o.$c0,u.right=h,u.$right=o.$c1),o.trim&&(u.trim=o.trim),isNaN(c)||isNaN(f)||isNaN(p)||isNaN(h)?(e.type=l,e.value="#REF!",delete e.groupId):(n.range=u,e.value=It(n,a)),e.loc&&(e.loc[0]+=i,i+=e.value.length-t.length,e.loc[1]+=i)}else i&&e.loc&&(e.loc[0]+=i,e.loc[1]+=i)})),o?u.map((e=>e.value)).join(""):u},exports.translateToR1C1=function(e,t){let{xlsx:n=!1,allowTernary:l=!0}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{top:r,left:o}=Tt(t),s="string"==typeof e,u=s?Re(e,{...Pt,xlsx:n,allowTernary:l}):e;let i=0;const a={xlsx:n,allowTernary:l};return u.forEach((e=>{if(Ne(e)){const t=e.value,n=Lt(t,a),l=n.range,s={};s.r0=Xt(l.$top,l.top,r),s.r1=Xt(l.$bottom,l.bottom,r),s.c0=Xt(l.$left,l.left,o),s.c1=Xt(l.$right,l.right,o),s.$r0=l.$top,s.$r1=l.$bottom,s.$c0=l.$left,s.$c1=l.$right,l.trim&&(s.trim=l.trim),n.range=s,e.value=Zt(n,a),e.loc&&(e.loc[0]+=i,i+=e.value.length-t.length,e.loc[1]+=i)}else i&&e.loc&&(e.loc[0]+=i,e.loc[1]+=i)})),s?u.map((e=>e.value)).join(""):u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnguanMiLCJzb3VyY2VzIjpbIi4uL2xpYi9jb25zdGFudHMuanMiLCIuLi9saWIvZnJvbUNvbC5qcyIsIi4uL2xpYi9wYXJzZVNSYW5nZS5qcyIsIi4uL2xpYi9sZXhlclBhcnRzLmpzIiwiLi4vbGliL21lcmdlUmVmVG9rZW5zLmpzIiwiLi4vbGliL2xleGVyLmpzIiwiLi4vbGliL2lzVHlwZS5qcyIsIi4uL2xpYi9wYXJzZXIuanMiLCIuLi9saWIvcGFyc2VSZWYuanMiLCIuLi9saWIvdG9Db2wuanMiLCIuLi9saWIvc3RyaW5naWZ5UHJlZml4LmpzIiwiLi4vbGliL2ExLmpzIiwiLi4vbGliL3BhcnNlU3RydWN0UmVmLmpzIiwiLi4vbGliL2FkZFRva2VuTWV0YS5qcyIsIi4uL2xpYi9yYy5qcyIsIi4uL2xpYi90cmFuc2xhdGUuanMiLCIuLi9saWIvc3RyaW5naWZ5U3RydWN0UmVmLmpzIiwiLi4vbGliL2luZGV4LmpzIiwiLi4vbGliL2ZpeFJhbmdlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgT1BFUkFUT1IgPSAnb3BlcmF0b3InO1xuZXhwb3J0IGNvbnN0IE9QRVJBVE9SX1RSSU0gPSAnb3BlcmF0b3ItdHJpbSc7XG5leHBvcnQgY29uc3QgQk9PTEVBTiA9ICdib29sJztcbmV4cG9ydCBjb25zdCBFUlJPUiA9ICdlcnJvcic7XG5leHBvcnQgY29uc3QgTlVNQkVSID0gJ251bWJlcic7XG5leHBvcnQgY29uc3QgRlVOQ1RJT04gPSAnZnVuYyc7XG5leHBvcnQgY29uc3QgTkVXTElORSA9ICduZXdsaW5lJztcbmV4cG9ydCBjb25zdCBXSElURVNQQUNFID0gJ3doaXRlc3BhY2UnO1xuZXhwb3J0IGNvbnN0IFNUUklORyA9ICdzdHJpbmcnO1xuZXhwb3J0IGNvbnN0IENPTlRFWFRfUVVPVEUgPSAnY29udGV4dF9xdW90ZSc7XG5leHBvcnQgY29uc3QgQ09OVEVYVCA9ICdjb250ZXh0JztcbmV4cG9ydCBjb25zdCBSRUZfUkFOR0UgPSAncmFuZ2UnO1xuZXhwb3J0IGNvbnN0IFJFRl9CRUFNID0gJ3JhbmdlX2JlYW0nO1xuZXhwb3J0IGNvbnN0IFJFRl9URVJOQVJZID0gJ3JhbmdlX3Rlcm5hcnknO1xuZXhwb3J0IGNvbnN0IFJFRl9OQU1FRCA9ICdyYW5nZV9uYW1lZCc7XG5leHBvcnQgY29uc3QgUkVGX1NUUlVDVCA9ICdzdHJ1Y3R1cmVkJztcbmV4cG9ydCBjb25zdCBGWF9QUkVGSVggPSAnZnhfcHJlZml4JztcbmV4cG9ydCBjb25zdCBVTktOT1dOID0gJ3Vua25vd24nO1xuXG5leHBvcnQgY29uc3QgVU5BUlkgPSAnVW5hcnlFeHByZXNzaW9uJztcbmV4cG9ydCBjb25zdCBCSU5BUlkgPSAnQmluYXJ5RXhwcmVzc2lvbic7XG5leHBvcnQgY29uc3QgUkVGRVJFTkNFID0gJ1JlZmVyZW5jZUlkZW50aWZpZXInO1xuZXhwb3J0IGNvbnN0IExJVEVSQUwgPSAnTGl0ZXJhbCc7XG5leHBvcnQgY29uc3QgRVJST1JfTElURVJBTCA9ICdFcnJvckxpdGVyYWwnO1xuZXhwb3J0IGNvbnN0IENBTEwgPSAnQ2FsbEV4cHJlc3Npb24nO1xuZXhwb3J0IGNvbnN0IExBTUJEQSA9ICdMYW1iZGFFeHByZXNzaW9uJztcbmV4cG9ydCBjb25zdCBMRVQgPSAnTGV0RXhwcmVzc2lvbic7XG5leHBvcnQgY29uc3QgQVJSQVkgPSAnQXJyYXlFeHByZXNzaW9uJztcbmV4cG9ydCBjb25zdCBJREVOVElGSUVSID0gJ0lkZW50aWZpZXInO1xuZXhwb3J0IGNvbnN0IExFVF9ERUNMID0gJ0xldERlY2xhcmF0b3InO1xuXG5leHBvcnQgY29uc3QgTUFYX0NPTFMgPSAoMiAqKiAxNCkgLSAxOyAvLyAxNjM4M1xuZXhwb3J0IGNvbnN0IE1BWF9ST1dTID0gKDIgKiogMjApIC0gMTsgLy8gMTA0ODU3NVxuIiwiLyoqXG4gKiBDb252ZXJ0IGEgY29sdW1uIHN0cmluZyByZXByZXNlbnRhdGlvbiB0byBhIDAgYmFzZWRcbiAqIG9mZnNldCBudW1iZXIgKGBcIkNcImAgPSBgMmApLlxuICpcbiAqIFRoZSBtZXRob2QgZXhwZWN0cyBhIHZhbGlkIGNvbHVtbiBpZGVudGlmaWVyIG1hZGUgdXAgb2YgX29ubHlfXG4gKiBBLVogbGV0dGVycywgd2hpY2ggbWF5IGJlIGVpdGhlciB1cHBlciBvciBsb3dlciBjYXNlLiBPdGhlciBpbnB1dCB3aWxsXG4gKiByZXR1cm4gZ2FyYmFnZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sdW1uU3RyaW5nICBUaGUgY29sdW1uIHN0cmluZyBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAgWmVybyBiYXNlZCBjb2x1bW4gaW5kZXggbnVtYmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQ29sIChjb2x1bW5TdHJpbmcpIHtcbiAgY29uc3QgeCA9IChjb2x1bW5TdHJpbmcgfHwgJycpO1xuICBjb25zdCBsID0geC5sZW5ndGg7XG4gIGxldCBuID0gMDtcbiAgaWYgKGwgPiAyKSB7XG4gICAgY29uc3QgYyA9IHguY2hhckNvZGVBdChsIC0gMyk7XG4gICAgY29uc3QgYSA9IGMgPiA5NSA/IDMyIDogMDtcbiAgICBuICs9ICgxICsgYyAtIGEgLSA2NSkgKiA2NzY7XG4gIH1cbiAgaWYgKGwgPiAxKSB7XG4gICAgY29uc3QgYyA9IHguY2hhckNvZGVBdChsIC0gMik7XG4gICAgY29uc3QgYSA9IGMgPiA5NSA/IDMyIDogMDtcbiAgICBuICs9ICgxICsgYyAtIGEgLSA2NSkgKiAyNjtcbiAgfVxuICBpZiAobCkge1xuICAgIGNvbnN0IGMgPSB4LmNoYXJDb2RlQXQobCAtIDEpO1xuICAgIGNvbnN0IGEgPSBjID4gOTUgPyAzMiA6IDA7XG4gICAgbiArPSAoYyAtIGEpIC0gNjU7XG4gIH1cbiAgcmV0dXJuIG47XG59XG4iLCJjb25zdCByZV9TUmNvbHVtbkIgPSAvXlxcWygnWycjQFtcXF1dfFteJyNAW1xcXV0pK1xcXS9pO1xuY29uc3QgcmVfU1Jjb2x1bW5OID0gL14oW14jQFtcXF06XSspL2k7XG5cbmNvbnN0IGtleVRlcm1zID0ge1xuICAnaGVhZGVycyc6IDEsXG4gICdkYXRhJzogMixcbiAgJ3RvdGFscyc6IDQsXG4gICdhbGwnOiA4LFxuICAndGhpcyByb3cnOiAxNixcbiAgJ0AnOiAxNlxufTtcblxuY29uc3QgZnogPSAoLi4uYSkgPT4gT2JqZWN0LmZyZWV6ZShhKTtcblxuLy8gb25seSBjb21iaW5hdGlvbnMgYWxsb3dlZCBhcmU6ICNkYXRhICsgKCNoZWFkZXJzIHwgI3RvdGFscyB8ICNkYXRhKVxuY29uc3Qgc2VjdGlvbk1hcCA9IHtcbiAgLy8gbm8gdGVybXNcbiAgMDogZnooKSxcbiAgLy8gc2luZ2xlIHRlcm1cbiAgMTogZnooJ2hlYWRlcnMnKSxcbiAgMjogZnooJ2RhdGEnKSxcbiAgNDogZnooJ3RvdGFscycpLFxuICA4OiBmeignYWxsJyksXG4gIDE2OiBmeigndGhpcyByb3cnKSxcbiAgLy8gaGVhZGVycytkYXRhXG4gIDM6IGZ6KCdoZWFkZXJzJywgJ2RhdGEnKSxcbiAgLy8gdG90YWxzK2RhdGFcbiAgNjogZnooJ2RhdGEnLCAndG90YWxzJylcbn07XG5cbmNvbnN0IG1hdGNoQ29sdW1uID0gKHMsIGFsbG93VW5icmFjZWQgPSB0cnVlKSA9PiB7XG4gIGxldCBtID0gcmVfU1Jjb2x1bW5CLmV4ZWMocyk7XG4gIGlmIChtKSB7XG4gICAgY29uc3QgdmFsdWUgPSBtWzBdLnNsaWNlKDEsIC0xKS5yZXBsYWNlKC8nKFsnI0BbXFxdXSkvZywgJyQxJyk7XG4gICAgcmV0dXJuIFsgbVswXSwgdmFsdWUgXTtcbiAgfVxuICBpZiAoYWxsb3dVbmJyYWNlZCkge1xuICAgIG0gPSByZV9TUmNvbHVtbk4uZXhlYyhzKTtcbiAgICBpZiAobSkge1xuICAgICAgcmV0dXJuIFsgbVswXSwgbVswXSBdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNSYW5nZSAocmF3KSB7XG4gIGNvbnN0IGNvbHVtbnMgPSBbXTtcbiAgbGV0IHBvcyA9IDA7XG4gIGxldCBzID0gcmF3O1xuICBsZXQgbTtcbiAgbGV0IG0xO1xuICBsZXQgdGVybXMgPSAwO1xuXG4gIC8vIHN0YXJ0IG9mIHN0cnVjdHVyZWQgcmVmP1xuICBpZiAoKG0gPSAvXihcXFtcXHMqKS8uZXhlYyhzKSkpIHtcbiAgICAvLyBxdWlja2x5IGRldGVybWluZSBpZiB0aGlzIGlzIGEgc2ltcGxlIGtleXdvcmQgb3IgY29sdW1uXG4gICAgLy8gWyNrZXl3b3JkXVxuICAgIGlmICgobTEgPSAvXlxcWyMoW2EteiBdKylcXF0vaS5leGVjKHMpKSkge1xuICAgICAgY29uc3QgayA9IG0xWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICBwb3MgKz0gbTFbMF0ubGVuZ3RoO1xuICAgICAgaWYgKGtleVRlcm1zW2tdKSB7XG4gICAgICAgIHRlcm1zIHw9IGtleVRlcm1zW2tdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBbY29sdW1uXVxuICAgIGVsc2UgaWYgKChtMSA9IG1hdGNoQ29sdW1uKHMsIGZhbHNlKSkpIHtcbiAgICAgIHBvcyArPSBtMVswXS5sZW5ndGg7XG4gICAgICBjb2x1bW5zLnB1c2gobTFbMV0pO1xuICAgIH1cbiAgICAvLyB1c2UgdGhlIFwibm9ybWFsXCIgbWV0aG9kXG4gICAgLy8gW1sja2V5d29yZF1dXG4gICAgLy8gW1tjb2x1bW5dXVxuICAgIC8vIFtAXVxuICAgIC8vIFtAY29sdW1uXVxuICAgIC8vIFtAW2NvbHVtbl1dXG4gICAgLy8gW0Bjb2x1bW46Y29sdW1uXVxuICAgIC8vIFtAY29sdW1uOltjb2x1bW5dXVxuICAgIC8vIFtAW2NvbHVtbl06Y29sdW1uXVxuICAgIC8vIFtAW2NvbHVtbl06W2NvbHVtbl1dXG4gICAgLy8gW2NvbHVtbjpjb2x1bW5dXG4gICAgLy8gW2NvbHVtbjpbY29sdW1uXV1cbiAgICAvLyBbW2NvbHVtbl06Y29sdW1uXVxuICAgIC8vIFtbY29sdW1uXTpbY29sdW1uXV1cbiAgICAvLyBbWyNrZXl3b3JkXSxjb2x1bW5dXG4gICAgLy8gW1sja2V5d29yZF0sY29sdW1uOmNvbHVtbl1cbiAgICAvLyBbWyNrZXl3b3JkXSxbI2tleXdvcmRdLGNvbHVtbjpjb2x1bW5dXG4gICAgLy8gLi4uXG4gICAgZWxzZSB7XG4gICAgICBsZXQgZXhwZWN0X21vcmUgPSB0cnVlO1xuICAgICAgcyA9IHMuc2xpY2UobVsxXS5sZW5ndGgpO1xuICAgICAgcG9zICs9IG1bMV0ubGVuZ3RoO1xuICAgICAgLy8gbWF0Y2gga2V5d29yZHMgYXMgd2UgZmluZCB0aGVtXG4gICAgICB3aGlsZSAoXG4gICAgICAgIGV4cGVjdF9tb3JlICYmXG4gICAgICAgIChtID0gL15cXFsjKFthLXogXSspXFxdKFxccyosXFxzKik/L2kuZXhlYyhzKSlcbiAgICAgICkge1xuICAgICAgICBjb25zdCBrID0gbVsxXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoa2V5VGVybXNba10pIHtcbiAgICAgICAgICB0ZXJtcyB8PSBrZXlUZXJtc1trXTtcbiAgICAgICAgICBzID0gcy5zbGljZShtWzBdLmxlbmd0aCk7XG4gICAgICAgICAgcG9zICs9IG1bMF0ubGVuZ3RoO1xuICAgICAgICAgIGV4cGVjdF9tb3JlID0gISFtWzJdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBpcyB0aGVyZSBhbiBAIHNwZWNpZmllcj9cbiAgICAgIGlmIChleHBlY3RfbW9yZSAmJiAobSA9IC9eQC8uZXhlYyhzKSkpIHtcbiAgICAgICAgdGVybXMgfD0ga2V5VGVybXNbJ0AnXTtcbiAgICAgICAgcyA9IHMuc2xpY2UoMSk7XG4gICAgICAgIHBvcyArPSAxO1xuICAgICAgICBleHBlY3RfbW9yZSA9IHNbMF0gIT09ICddJztcbiAgICAgIH1cbiAgICAgIC8vIG5vdCBhbGwga2V5d29yZCB0ZXJtcyBtYXkgYmUgY29tYmluZWRcbiAgICAgIGlmICghKHRlcm1zIGluIHNlY3Rpb25NYXApKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgLy8gY29sdW1uIGRlZmluaXRpb25zXG4gICAgICBjb25zdCBsZWZ0Q29sID0gZXhwZWN0X21vcmUgPyBtYXRjaENvbHVtbihyYXcuc2xpY2UocG9zKSkgOiBudWxsO1xuICAgICAgaWYgKGxlZnRDb2wpIHtcbiAgICAgICAgcG9zICs9IGxlZnRDb2xbMF0ubGVuZ3RoO1xuICAgICAgICBjb2x1bW5zLnB1c2gobGVmdENvbFsxXSk7XG4gICAgICAgIHMgPSByYXcuc2xpY2UocG9zKTtcbiAgICAgICAgaWYgKHNbMF0gPT09ICc6Jykge1xuICAgICAgICAgIHMgPSBzLnNsaWNlKDEpO1xuICAgICAgICAgIHBvcysrO1xuICAgICAgICAgIGNvbnN0IHJpZ2h0Q29sID0gbWF0Y2hDb2x1bW4ocyk7XG4gICAgICAgICAgaWYgKHJpZ2h0Q29sKSB7XG4gICAgICAgICAgICBwb3MgKz0gcmlnaHRDb2xbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgY29sdW1ucy5wdXNoKHJpZ2h0Q29sWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXhwZWN0X21vcmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIGFkdmFuY2Ugd3NcbiAgICAgIHdoaWxlIChyYXdbcG9zXSA9PT0gJyAnKSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgfVxuICAgICAgLy8gY2xvc2UgdGhlIHJlZlxuICAgICAgaWYgKGV4cGVjdF9tb3JlIHx8IHJhd1twb3NdICE9PSAnXScpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICAvLyBzdGVwIG92ZXIgdGhlIGNsb3NpbmcgXVxuICAgICAgcG9zKys7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3Qgc2VjdGlvbnMgPSBzZWN0aW9uTWFwW3Rlcm1zXTtcbiAgcmV0dXJuIHtcbiAgICBjb2x1bW5zLFxuICAgIHNlY3Rpb25zOiBzZWN0aW9ucyA/IHNlY3Rpb25zLmNvbmNhdCgpIDogc2VjdGlvbnMsXG4gICAgbGVuZ3RoOiBwb3MsXG4gICAgdG9rZW46IHJhdy5zbGljZSgwLCBwb3MpXG4gIH07XG59XG4iLCJpbXBvcnQge1xuICBPUEVSQVRPUixcbiAgQk9PTEVBTixcbiAgRVJST1IsXG4gIE5VTUJFUixcbiAgRlVOQ1RJT04sXG4gIE5FV0xJTkUsXG4gIFdISVRFU1BBQ0UsXG4gIFNUUklORyxcbiAgQ09OVEVYVCxcbiAgQ09OVEVYVF9RVU9URSxcbiAgUkVGX1JBTkdFLFxuICBSRUZfQkVBTSxcbiAgUkVGX05BTUVELFxuICBSRUZfVEVSTkFSWSxcbiAgUkVGX1NUUlVDVCxcbiAgTUFYX0NPTFMsXG4gIE1BWF9ST1dTLFxuICBPUEVSQVRPUl9UUklNXG59IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IGZyb21Db2wgfSBmcm9tICcuL2Zyb21Db2wuanMnO1xuaW1wb3J0IHsgcGFyc2VTUmFuZ2UgfSBmcm9tICcuL3BhcnNlU1JhbmdlLmpzJztcblxuY29uc3QgcmVfRVJST1IgPSAvXiMoTkFNRVxcP3xGSUVMRCF8Q0FMQyF8VkFMVUUhfFJFRiF8RElWXFwvMCF8TlVMTCF8TlVNIXxOXFwvQXxHRVRUSU5HX0RBVEFcXGJ8U1BJTEwhfFVOS05PV04hfEZJRUxEXFxifENBTENcXGJ8U1lOVEFYXFw/fEVSUk9SIXxDT05ORUNUIXxCTE9DS0VEIXxFWFRFUk5BTCEpL2k7XG5jb25zdCByZV9PUEVSQVRPUiA9IC9eKDw9fD49fDw+fFstKy8qXiUmPD49XXxbe30sO118WygpXXxAfDp8IXwjKS87XG5jb25zdCByZV9CT09MRUFOID0gL14oVFJVRXxGQUxTRSlcXGIvaTtcbmNvbnN0IHJlX0ZVTkNUSU9OID0gL15bQS1aX10rW0EtWlxcZF8uXSooPz1cXCgpL2k7XG5jb25zdCByZV9ORVdMSU5FID0gL15cXG4rLztcbmNvbnN0IHJlX1dISVRFU1BBQ0UgPSAvXlsgXFxmXFxyXFx0XFx2XFx1MDBhMFxcdTE2ODBcXHUyMDAwLVxcdTIwMGFcXHUyMDI4XFx1MjAyOVxcdTIwMmZcXHUyMDVmXFx1MzAwMFxcdWZlZmZdKy87XG5jb25zdCByZV9TVFJJTkcgPSAvXlwiKD86XCJcInxbXlwiXSkqKFwifCQpLztcbmNvbnN0IHJlX05VTUJFUiA9IC9eKD86XFxkKyhcXC5cXGQrKT8oPzpbZUVdWystXT9cXGQrKT98XFxkKykvO1xuY29uc3QgcmVfQ09OVEVYVCA9IC9eKD8hISkoXFxbKD86W15cXF1dKStcXF0pPyhbMC05QS1aYS16Ll/CocKkwqfCqMKqXFx1MDBhZMKvLVxcdWZmZmZdKyk/KD89ISkvO1xuY29uc3QgcmVfQ09OVEVYVF9RVU9URSA9IC9eJyg/OicnfFteJ10pKignfCQpKD89ISkvO1xuY29uc3QgcmVfUkFOR0VfVFJJTSA9IC9eKFxcLjpcXC58XFwuOnw6XFwuKS87XG5cbmNvbnN0IHJuZ1BhcnQgPSAnXFxcXCQ/W0EtWl17MSwzfVxcXFwkP1sxLTldWzAtOV17MCw2fSc7XG5jb25zdCBjb2xQYXJ0ID0gJ1xcXFwkP1tBLVpdezEsM30nO1xuY29uc3Qgcm93UGFydCA9ICdcXFxcJD9bMS05XVswLTldezAsNn0nO1xuY29uc3QgcmFuZ2VPcCA9ICdcXFxcLj86XFxcXC4/JztcbmNvbnN0IG5leHROb3RDaGFyID0gJyg/IVthLXowLTlfXFxcXHUwMGExLVxcXFx1ZmZmZl0pJztcbmNvbnN0IHJlX0ExQ09MID0gbmV3IFJlZ0V4cChgXiR7Y29sUGFydH0ke3JhbmdlT3B9JHtjb2xQYXJ0fSR7bmV4dE5vdENoYXJ9YCwgJ2knKTtcbmNvbnN0IHJlX0ExUk9XID0gbmV3IFJlZ0V4cChgXiR7cm93UGFydH0ke3JhbmdlT3B9JHtyb3dQYXJ0fSR7bmV4dE5vdENoYXJ9YCwgJ2knKTtcbmNvbnN0IHJlX0ExUkFOR0UgPSBuZXcgUmVnRXhwKGBeJHtybmdQYXJ0fSR7bmV4dE5vdENoYXJ9YCwgJ2knKTtcbmNvbnN0IHJlX0ExUEFSVElBTCA9IG5ldyBSZWdFeHAoYF4oKCR7Y29sUGFydH18JHtyb3dQYXJ0fSkke3JhbmdlT3B9JHtybmdQYXJ0fXwke3JuZ1BhcnR9JHtyYW5nZU9wfSgke2NvbFBhcnR9fCR7cm93UGFydH0pKSg/IVtcXFxcdygkLl0pYCwgJ2knKTtcbmNvbnN0IHJQYXJ0ID0gJyg/OlIoPzpcXFxcW1srLV0/XFxcXGQrXFxcXF18WzEtOV1bMC05XXswLDZ9KT8pJztcbmNvbnN0IGNQYXJ0ID0gJyg/OkMoPzpcXFxcW1srLV0/XFxcXGQrXFxcXF18WzEtOV1bMC05XXswLDR9KT8pJztcbmNvbnN0IHJlX1JDQ09MID0gbmV3IFJlZ0V4cChgXiR7Y1BhcnR9KCR7cmFuZ2VPcH0ke2NQYXJ0fSk/JHtuZXh0Tm90Q2hhcn1gLCAnaScpO1xuY29uc3QgcmVfUkNST1cgPSBuZXcgUmVnRXhwKGBeJHtyUGFydH0oJHtyYW5nZU9wfSR7clBhcnR9KT8ke25leHROb3RDaGFyfWAsICdpJyk7XG5jb25zdCByZV9SQ1JBTkdFID0gbmV3IFJlZ0V4cChgXig/Oig/PVtSQ10pJHtyUGFydH0ke2NQYXJ0fSkke25leHROb3RDaGFyfWAsICdpJyk7XG5jb25zdCByZV9SQ1BBUlRJQUwgPSBuZXcgUmVnRXhwKGBeKCR7clBhcnR9JHtjUGFydH0oJHtyYW5nZU9wfSR7Y1BhcnR9fCR7cmFuZ2VPcH0ke3JQYXJ0fSkoPyFbW1xcXFxkXSl8KCR7clBhcnR9fCR7Y1BhcnR9KSgke3JhbmdlT3B9JHtyUGFydH0ke2NQYXJ0fSkpJHtuZXh0Tm90Q2hhcn1gLCAnaScpO1xuXG4vLyBUaGUgYWR2ZXJ0aXplZCBuYW1lZCByYW5nZXMgcnVsZXMgYXJlIGEgYml0IG9mZiBmcm9tIHdoYXQgRXhjZWwgc2VlbXMgdG8gZG86XG4vLyBpbiB0aGUgXCJleHRlbmRlZCByYW5nZVwiIG9mIGNoYXJzLCBpdCBsb29rcyBsaWtlIGl0IGFsbG93cyBtb3N0IHRoaW5ncyBhYm92ZVxuLy8gVSswMEIwIHdpdGggdGhlIHJhbmdlIGJldHdlZW4gVSswMEEwLVUrMDBBRiByYXRoZXIgcmFuZG9tLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4vLyBjb25zdCByZV9OQU1FRCA9IC9eW2EtekEtWlxcXFxfwqHCpMKnwqjCqlxcdTAwYWTCr1xcdTAwYjAtXFx1ZmZmZl1bYS16QS1aMC05XFxcXF8uP8KhwqTCp8KowqpcXHUwMGFkwq9cXHUwMGIwLVxcdWZmZmZdezAsMjU0fS9pO1xuLy8gSSd2ZSBzaW1wbGlmaWVkIHRvIGFsbG93aW5nIGV2ZXJ5dGhpbmcgYWJvdmUgVSswMEExOlxuY29uc3QgcmVfTkFNRUQgPSAvXlthLXpBLVpcXFxcX1xcdTAwYTEtXFx1ZmZmZl1bYS16QS1aMC05XFxcXF8uP1xcdTAwYTEtXFx1ZmZmZl17MCwyNTR9L2k7XG5cbmZ1bmN0aW9uIG1ha2VIYW5kbGVyICh0eXBlLCByZSkge1xuICByZXR1cm4gc3RyID0+IHtcbiAgICBjb25zdCBtID0gcmUuZXhlYyhzdHIpO1xuICAgIGlmIChtKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiB0eXBlLCB2YWx1ZTogbVswXSB9O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbGV4TmFtZWQgKHN0cikge1xuICBjb25zdCBtID0gcmVfTkFNRUQuZXhlYyhzdHIpO1xuICBpZiAobSkge1xuICAgIGNvbnN0IGxjID0gbVswXS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIG5hbWVzIHN0YXJ0aW5nIHdpdGggXFwgbXVzdCBiZSBhdCBsZWFzdCAzIGNoYXIgbG9uZ1xuICAgIGlmIChsY1swXSA9PT0gJ1xcXFwnICYmIG1bMF0ubGVuZ3RoIDwgMykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIHNpbmdsZSBjaGFyYWN0ZXJzIFIgYW5kIEMgYXJlIGZvcmJpZGRlbiBhcyBuYW1lc1xuICAgIGlmIChsYyA9PT0gJ3InIHx8IGxjID09PSAnYycpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4geyB0eXBlOiBSRUZfTkFNRUQsIHZhbHVlOiBtWzBdIH07XG4gIH1cbn1cblxuY29uc3QgcmVfUVVPVEVEX1ZBTFVFID0gL14nKD86W15bXFxdXSs/KT8oPzpcXFsoLis/KVxcXSk/KD86W15bXFxdXSs/KSckLztcbmNvbnN0IHJlX1FVT1RFRF9WQUxVRV9YTFNYID0gL14nXFxbKC4rPylcXF0nJC87XG5mdW5jdGlvbiBsZXhDb250ZXh0IChzdHIsIG9wdGlvbnMpIHtcbiAgY29uc3QgbXEgPSByZV9DT05URVhUX1FVT1RFLmV4ZWMoc3RyKTtcbiAgaWYgKG1xKSB7XG4gICAgY29uc3QgdmFsdWUgPSBtcVswXTtcbiAgICBjb25zdCBpc1ZhbGlkID0gb3B0aW9ucy54bHN4XG4gICAgICA/IHJlX1FVT1RFRF9WQUxVRV9YTFNYLnRlc3QodmFsdWUpIHx8IHJlX1FVT1RFRF9WQUxVRS50ZXN0KHZhbHVlKVxuICAgICAgOiByZV9RVU9URURfVkFMVUUudGVzdCh2YWx1ZSk7XG4gICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IENPTlRFWFRfUVVPVEUsIHZhbHVlOiB2YWx1ZSB9O1xuICAgIH1cbiAgfVxuICAvLyB4bHN4IHhtbCB1c2VzIGEgdmFyaWFudCBvZiB0aGUgc3ludGF4IHRoYXQgaGFzIGV4dGVybmFsIHJlZmVyZW5jZXMgaW5cbiAgLy8gYnJhY2V0cy4gQW55IG9mOiBbMV1TaGVldDEhQTEsICdbMV1TaGVldCBvbmUnIUExLCBbMV0hbmFtZWRcbiAgLy8gV2UncmUgb25seSBjb25jZXJuZWQgd2l0aCB0aGUgbm9uIHF1b3RlZCB2ZXJzaW9uIGhlcmUgYXMgdGhlIHF1b3RlZCB2ZXJzaW9uXG4gIC8vIGRvZXNuJ3QgY3VycmVudGx5IGV4YW1pbmUgd2hhdCBpcyBpbiB0aGUgcXVvdGVzLlxuICBjb25zdCBtID0gcmVfQ09OVEVYVC5leGVjKHN0cik7XG4gIGlmIChtKSB7XG4gICAgY29uc3QgWyAsIGEsIGIgXSA9IG07XG4gICAgY29uc3QgdmFsaWQgPSAoXG4gICAgICAoKGEgJiYgYikgfHwgYikgfHwgLy8gXCJbYV1iIVwiIG9yIFwiYiFcIiBmb3Jtc1xuICAgICAgKGEgJiYgIWIgJiYgb3B0aW9ucy54bHN4KSAvLyBcIlthXVwiIGZvcm0gKGFsbG93ZWQgaW4geGxzeCBtb2RlKVxuICAgICk7XG4gICAgaWYgKHZhbGlkKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBDT05URVhULCB2YWx1ZTogbVswXSB9O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBsZXhTdHJ1Y3R1cmVkIChzdHIpIHtcbiAgY29uc3Qgc3RydWN0RGF0YSA9IHBhcnNlU1JhbmdlKHN0cik7XG4gIGlmIChzdHJ1Y3REYXRhKSB7XG4gICAgLy8gd2UgaGF2ZSBhIG1hdGNoIGZvciBhIHZhbGlkIFNSXG4gICAgbGV0IGkgPSBzdHJ1Y3REYXRhLmxlbmd0aDtcbiAgICAvLyBza2lwIHRhaWxpbmcgd2hpdGVzcGFjZVxuICAgIHdoaWxlIChzdHJbaV0gPT09ICcgJykge1xuICAgICAgaSsrO1xuICAgIH1cbiAgICAvLyBhbmQgZW5zdXJlIHRoYXQgaXQgaXNuJ3QgZm9sbG93ZWQgYnkgYSAhXG4gICAgaWYgKHN0cltpXSAhPT0gJyEnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSRUZfU1RSVUNULFxuICAgICAgICB2YWx1ZTogc3RydWN0RGF0YS50b2tlblxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IHJlUkNOdW1zID0gLyhbUkNdKShcXFs/KSgtP1xcZCspL2dpO1xuY29uc3QgcmVBMU51bXMgPSAvKFxcZCt8W2EtekEtWl0rKS9naTtcbmZ1bmN0aW9uIGxleFJhbmdlIChzdHIsIG9wdGlvbnMpIHtcbiAgbGV0IG0sIHQ7XG4gIGlmIChvcHRpb25zLnIxYzEpIHtcbiAgICAvLyBSQyBub3RhdGlvblxuICAgIGlmIChvcHRpb25zLmFsbG93VGVybmFyeSAmJiAobSA9IHJlX1JDUEFSVElBTC5leGVjKHN0cikpKSB7XG4gICAgICB0ID0geyB0eXBlOiBSRUZfVEVSTkFSWSwgdmFsdWU6IG1bMF0gfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKG0gPSByZV9SQ1JBTkdFLmV4ZWMoc3RyKSkpIHtcbiAgICAgIHQgPSB7IHR5cGU6IFJFRl9SQU5HRSwgdmFsdWU6IG1bMF0gfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKG0gPSByZV9SQ1JPVy5leGVjKHN0cikpIHx8IChtID0gcmVfUkNDT0wuZXhlYyhzdHIpKSkge1xuICAgICAgdCA9IHsgdHlwZTogUkVGX0JFQU0sIHZhbHVlOiBtWzBdIH07XG4gICAgfVxuICAgIGlmICh0KSB7XG4gICAgICByZVJDTnVtcy5sYXN0SW5kZXggPSAwO1xuICAgICAgd2hpbGUgKChtID0gcmVSQ051bXMuZXhlYyh0LnZhbHVlKSkgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgeCA9IChtWzFdID09PSAnUicgPyBNQVhfUk9XUyA6IE1BWF9DT0xTKSArIChtWzJdID8gMCA6IDEpO1xuICAgICAgICBjb25zdCB2YWwgPSBwYXJzZUludChtWzNdLCAxMCk7XG4gICAgICAgIGlmICh2YWwgPiB4IHx8IHZhbCA8IC14KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0O1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICAvLyBBMSBub3RhdGlvblxuICAgIGlmIChvcHRpb25zLmFsbG93VGVybmFyeSAmJiAobSA9IHJlX0ExUEFSVElBTC5leGVjKHN0cikpKSB7XG4gICAgICB0ID0geyB0eXBlOiBSRUZfVEVSTkFSWSwgdmFsdWU6IG1bMF0gfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKG0gPSByZV9BMUNPTC5leGVjKHN0cikpIHx8IChtID0gcmVfQTFST1cuZXhlYyhzdHIpKSkge1xuICAgICAgdCA9IHsgdHlwZTogUkVGX0JFQU0sIHZhbHVlOiBtWzBdIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKChtID0gcmVfQTFSQU5HRS5leGVjKHN0cikpKSB7XG4gICAgICB0ID0geyB0eXBlOiBSRUZfUkFOR0UsIHZhbHVlOiBtWzBdIH07XG4gICAgfVxuICAgIGlmICh0KSB7XG4gICAgICByZUExTnVtcy5sYXN0SW5kZXggPSAwO1xuICAgICAgLy8gWFhYOiBjYW4gcHJvYmFibHkgb3B0aW1pemUgdGhpcyBhcyB3ZSBrbm93IGxldHRlcnMgY2FuIG9ubHkgYmUgMyBhdCBtYXhcbiAgICAgIHdoaWxlICgobSA9IHJlQTFOdW1zLmV4ZWModC52YWx1ZSkpICE9PSBudWxsKSB7XG4gICAgICAgIGlmICgvXlxcZC8udGVzdChtWzFdKSkgeyAvLyByb3dcbiAgICAgICAgICBpZiAoKHBhcnNlSW50KG1bMV0sIDEwKSAtIDEpID4gTUFYX1JPV1MpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmcm9tQ29sKG1bMV0pID4gTUFYX0NPTFMpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGxleFJlZk9wIChzLCBvcHRzKSB7XG4gIC8vIGluIFIxQzEgbW9kZSB3ZSBvbmx5IGFsbG93ICFcbiAgaWYgKG9wdHMucjFjMSkge1xuICAgIHJldHVybiAoc1swXSA9PT0gJyEnKVxuICAgICAgPyB7IHR5cGU6IE9QRVJBVE9SLCB2YWx1ZTogc1swXSB9XG4gICAgICA6IG51bGw7XG4gIH1cbiAgLy8gaW4gQTEgbW9kZSB3ZSBhbGxvdyBbICchJywgJzonLCAnLjonLCAnOi4nLCAnLjouJ11cbiAgY29uc3QgbSA9IC9eKCF8XFwuPzpcXC4/KS8uZXhlYyhzKTtcbiAgaWYgKG0pIHtcbiAgICByZXR1cm4geyB0eXBlOiBPUEVSQVRPUiwgdmFsdWU6IG1bMV0gfTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGNvbnN0IGxleGVycyA9IFtcbiAgbWFrZUhhbmRsZXIoRVJST1IsIHJlX0VSUk9SKSxcbiAgbWFrZUhhbmRsZXIoT1BFUkFUT1JfVFJJTSwgcmVfUkFOR0VfVFJJTSksXG4gIG1ha2VIYW5kbGVyKE9QRVJBVE9SLCByZV9PUEVSQVRPUiksXG4gIG1ha2VIYW5kbGVyKEZVTkNUSU9OLCByZV9GVU5DVElPTiksXG4gIG1ha2VIYW5kbGVyKEJPT0xFQU4sIHJlX0JPT0xFQU4pLFxuICBtYWtlSGFuZGxlcihORVdMSU5FLCByZV9ORVdMSU5FKSxcbiAgbWFrZUhhbmRsZXIoV0hJVEVTUEFDRSwgcmVfV0hJVEVTUEFDRSksXG4gIG1ha2VIYW5kbGVyKFNUUklORywgcmVfU1RSSU5HKSxcbiAgbGV4Q29udGV4dCxcbiAgbGV4UmFuZ2UsXG4gIGxleFN0cnVjdHVyZWQsXG4gIG1ha2VIYW5kbGVyKE5VTUJFUiwgcmVfTlVNQkVSKSxcbiAgbGV4TmFtZWRcbl07XG5cbmV4cG9ydCBjb25zdCBsZXhlcnNSZWZzID0gW1xuICBsZXhSZWZPcCxcbiAgbGV4Q29udGV4dCxcbiAgbGV4UmFuZ2UsXG4gIGxleFN0cnVjdHVyZWQsXG4gIGxleE5hbWVkXG5dO1xuIiwiaW1wb3J0IHsgQ09OVEVYVCwgQ09OVEVYVF9RVU9URSwgUkVGX1JBTkdFLCBSRUZfTkFNRUQsIFJFRl9CRUFNLCBSRUZfVEVSTkFSWSwgT1BFUkFUT1IsIFJFRl9TVFJVQ1QgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbmNvbnN0IEVORCA9ICckJztcblxuY29uc3QgdmFsaWRSdW5zTWVyZ2UgPSBbXG4gIFsgUkVGX1JBTkdFLCAnOicsIFJFRl9SQU5HRSBdLFxuICBbIFJFRl9SQU5HRSwgJy46JywgUkVGX1JBTkdFIF0sXG4gIFsgUkVGX1JBTkdFLCAnOi4nLCBSRUZfUkFOR0UgXSxcbiAgWyBSRUZfUkFOR0UsICcuOi4nLCBSRUZfUkFOR0UgXSxcbiAgWyBSRUZfUkFOR0UgXSxcbiAgWyBSRUZfQkVBTSBdLFxuICBbIFJFRl9URVJOQVJZIF0sXG4gIFsgQ09OVEVYVCwgJyEnLCBSRUZfUkFOR0UsICc6JywgUkVGX1JBTkdFIF0sXG4gIFsgQ09OVEVYVCwgJyEnLCBSRUZfUkFOR0UsICcuOicsIFJFRl9SQU5HRSBdLFxuICBbIENPTlRFWFQsICchJywgUkVGX1JBTkdFLCAnOi4nLCBSRUZfUkFOR0UgXSxcbiAgWyBDT05URVhULCAnIScsIFJFRl9SQU5HRSwgJy46LicsIFJFRl9SQU5HRSBdLFxuICBbIENPTlRFWFQsICchJywgUkVGX1JBTkdFIF0sXG4gIFsgQ09OVEVYVCwgJyEnLCBSRUZfQkVBTSBdLFxuICBbIENPTlRFWFQsICchJywgUkVGX1RFUk5BUlkgXSxcbiAgWyBDT05URVhUX1FVT1RFLCAnIScsIFJFRl9SQU5HRSwgJzonLCBSRUZfUkFOR0UgXSxcbiAgWyBDT05URVhUX1FVT1RFLCAnIScsIFJFRl9SQU5HRSwgJy46JywgUkVGX1JBTkdFIF0sXG4gIFsgQ09OVEVYVF9RVU9URSwgJyEnLCBSRUZfUkFOR0UsICc6LicsIFJFRl9SQU5HRSBdLFxuICBbIENPTlRFWFRfUVVPVEUsICchJywgUkVGX1JBTkdFLCAnLjouJywgUkVGX1JBTkdFIF0sXG4gIFsgQ09OVEVYVF9RVU9URSwgJyEnLCBSRUZfUkFOR0UgXSxcbiAgWyBDT05URVhUX1FVT1RFLCAnIScsIFJFRl9CRUFNIF0sXG4gIFsgQ09OVEVYVF9RVU9URSwgJyEnLCBSRUZfVEVSTkFSWSBdLFxuICBbIFJFRl9OQU1FRCBdLFxuICBbIENPTlRFWFQsICchJywgUkVGX05BTUVEIF0sXG4gIFsgQ09OVEVYVF9RVU9URSwgJyEnLCBSRUZfTkFNRUQgXSxcbiAgWyBSRUZfU1RSVUNUIF0sXG4gIFsgUkVGX05BTUVELCBSRUZfU1RSVUNUIF0sXG4gIFsgQ09OVEVYVCwgJyEnLCBSRUZfTkFNRUQsIFJFRl9TVFJVQ1QgXSxcbiAgWyBDT05URVhUX1FVT1RFLCAnIScsIFJFRl9OQU1FRCwgUkVGX1NUUlVDVCBdXG5dO1xuXG4vLyB2YWxpZCB0b2tlbiBydW5zIGFyZSBjb252ZXJ0ZWQgdG8gYSB0cmVlIHN0cnVjdHVyZVxuY29uc3QgcmVmUGFydHNUcmVlID0ge307XG5mdW5jdGlvbiBwYWNrTGlzdCAoZiwgbm9kZSkge1xuICBpZiAoZi5sZW5ndGgpIHtcbiAgICBjb25zdCBrZXkgPSBmWzBdO1xuICAgIG5vZGVba2V5XSA9IG5vZGVba2V5XSB8fCB7fTtcbiAgICBwYWNrTGlzdChmLnNsaWNlKDEpLCBub2RlW2tleV0pO1xuICB9XG4gIGVsc2Uge1xuICAgIG5vZGVbRU5EXSA9IHRydWU7XG4gIH1cbn1cbnZhbGlkUnVuc01lcmdlLmZvckVhY2gocnVuID0+IHBhY2tMaXN0KHJ1bi5jb25jYXQoKS5yZXZlcnNlKCksIHJlZlBhcnRzVHJlZSkpO1xuXG4vLyBhdHRlbXB0IHRvIG1hdGNoIGEgYmFja3dhcmRzIHJ1biBvZiB0b2tlbnMgZnJvbSBhIGdpdmVuIHBvaW50XG4vLyB0byBhIHBhdGggaW4gdGhlIHRyZWVcbmNvbnN0IG1hdGNoZXIgPSAodG9rZW5zLCBjdXJyTm9kZSwgYW5jaG9ySW5kZXgsIGluZGV4ID0gMCkgPT4ge1xuICBjb25zdCB0b2tlbiA9IHRva2Vuc1thbmNob3JJbmRleCAtIGluZGV4XTtcbiAgaWYgKHRva2VuKSB7XG4gICAgY29uc3Qga2V5ID0gKHRva2VuLnR5cGUgPT09IE9QRVJBVE9SKSA/IHRva2VuLnZhbHVlIDogdG9rZW4udHlwZTtcbiAgICBpZiAoa2V5IGluIGN1cnJOb2RlKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlcih0b2tlbnMsIGN1cnJOb2RlW2tleV0sIGFuY2hvckluZGV4LCBpbmRleCArIDEpO1xuICAgIH1cbiAgfVxuICBpZiAoY3Vyck5vZGVbRU5EXSkge1xuICAgIC8vIHdlIG1heSBlbmQgaGVyZSBzbyB0aGlzIGlzIGEgbWF0Y2hcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cbiAgLy8gbm8gbWF0Y2hcbiAgcmV0dXJuIDA7XG59O1xuXG4vKipcbiAqIE1lcmdlcyBjb250ZXh0IHdpdGggcmVmZXJlbmNlIHRva2VucyBhcyBwb3NzaWJsZSBpbiBhIGxpc3Qgb2YgdG9rZW5zLlxuICpcbiAqIFdoZW4gZ2l2ZW4gYSB0b2tlbmxpc3QsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIG5ldyBsaXN0IHdpdGggcmFuZ2VzIHJldHVybmVkXG4gKiBhcyB3aG9sZSByZWZlcmVuY2VzIChgU2hlZXQxIUExOkIyYCkgcmF0aGVyIHRoYW4gc2VwYXJhdGUgdG9rZW5zIGZvciBlYWNoXG4gKiBwYXJ0OiAoYFNoZWV0MWAsYCFgLGBBMWAsYDpgLGBCMmApLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VG9rZW4+fSB0b2tlbmxpc3QgQW4gYXJyYXkgb2YgdG9rZW5zIChmcm9tIGB0b2tlbml6ZSgpYClcbiAqIEByZXR1cm5zIHtBcnJheTxUb2tlbj59IEEgbmV3IGxpc3Qgb2YgdG9rZW5zIHdpdGggcmFuZ2UgcGFydHMgbWVyZ2VkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VSZWZUb2tlbnMgKHRva2VubGlzdCkge1xuICBjb25zdCBmaW5hbFRva2VucyA9IFtdO1xuICAvLyB0aGlzIHNlZWtzIGJhY2t3YXJkcyBiZWNhdXNlIGl0J3MgcmVhbGx5IHRoZSByYW5nZSBwYXJ0XG4gIC8vIHRoYXQgY29udHJvbHMgd2hhdCBjYW4gYmUgam9pbmVkLlxuICBmb3IgKGxldCBpID0gdG9rZW5saXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGV0IHRva2VuID0gdG9rZW5saXN0W2ldO1xuICAgIGNvbnN0IHZhbGlkID0gbWF0Y2hlcih0b2tlbmxpc3QsIHJlZlBhcnRzVHJlZSwgaSk7XG4gICAgaWYgKHZhbGlkKSB7XG4gICAgICBjb25zdCB0b01lcmdlID0gdG9rZW5saXN0LnNsaWNlKGkgLSB2YWxpZCArIDEsIGkgKyAxKTtcbiAgICAgIC8vIHVzZSB0aGUgbWV0YSBwcm9wZXJ0aWVzIGZyb20gdGhlIFwiZmlyc3RcIiB0b2tlbiAocmlnaHQtbW9zdCB0b2tlbilcbiAgICAgIHRva2VuID0geyAuLi50b2tlbiB9O1xuICAgICAgdG9rZW4udmFsdWUgPSB0b01lcmdlLm1hcChkID0+IGQudmFsdWUpLmpvaW4oJycpO1xuICAgICAgLy8gYWRqdXN0IHRoZSBvZmZzZXRzIHRvIGluY2x1ZGUgYWxsIHRoZSB0ZXh0XG4gICAgICBpZiAodG9rZW4ubG9jICYmIHRvTWVyZ2VbMF0ubG9jKSB7XG4gICAgICAgIHRva2VuLmxvY1swXSA9IHRvTWVyZ2VbMF0ubG9jWzBdO1xuICAgICAgfVxuICAgICAgaSAtPSB2YWxpZCAtIDE7XG4gICAgfVxuICAgIGZpbmFsVG9rZW5zLnVuc2hpZnQodG9rZW4pO1xuICB9XG4gIHJldHVybiBmaW5hbFRva2Vucztcbn1cbiIsImltcG9ydCB7XG4gIEZYX1BSRUZJWCxcbiAgTkVXTElORSxcbiAgTlVNQkVSLFxuICBPUEVSQVRPUixcbiAgUkVGX05BTUVELFxuICBTVFJJTkcsXG4gIFVOS05PV04sXG4gIFdISVRFU1BBQ0UsXG4gIEZVTkNUSU9OLFxuICBPUEVSQVRPUl9UUklNLFxuICBSRUZfUkFOR0Vcbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgbGV4ZXJzIH0gZnJvbSAnLi9sZXhlclBhcnRzLmpzJztcbmltcG9ydCB7IG1lcmdlUmVmVG9rZW5zIH0gZnJvbSAnLi9tZXJnZVJlZlRva2Vucy5qcyc7XG5cbmNvbnN0IGlzVHlwZSA9ICh0LCB0eXBlKSA9PiB0ICYmIHQudHlwZSA9PT0gdHlwZTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIHdpdGhMb2NhdGlvbjogZmFsc2UsXG4gIG1lcmdlUmVmczogdHJ1ZSxcbiAgYWxsb3dUZXJuYXJ5OiBmYWxzZSxcbiAgbmVnYXRpdmVOdW1iZXJzOiB0cnVlLFxuICByMWMxOiBmYWxzZVxufTtcblxuY29uc3QgaXNUZXh0VG9rZW4gPSB0b2tlbiA9PiB7XG4gIHJldHVybiAoXG4gICAgdG9rZW4udHlwZSA9PT0gUkVGX05BTUVEIHx8XG4gICAgdG9rZW4udHlwZSA9PT0gRlVOQ1RJT05cbiAgKTtcbn07XG5cbmNvbnN0IGNhdXNlc0JpbmFyeU1pbnVzID0gdG9rZW4gPT4ge1xuICByZXR1cm4gIWlzVHlwZSh0b2tlbiwgT1BFUkFUT1IpIHx8IChcbiAgICB0b2tlbi52YWx1ZSA9PT0gJyUnIHx8XG4gICAgdG9rZW4udmFsdWUgPT09ICd9JyB8fFxuICAgIHRva2VuLnZhbHVlID09PSAnKScgfHxcbiAgICB0b2tlbi52YWx1ZSA9PT0gJyMnXG4gICk7XG59O1xuXG5mdW5jdGlvbiBmaXhSQ05hbWVzICh0b2tlbnMpIHtcbiAgbGV0IHdpdGhpbkNhbGwgPSAwO1xuICBsZXQgcGFyZW5EZXB0aCA9IDA7XG4gIGxldCBsYXN0VG9rZW47XG4gIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKSB7XG4gICAgaWYgKHRva2VuLnR5cGUgPT09IE9QRVJBVE9SKSB7XG4gICAgICBpZiAodG9rZW4udmFsdWUgPT09ICcoJykge1xuICAgICAgICBwYXJlbkRlcHRoKys7XG4gICAgICAgIGlmIChsYXN0VG9rZW4udHlwZSA9PT0gRlVOQ1RJT04pIHtcbiAgICAgICAgICBjb25zdCB2ID0gbGFzdFRva2VuLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgaWYgKHYgPT09ICdsYW1iZGEnIHx8IHYgPT09ICdsZXQnKSB7XG4gICAgICAgICAgICB3aXRoaW5DYWxsID0gcGFyZW5EZXB0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRva2VuLnZhbHVlID09PSAnKScpIHtcbiAgICAgICAgcGFyZW5EZXB0aC0tO1xuICAgICAgICBpZiAocGFyZW5EZXB0aCA8IHdpdGhpbkNhbGwpIHtcbiAgICAgICAgICB3aXRoaW5DYWxsID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh3aXRoaW5DYWxsICYmIHRva2VuLnR5cGUgPT09IFVOS05PV04gJiYgL15bcmNdJC8udGVzdCh0b2tlbi52YWx1ZSkpIHtcbiAgICAgIHRva2VuLnR5cGUgPSBSRUZfTkFNRUQ7XG4gICAgfVxuICAgIGxhc3RUb2tlbiA9IHRva2VuO1xuICB9XG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2tlbnMgKGZ4LCB0b2tlbkhhbmRsZXJzLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgY29uc3QgeyB3aXRoTG9jYXRpb24sIG1lcmdlUmVmcywgbmVnYXRpdmVOdW1iZXJzIH0gPSBvcHRzO1xuICBjb25zdCB0b2tlbnMgPSBbXTtcbiAgbGV0IHBvcyA9IDA7XG4gIGxldCBsZXRPckxhbWJkYSA9IDA7XG4gIGxldCB1bmtub3duUkMgPSAwO1xuICBjb25zdCB0cmltT3BzID0gW107XG5cbiAgbGV0IHRhaWwwID0gbnVsbDsgLy8gbGFzdCBub24td2hpdGVzcGFjZSB0b2tlblxuICBsZXQgdGFpbDEgPSBudWxsOyAvLyBwZW51bHRpbWF0ZSBub24td2hpdGVzcGFjZSB0b2tlblxuICBsZXQgbGFzdFRva2VuID0gbnVsbDsgLy8gbGFzdCB0b2tlblxuICBjb25zdCBwdXNoVG9rZW4gPSB0b2tlbiA9PiB7XG4gICAgY29uc3QgaXNDdXJyVW5rbm93biA9IHRva2VuLnR5cGUgPT09IFVOS05PV047XG4gICAgY29uc3QgaXNMYXN0VW5rbm93biA9IGxhc3RUb2tlbiAmJiBsYXN0VG9rZW4udHlwZSA9PT0gVU5LTk9XTjtcbiAgICBpZiAobGFzdFRva2VuICYmIChcbiAgICAgIChpc0N1cnJVbmtub3duICYmIGlzTGFzdFVua25vd24pIHx8XG4gICAgICAoaXNDdXJyVW5rbm93biAmJiBpc1RleHRUb2tlbihsYXN0VG9rZW4pKSB8fFxuICAgICAgKGlzTGFzdFVua25vd24gJiYgaXNUZXh0VG9rZW4odG9rZW4pKVxuICAgICkpIHtcbiAgICAgIC8vIFVOS05PV04gdG9rZW5zIFwiY29udGFtaW5hdGVcIiBzaWJsaW5nIHRleHQgdG9rZW5zXG4gICAgICBsYXN0VG9rZW4udmFsdWUgKz0gdG9rZW4udmFsdWU7XG4gICAgICBsYXN0VG9rZW4udHlwZSA9IFVOS05PV047XG4gICAgICBpZiAod2l0aExvY2F0aW9uKSB7XG4gICAgICAgIGxhc3RUb2tlbi5sb2NbMV0gPSB0b2tlbi5sb2NbMV07XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKHRva2VuLnR5cGUgPT09IE9QRVJBVE9SX1RSSU0pIHtcbiAgICAgICAgdHJpbU9wcy5wdXNoKHRva2Vucy5sZW5ndGgpO1xuICAgICAgICB0b2tlbi50eXBlID0gVU5LTk9XTjtcbiAgICAgIH1cbiAgICAgIC8vIHB1c2ggdG9rZW4gYXMgbm9ybWFsbHlcbiAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgIGxhc3RUb2tlbiA9IHRva2VuO1xuICAgICAgaWYgKHRva2VuLnR5cGUgIT09IFdISVRFU1BBQ0UgJiYgdG9rZW4udHlwZSAhPT0gTkVXTElORSkge1xuICAgICAgICB0YWlsMSA9IHRhaWwwO1xuICAgICAgICB0YWlsMCA9IHRva2VuO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBpZiAoZnhbMF0gPT09ICc9Jykge1xuICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgdHlwZTogRlhfUFJFRklYLFxuICAgICAgdmFsdWU6ICc9JyxcbiAgICAgIC4uLih3aXRoTG9jYXRpb24gPyB7IGxvYzogWyAwLCAxIF0gfSA6IHt9KVxuICAgIH07XG4gICAgcG9zKys7XG4gICAgcHVzaFRva2VuKHRva2VuKTtcbiAgfVxuXG4gIHdoaWxlIChwb3MgPCBmeC5sZW5ndGgpIHtcbiAgICBjb25zdCBzdGFydFBvcyA9IHBvcztcbiAgICBjb25zdCBzID0gZnguc2xpY2UocG9zKTtcbiAgICBsZXQgdG9rZW5UeXBlID0gJyc7XG4gICAgbGV0IHRva2VuVmFsdWUgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2VuSGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHQgPSB0b2tlbkhhbmRsZXJzW2ldKHMsIG9wdHMpO1xuICAgICAgaWYgKHQpIHtcbiAgICAgICAgdG9rZW5UeXBlID0gdC50eXBlO1xuICAgICAgICB0b2tlblZhbHVlID0gdC52YWx1ZTtcbiAgICAgICAgcG9zICs9IHRva2VuVmFsdWUubGVuZ3RoO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRva2VuVHlwZSkge1xuICAgICAgdG9rZW5UeXBlID0gVU5LTk9XTjtcbiAgICAgIHRva2VuVmFsdWUgPSBmeFtwb3NdO1xuICAgICAgcG9zKys7XG4gICAgfVxuXG4gICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICB0eXBlOiB0b2tlblR5cGUsXG4gICAgICB2YWx1ZTogdG9rZW5WYWx1ZSxcbiAgICAgIC4uLih3aXRoTG9jYXRpb24gPyB7IGxvYzogWyBzdGFydFBvcywgcG9zIF0gfSA6IHt9KVxuICAgIH07XG5cbiAgICAvLyBtYWtlIGEgbm90ZSBpZiB3ZSBmb3VuZCBhIGxldC9sYW1iZGEgY2FsbFxuICAgIGlmIChsYXN0VG9rZW4gJiYgbGFzdFRva2VuLnR5cGUgPT09IEZVTkNUSU9OICYmIHRva2VuVmFsdWUgPT09ICcoJykge1xuICAgICAgY29uc3QgbGFzdExDID0gbGFzdFRva2VuLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAobGFzdExDID09PSAnbGFtYmRhJyB8fCBsYXN0TEMgPT09ICdsZXQnKSB7XG4gICAgICAgIGxldE9yTGFtYmRhKys7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG1ha2UgYSBub3RlIGlmIHdlIGZvdW5kIGEgUiBvciBDIHVua25vd25cbiAgICBpZiAodG9rZW5UeXBlID09PSBVTktOT1dOKSB7XG4gICAgICBjb25zdCB2YWxMQyA9IHRva2VuVmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHVua25vd25SQyArPSAodmFsTEMgPT09ICdyJyB8fCB2YWxMQyA9PT0gJ2MnKSA/IDEgOiAwO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGZvciB0ZXJtaW5hdGlvblxuICAgIGlmICh0b2tlblR5cGUgPT09IFNUUklORykge1xuICAgICAgY29uc3QgbCA9IHRva2VuVmFsdWUubGVuZ3RoO1xuICAgICAgaWYgKHRva2VuVmFsdWUgPT09ICdcIlwiJykge1xuICAgICAgICAvLyBjb21tb24gY2FzZSB0aGF0IElTIHRlcm1pbmF0ZWRcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRva2VuVmFsdWUgPT09ICdcIicgfHwgdG9rZW5WYWx1ZVtsIC0gMV0gIT09ICdcIicpIHtcbiAgICAgICAgdG9rZW4udW50ZXJtaW5hdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRva2VuVmFsdWUgIT09ICdcIlwiJyAmJiB0b2tlblZhbHVlW2wgLSAyXSA9PT0gJ1wiJykge1xuICAgICAgICBsZXQgcCA9IGwgLSAxO1xuICAgICAgICB3aGlsZSAodG9rZW5WYWx1ZVtwXSA9PT0gJ1wiJykgeyBwLS07IH1cbiAgICAgICAgY29uc3QgYXRTdGFydCA9IChwICsgMSk7XG4gICAgICAgIGNvbnN0IG9kZE51bSA9ICgobCAtIHAgKyAxKSAlIDIgPT09IDApO1xuICAgICAgICBpZiAoIWF0U3RhcnQgXiBvZGROdW0pIHtcbiAgICAgICAgICB0b2tlbi51bnRlcm1pbmF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5lZ2F0aXZlTnVtYmVycyAmJiB0b2tlblR5cGUgPT09IE5VTUJFUikge1xuICAgICAgY29uc3QgbGFzdDEgPSBsYXN0VG9rZW47XG4gICAgICAvLyBkbyB3ZSBoYXZlIGEgbnVtYmVyIHByZWNlZGVkIGJ5IGEgbWludXM/XG4gICAgICBpZiAobGFzdDEgJiYgaXNUeXBlKGxhc3QxLCBPUEVSQVRPUikgJiYgbGFzdDEudmFsdWUgPT09ICctJykge1xuICAgICAgICAvLyBtaXNzaW5nIHRhaWwxIG1lYW5zIHdlIGFyZSBhdCB0aGUgc3RhcnQgb2YgdGhlIHN0cmVhbVxuICAgICAgICBpZiAoXG4gICAgICAgICAgIXRhaWwxIHx8XG4gICAgICAgICAgaXNUeXBlKHRhaWwxLCBGWF9QUkVGSVgpIHx8XG4gICAgICAgICAgIWNhdXNlc0JpbmFyeU1pbnVzKHRhaWwxKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBtaW51cyA9IHRva2Vucy5wb3AoKTtcbiAgICAgICAgICB0b2tlbi52YWx1ZSA9ICctJyArIHRva2VuVmFsdWU7XG4gICAgICAgICAgaWYgKHdpdGhMb2NhdGlvbikge1xuICAgICAgICAgICAgLy8gZW5zdXJlIG9mZnNldHMgYXJlIHVwIHRvIGRhdGVcbiAgICAgICAgICAgIHRva2VuLmxvY1swXSA9IG1pbnVzLmxvY1swXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gbmV4dCBzdGVwIHRyaWVzIHRvIGNvdW50ZXIgdGhlIHNjcmV3aW5nIGFyb3VuZCB3aXRoIHRoZSB0YWlsaW5nXG4gICAgICAgICAgLy8gaXQgc2hvdWxkIGJlIGNvcnJlY3QgYWdhaW4gb25jZSB3ZSBwdXNoVG9rZW4oKVxuICAgICAgICAgIHRhaWwwID0gdGFpbDE7XG4gICAgICAgICAgbGFzdFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHB1c2hUb2tlbih0b2tlbik7XG4gIH1cblxuICAvLyBpZiB3ZSBlbmNvdW50ZXJlZCBib3RoIGEgTEFNQkRBL0xFVCBjYWxsLCBhbmQgdW5rbm93biAncicgb3IgJ2MnIHRva2Vuc1xuICAvLyB3ZSdsbCB0dXJuIHRoZSB1bmtub3duIHRva2VucyBpbnRvIG5hbWVzIHdpdGhpbiB0aGUgY2FsbC5cbiAgaWYgKHVua25vd25SQyAmJiBsZXRPckxhbWJkYSkge1xuICAgIGZpeFJDTmFtZXModG9rZW5zKTtcbiAgfVxuXG4gIC8vIEFueSBPUEVSQVRPUl9UUklNIHRva2VucyBoYXZlIGJlZW4gaW5kZXhlZCBhbHJlYWR5LCB0aGV5IG5vdyBuZWVkIHRvIGJlXG4gIC8vIGVpdGhlciB0dXJuZWQgaW50byBPUEVSQVRPUnMgb3IgVU5LTk9XTnMuIFRyaW0gb3BlcmF0b3JzIGFyZSBvbmx5IGFsbG93ZWRcbiAgLy8gYmV0d2VlbiB0d28gUkVGX1JBTkdFIHRva2VucyBhcyB0aGV5IGFyZSBub3QgdmFsaWQgaW4gZXhwcmVzc2lvbnMgYXMgZnVsbFxuICAvLyBvcGVyYXRvcnMuXG4gIGZvciAoY29uc3QgaW5kZXggb2YgdHJpbU9wcykge1xuICAgIGNvbnN0IGJlZm9yZSA9IHRva2Vuc1tpbmRleCAtIDFdO1xuICAgIGNvbnN0IGFmdGVyID0gdG9rZW5zW2luZGV4IC0gMV07XG4gICAgaWYgKGJlZm9yZSAmJiBiZWZvcmUudHlwZSA9PT0gUkVGX1JBTkdFICYmIGFmdGVyICYmIGFmdGVyLnR5cGUgPT09IFJFRl9SQU5HRSkge1xuICAgICAgdG9rZW5zW2luZGV4XS50eXBlID0gT1BFUkFUT1I7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdG9rZW5zW2luZGV4XS50eXBlID0gVU5LTk9XTjtcbiAgICB9XG4gIH1cblxuICBpZiAobWVyZ2VSZWZzKSB7XG4gICAgcmV0dXJuIG1lcmdlUmVmVG9rZW5zKHRva2Vucyk7XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG4vKipcbiAqIEJyZWFrcyBhIHN0cmluZyBmb3JtdWxhIGludG8gYSBsaXN0IG9mIHRva2Vucy5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgb3V0cHV0IHdpbGwgYmUgYW4gYXJyYXkgb2Ygb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIHRva2VuczpcbiAqXG4gKiBgYGBqc1xuICogW1xuICogICB7IHR5cGU6IEZYX1BSRUZJWCwgdmFsdWU6ICc9JyB9LFxuICogICB7IHR5cGU6IEZVTkNUSU9OLCB2YWx1ZTogJ1NVTScgfSxcbiAqICAgeyB0eXBlOiBPUEVSQVRPUiwgdmFsdWU6ICcoJyB9LFxuICogICB7IHR5cGU6IFJFRl9SQU5HRSwgdmFsdWU6ICdBMTpCMicgfSxcbiAqICAgeyB0eXBlOiBPUEVSQVRPUiwgdmFsdWU6ICcpJyB9XG4gKiBdXG4gKiBgYGBcbiAqXG4gKiBUb2tlbiB0eXBlcyBtYXkgYmUgZm91bmQgYXMgYW4gT2JqZWN0IGFzIHRoZVxuICogW2B0b2tlblR5cGVzYCBleHBvcnRde0BsaW5rIHRva2VuVHlwZXN9IG9uIHRoZSBwYWNrYWdlXG4gKiAoYGltcG9ydCB7dG9rZW5UeXBlc30gZnJvbSAnQGJvcmdhci9meCc7YCkuXG4gKlxuICogVG8gc3VwcG9ydCBzeW50YXggaGlnaGxpZ2h0aW5nIGFzIHlvdSB0eXBlLCBgU1RSSU5HYCB0b2tlbnMgYXJlIGFsbG93ZWQgdG8gYmVcbiAqIFwidW50ZXJtaW5hdGVkXCIuIEZvciBleGFtcGxlLCB0aGUgaW5jb21wbGV0ZSBmb3JtdWxhIGA9XCJIZWxsbyB3b3JsZGAgd291bGQgYmVcbiAqIHRva2VuaXplZCBhczpcbiAqXG4gKiBgYGBqc1xuICogW1xuICogICB7IHR5cGU6IEZYX1BSRUZJWCwgdmFsdWU6ICc9JyB9LFxuICogICB7IHR5cGU6IFNUUklORywgdmFsdWU6ICdcIkhlbGxvIHdvcmxkJywgdW50ZXJtaW5hdGVkOiB0cnVlIH0sXG4gKiBdXG4gKiBgYGBcbiAqXG4gKiBAc2VlIHRva2VuVHlwZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtdWxhIEFuIEV4Y2VsIGZvcm11bGEgc3RyaW5nIChhbiBFeGNlbCBleHByZXNzaW9uKSBvciBhbiBhcnJheSBvZiB0b2tlbnMuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dICBPcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFsbG93VGVybmFyeT1mYWxzZV0gIEVuYWJsZXMgdGhlIHJlY29nbml0aW9uIG9mIHRlcm5hcnkgcmFuZ2VzIGluIHRoZSBzdHlsZSBvZiBgQTE6QWAgb3IgYEExOjFgLiBUaGVzZSBhcmUgc3VwcG9ydGVkIGJ5IEdvb2dsZSBTaGVldHMgYnV0IG5vdCBFeGNlbC4gU2VlOiBSZWZlcmVuY2VzLm1kLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5uZWdhdGl2ZU51bWJlcnM9dHJ1ZV0gIE1lcmdlcyB1bmFyeSBtaW51c2VzIHdpdGggdGhlaXIgaW1tZWRpYXRlbHkgZm9sbG93aW5nIG51bWJlciB0b2tlbnMgKGAtYCxgMWApID0+IGAtMWAgKGFsdGVybmF0aXZlbHkgdGhlc2Ugd2lsbCBiZSB1bmFyeSBvcGVyYXRpb25zIGluIHRoZSB0cmVlKS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucjFjMT1mYWxzZV0gIFJhbmdlcyBhcmUgZXhwZWN0ZWQgdG8gYmUgaW4gdGhlIFIxQzEgc3R5bGUgZm9ybWF0IHJhdGhlciB0aGFuIHRoZSBtb3JlIHBvcHVsYXIgQTEgc3R5bGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLndpdGhMb2NhdGlvbj10cnVlXSAgTm9kZXMgd2lsbCBpbmNsdWRlIHNvdXJjZSBwb3NpdGlvbiBvZmZzZXRzIHRvIHRoZSB0b2tlbnM6IGB7IGxvYzogWyBzdGFydCwgZW5kIF0gfWBcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubWVyZ2VSZWZzPXRydWVdICBTaG91bGQgcmFuZ2VzIGJlIHJldHVybmVkIGFzIHdob2xlIHJlZmVyZW5jZXMgKGBTaGVldDEhQTE6QjJgKSBvciBhcyBzZXBhcmF0ZSB0b2tlbnMgZm9yIGVhY2ggcGFydDogKGBTaGVldDFgLGAhYCxgQTFgLGA6YCxgQjJgKS4gVGhpcyBpcyB0aGUgc2FtZSBhcyBjYWxsaW5nIFtgbWVyZ2VSZWZUb2tlbnNgXSgjbWVyZ2VSZWZUb2tlbnMpXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnhsc3g9ZmFsc2VdICBFbmFibGVzIGEgYFsxXVNoZWV0MSFBMWAgb3IgYFsxXSFuYW1lYCBzeW50YXggZm9ybSBmb3IgZXh0ZXJuYWwgd29ya2Jvb2tzIGZvdW5kIG9ubHkgaW4gWExTWCBmaWxlcy5cbiAqIEByZXR1cm5zIHtBcnJheTxUb2tlbj59IEFuIEFTVCBvZiBub2Rlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemUgKGZvcm11bGEsIG9wdGlvbnMgPSB7fSkge1xuICByZXR1cm4gZ2V0VG9rZW5zKGZvcm11bGEsIGxleGVycywgb3B0aW9ucyk7XG59XG4iLCJpbXBvcnQge1xuICBSRUZfUkFOR0UsIFJFRl9CRUFNLCBSRUZfTkFNRUQsIFJFRl9URVJOQVJZLCBSRUZfU1RSVUNULFxuICBGWF9QUkVGSVgsIFdISVRFU1BBQ0UsIE5FV0xJTkUsXG4gIEZVTkNUSU9OLCBPUEVSQVRPUixcbiAgRVJST1IsIFNUUklORywgTlVNQkVSLCBCT09MRUFOXG59IGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB0b2tlbiBpcyBhIHJhbmdlLlxuICpcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBpbnB1dCBpcyBhIHRva2VuIHRoYXQgaGFzIGEgdHlwZSBvZiBlaXRoZXIgUkVGX1JBTkdFXG4gKiAoYEExYCBvciBgQTE6QjJgKSwgUkVGX1RFUk5BUlkgKGBBMTpBYCwgYEExOjFgLCBgMTpBMWAsIG9yIGBBOkExYCksIG9yXG4gKiBSRUZfQkVBTSAoYEE6QWAgb3IgYDE6MWApLiBJbiBhbGwgb3RoZXIgY2FzZXMgYGZhbHNlYCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0ge2FueX0gdG9rZW4gQSB0b2tlblxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCB0b2tlbiBpcyByYW5nZSwgRmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSYW5nZSAodG9rZW4pIHtcbiAgcmV0dXJuICEhdG9rZW4gJiYgKFxuICAgIHRva2VuLnR5cGUgPT09IFJFRl9SQU5HRSB8fFxuICAgIHRva2VuLnR5cGUgPT09IFJFRl9CRUFNIHx8XG4gICAgdG9rZW4udHlwZSA9PT0gUkVGX1RFUk5BUllcbiAgKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB0b2tlbiBpcyBhIHJlZmVyZW5jZS5cbiAqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgaW5wdXQgaXMgYSB0b2tlbiBvZiB0eXBlIFJFRl9SQU5HRSAoYEExYCBvciBgQTE6QjJgKSxcbiAqIFJFRl9URVJOQVJZIChgQTE6QWAsIGBBMToxYCwgYDE6QTFgLCBvciBgQTpBMWApLCBSRUZfQkVBTSAoYEE6QWAgb3IgYDE6MWApLFxuICogb3IgUkVGX05BTUVEIChgbXlyYW5nZWApLiBJbiBhbGwgb3RoZXIgY2FzZXMgYGZhbHNlYCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0ge2FueX0gdG9rZW4gVGhlIHRva2VuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHRva2VuIGlzIHJlZmVyZW5jZSwgRmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSZWZlcmVuY2UgKHRva2VuKSB7XG4gIHJldHVybiAhIXRva2VuICYmIChcbiAgICB0b2tlbi50eXBlID09PSBSRUZfUkFOR0UgfHxcbiAgICB0b2tlbi50eXBlID09PSBSRUZfQkVBTSB8fFxuICAgIHRva2VuLnR5cGUgPT09IFJFRl9URVJOQVJZIHx8XG4gICAgdG9rZW4udHlwZSA9PT0gUkVGX1NUUlVDVCB8fFxuICAgIHRva2VuLnR5cGUgPT09IFJFRl9OQU1FRFxuICApO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIHRva2VuIGlzIGEgbGl0ZXJhbC5cbiAqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgaW5wdXQgaXMgYSB0b2tlbiBvZiB0eXBlIEJPT0xFQU4gKGBUUlVFYCBvciBgRkFMU0VgKSxcbiAqIEVSUk9SIChgI1ZBTFVFIWApLCBOVU1CRVIgKDEyMy40KSwgb3IgU1RSSU5HIChgXCJsb3JlbSBpcHN1bVwiYCkuIEluIGFsbCBvdGhlclxuICogY2FzZXMgYGZhbHNlYCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0ge2FueX0gdG9rZW4gVGhlIHRva2VuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHRva2VuIGlzIGxpdGVyYWwsIEZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTGl0ZXJhbCAodG9rZW4pIHtcbiAgcmV0dXJuICEhdG9rZW4gJiYgKFxuICAgIHRva2VuLnR5cGUgPT09IEJPT0xFQU4gfHxcbiAgICB0b2tlbi50eXBlID09PSBFUlJPUiB8fFxuICAgIHRva2VuLnR5cGUgPT09IE5VTUJFUiB8fFxuICAgIHRva2VuLnR5cGUgPT09IFNUUklOR1xuICApO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIHRva2VuIGlzIGFuIGVycm9yLlxuICpcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBpbnB1dCBpcyBhIHRva2VuIG9mIHR5cGUgRVJST1IgKGAjVkFMVUUhYCkuIEluIGFsbFxuICogb3RoZXIgY2FzZXMgYGZhbHNlYCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0ge2FueX0gdG9rZW4gVGhlIHRva2VuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHRva2VuIGlzIGVycm9yLCBGYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Vycm9yICh0b2tlbikge1xuICByZXR1cm4gISF0b2tlbiAmJiB0b2tlbi50eXBlID09PSBFUlJPUjtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB0b2tlbiBpcyB3aGl0ZXNwYWNlLlxuICpcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBpbnB1dCBpcyBhIHRva2VuIG9mIHR5cGUgV0hJVEVTUEFDRSAoYCBgKSBvclxuICogTkVXTElORSAoYFxcbmApLiBJbiBhbGwgb3RoZXIgY2FzZXMgYGZhbHNlYCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0ge2FueX0gdG9rZW4gVGhlIHRva2VuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHRva2VuIGlzIHdoaXRlc3BhY2UsIEZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAodG9rZW4pIHtcbiAgcmV0dXJuICEhdG9rZW4gJiYgKFxuICAgIHRva2VuLnR5cGUgPT09IFdISVRFU1BBQ0UgfHxcbiAgICB0b2tlbi50eXBlID09PSBORVdMSU5FXG4gICk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdG9rZW4gaXMgYSBmdW5jdGlvbi5cbiAqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgaW5wdXQgaXMgYSB0b2tlbiBvZiB0eXBlIEZVTkNUSU9OLlxuICogSW4gYWxsIG90aGVyIGNhc2VzIGBmYWxzZWAgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHthbnl9IHRva2VuIFRoZSB0b2tlblxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCB0b2tlbiBpcyBmdW5jdGlvbiwgRmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbiAodG9rZW4pIHtcbiAgcmV0dXJuICEhdG9rZW4gJiYgdG9rZW4udHlwZSA9PT0gRlVOQ1RJT047XG59XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGlucHV0IGlzIGEgdG9rZW4gb2YgdHlwZSBGWF9QUkVGSVggKGxlYWRpbmcgYD1gIGluXG4gKiBmb3JtdWxhKS4gSW4gYWxsIG90aGVyIGNhc2VzIGBmYWxzZWAgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHthbnl9IHRva2VuIFRoZSB0b2tlblxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCB0b2tlbiBpcyBlZmZlY3RzIHByZWZpeCwgRmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGeFByZWZpeCAodG9rZW4pIHtcbiAgcmV0dXJuICEhdG9rZW4gJiYgdG9rZW4udHlwZSA9PT0gRlhfUFJFRklYO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIHRva2VuIGlzIGFuIG9wZXJhdG9yLlxuICpcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBpbnB1dCBpcyBhIHRva2VuIG9mIHR5cGUgT1BFUkFUT1IgKGArYCBvciBgOmApLiBJbiBhbGxcbiAqIG90aGVyIGNhc2VzIGBmYWxzZWAgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHthbnl9IHRva2VuIFRoZSB0b2tlblxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCB0b2tlbiBpcyBvcGVyYXRvciwgRmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPcGVyYXRvciAodG9rZW4pIHtcbiAgcmV0dXJuICEhdG9rZW4gJiYgdG9rZW4udHlwZSA9PT0gT1BFUkFUT1I7XG59XG4iLCIvKlxuICogRXhjZWwgZm9ybXVsYSBsYW5ndWFnZSBwYXJzZXJcbiAqXG4gKiBUaGlzIHBhcnNlciBpcyBhIFRvcC1Eb3duIE9wZXJhdG9yIFByZWNlZGVuY2UgKFByYXR0KSBwYXJzZXIuIEl0J3MgYmFzZWQgb25cbiAqIHRoZSBvbmUgdGhhdCBEb3VnbGFzIENyb2NrZm9yZCBkZXNjcmliZXMgaW4gQ2hhcHRlciA5IG9mIHRoZSBPJ1JlaWxseSBib29rXG4gKiBCZXV0aWZ1bCBDb2RlIChodHRwOi8vY3JvY2tmb3JkLmNvbS9qYXZhc2NyaXB0L3Rkb3AvdGRvcC5odG1sKS5cbiAqXG4gKiBUaGUgcGFyc2VyIGhhbmRsZXMgbW9zdCBiYXNpYyB0aGluZ3MgRXhjZWwvU2hlZXRzIGRvIGV4Y2VwdDpcbiAqIGBTaGVldDE6U2hlZXQyIUExYCByZWZlcmVuY2VzIGNyb3NzIGNvbnRleHRzICgzRCByZWZlcmVuY2VzKVxuICovXG5pbXBvcnQge1xuICBpc1JlZmVyZW5jZSxcbiAgaXNMaXRlcmFsLFxuICBpc0Z1bmN0aW9uLFxuICBpc1doaXRlc3BhY2UsXG4gIGlzRnhQcmVmaXgsXG4gIGlzT3BlcmF0b3IsXG4gIGlzRXJyb3Jcbn0gZnJvbSAnLi9pc1R5cGUuanMnO1xuaW1wb3J0IHtcbiAgVU5BUlksXG4gIEJJTkFSWSxcbiAgUkVGRVJFTkNFLFxuICBMSVRFUkFMLFxuICBFUlJPUl9MSVRFUkFMLFxuICBDQUxMLFxuICBMQU1CREEsXG4gIEFSUkFZLFxuICBJREVOVElGSUVSLFxuICBOVU1CRVIsXG4gIEJPT0xFQU4sXG4gIEVSUk9SLFxuICBTVFJJTkcsXG4gIExFVCxcbiAgTEVUX0RFQ0wsXG4gIFJFRl9OQU1FRCxcbiAgUkVGX1NUUlVDVCxcbiAgUkVGX0JFQU1cbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG5pbXBvcnQgeyB0b2tlbml6ZSB9IGZyb20gJy4vbGV4ZXIuanMnO1xuXG5jb25zdCBFTkQgPSAnKEVORCknO1xuY29uc3QgRlVOQ1RJT04gPSAnKEZVTkNUSU9OKSc7XG5jb25zdCBXSElURVNQQUNFID0gJyhXSElURVNQQUNFKSc7XG5cbmNvbnN0IHJlZkZ1bmN0aW9ucyA9IFtcbiAgJ0FOQ0hPUkFSUkFZJyxcbiAgJ0NIT09TRScsXG4gICdEUk9QJyxcbiAgJ0lGJyxcbiAgJ0lGUycsXG4gICdJTkRFWCcsXG4gICdJTkRJUkVDVCcsXG4gICdMQU1CREEnLFxuICAnTEVUJyxcbiAgJ09GRlNFVCcsXG4gICdSRURVQ0UnLFxuICAnU0lOR0xFJyxcbiAgJ1NXSVRDSCcsXG4gICdUQUtFJyxcbiAgJ1RSSU1SQU5HRScsXG4gICdYTE9PS1VQJ1xuXTtcblxuY29uc3QgaXNSZWZlcmVuY2VGdW5jdGlvbk5hbWUgPSBmbk5hbWUgPT4ge1xuICByZXR1cm4gcmVmRnVuY3Rpb25zLmluY2x1ZGVzKGZuTmFtZS50b1VwcGVyQ2FzZSgpKTtcbn07XG5cbmNvbnN0IGlzUmVmZXJlbmNlVG9rZW4gPSAodG9rZW4sIGFsbG93T3BlcmF0b3JzID0gZmFsc2UpID0+IHtcbiAgY29uc3QgdmFsdWUgPSAodG9rZW4gJiYgdG9rZW4udmFsdWUpICsgJyc7XG4gIGlmIChpc1JlZmVyZW5jZSh0b2tlbikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoYWxsb3dPcGVyYXRvcnMgJiYgaXNPcGVyYXRvcih0b2tlbikgJiYgKHZhbHVlID09PSAnOicgfHwgdmFsdWUgPT09ICcsJyB8fCAhdmFsdWUudHJpbSgpKSkge1xuICAgIHJldHVybiB0cnVlOyAvLyBqb2luLCB1bmlvbiwgaW50ZXJzZWN0aW9uXG4gIH1cbiAgaWYgKGlzRnVuY3Rpb24odG9rZW4pICYmIGlzUmVmZXJlbmNlRnVuY3Rpb25OYW1lKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlOyAvLyBmdW5jdGlvbiB0aGF0IHlpZWxkcyByZWZlcmVuY2VcbiAgfVxuICBpZiAoaXNFcnJvcih0b2tlbikgJiYgdmFsdWUgPT09ICcjUkVGIScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5jb25zdCBpc1JlZmVyZW5jZU5vZGUgPSBub2RlID0+IHtcbiAgcmV0dXJuICghIW5vZGUpICYmIChcbiAgICAobm9kZS50eXBlID09PSBSRUZFUkVOQ0UpIHx8XG4gICAgKChub2RlLnR5cGUgPT09IEVSUk9SX0xJVEVSQUwgfHwgbm9kZS50eXBlID09PSBFUlJPUikgJiYgbm9kZS52YWx1ZSA9PT0gJyNSRUYhJykgfHxcbiAgICAobm9kZS50eXBlID09PSBCSU5BUlkgJiYgKFxuICAgICAgbm9kZS5vcGVyYXRvciA9PT0gJzonIHx8XG4gICAgICBub2RlLm9wZXJhdG9yID09PSAnICcgfHxcbiAgICAgIG5vZGUub3BlcmF0b3IgPT09ICcsJylcbiAgICApIHx8XG4gICAgaXNSZWZlcmVuY2Uobm9kZSkgfHxcbiAgICAobm9kZS50eXBlID09PSBDQUxMICYmIGlzUmVmZXJlbmNlRnVuY3Rpb25OYW1lKG5vZGUuY2FsbGVlLm5hbWUpKVxuICApO1xufTtcblxuY29uc3Qgc3ltYm9sVGFibGUgPSB7fTtcbmxldCBjdXJyZW50Tm9kZTtcbmxldCB0b2tlbnM7XG5sZXQgdG9rZW5JbmRleDtcbmxldCBwZXJtaXRBcnJheVJhbmdlcyA9IGZhbHNlO1xubGV0IHBlcm1pdEFycmF5Q2FsbHMgPSBmYWxzZTtcblxuZnVuY3Rpb24gaGFsdCAobWVzc2FnZSwgYXRJbmRleCA9IG51bGwpIHtcbiAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICBlcnIuc291cmNlID0gdG9rZW5zLm1hcChkID0+IGQudmFsdWUpLmpvaW4oJycpO1xuICBlcnIuc291cmNlT2Zmc2V0ID0gdG9rZW5zXG4gICAgLnNsaWNlKDAsIGF0SW5kZXggPz8gdG9rZW5JbmRleClcbiAgICAucmVkdWNlKChhLCBkKSA9PiBhICsgZC52YWx1ZS5sZW5ndGgsIDApO1xuICB0aHJvdyBlcnI7XG59XG5cbi8vIEExIEExIHwgQTEgKEExKSB8IEExICgoQTEpKSB8IEExICggKEExKSApIHwgLi4uXG5mdW5jdGlvbiByZWZJc1VwY29taW5nIChhbGxvd09wZXJhdG9ycyA9IGZhbHNlKSB7XG4gIGxldCBpID0gdG9rZW5JbmRleDtcbiAgbGV0IG5leHQ7XG4gIGRvIHtcbiAgICBuZXh0ID0gdG9rZW5zWysraV07XG4gIH1cbiAgd2hpbGUgKFxuICAgIG5leHQgJiYgKFxuICAgICAgaXNXaGl0ZXNwYWNlKG5leHQpIHx8XG4gICAgICAoaXNPcGVyYXRvcihuZXh0KSAmJiBuZXh0LnZhbHVlID09PSAnKCcpXG4gICAgKVxuICApO1xuICByZXR1cm4gaXNSZWZlcmVuY2VUb2tlbihuZXh0LCBhbGxvd09wZXJhdG9ycyk7XG59XG5cbmZ1bmN0aW9uIGFkdmFuY2UgKGV4cGVjdE5leHQgPSBudWxsLCBsZWZ0Tm9kZSA9IG51bGwpIHtcbiAgaWYgKGV4cGVjdE5leHQgJiYgZXhwZWN0TmV4dCAhPT0gY3VycmVudE5vZGUuaWQpIHtcbiAgICBoYWx0KGBFeHBlY3RlZCAke2V4cGVjdE5leHR9IGJ1dCBnb3QgJHtjdXJyZW50Tm9kZS5pZH1gKTtcbiAgfVxuICAvLyBsb29rIGFoZWFkIHRvIHNlZSBpZiB3ZSBoYXZlICggKCBcIiBcIiwgXCIoXCIgKSsgUkVGIClcbiAgaWYgKGlzV2hpdGVzcGFjZSh0b2tlbnNbdG9rZW5JbmRleF0pKSB7XG4gICAgLy8gcG90ZW50aWFsIGludGVyc2VjdGlvbiBvcGVyYXRpb24gKHNvIGRvbid0IGFsbG93IG9wZXJhdG9ycyBhcyB1cGNvbWluZylcbiAgICBjb25zdCBoYXZlUmVmID0gaXNSZWZlcmVuY2VOb2RlKGxlZnROb2RlKTtcbiAgICBjb25zdCBwb3NzaWJsZVdTT3AgPSBoYXZlUmVmICYmIHJlZklzVXBjb21pbmcoZmFsc2UpO1xuICAgIGNvbnN0IG5leHRJc0NhbGwgPSBoYXZlUmVmICYmIHRva2Vuc1t0b2tlbkluZGV4ICsgMV0gJiYgdG9rZW5zW3Rva2VuSW5kZXggKyAxXS52YWx1ZSA9PT0gJygnO1xuICAgIGlmICghcG9zc2libGVXU09wICYmICFuZXh0SXNDYWxsKSB7XG4gICAgICAvLyBpZ25vcmUgd2hpdGVzcGFjZVxuICAgICAgd2hpbGUgKGlzV2hpdGVzcGFjZSh0b2tlbnNbdG9rZW5JbmRleF0pKSB7XG4gICAgICAgIHRva2VuSW5kZXgrKztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRU9UXG4gIGlmICh0b2tlbkluZGV4ID49IHRva2Vucy5sZW5ndGgpIHtcbiAgICBjdXJyZW50Tm9kZSA9IHN5bWJvbFRhYmxlW0VORF07XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdG9rZW4gPSB0b2tlbnNbdG9rZW5JbmRleF07XG4gIHRva2VuSW5kZXggKz0gMTtcblxuICBpZiAodG9rZW4udW50ZXJtaW5hdGVkKSB7XG4gICAgaGFsdCgnRW5jb3VudGVyZWQgYW4gdW50ZXJtaW5hdGVkIHRva2VuJyk7XG4gIH1cblxuICBsZXQgbm9kZTtcbiAgaWYgKGlzT3BlcmF0b3IodG9rZW4pKSB7XG4gICAgbm9kZSA9IHN5bWJvbFRhYmxlW3Rva2VuLnZhbHVlXTtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIGhhbHQoYFVua25vd24gb3BlcmF0b3IgJHt0b2tlbi52YWx1ZX1gKTtcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoaXNXaGl0ZXNwYWNlKHRva2VuKSkge1xuICAgIG5vZGUgPSBzeW1ib2xUYWJsZVtXSElURVNQQUNFXTtcbiAgfVxuICBlbHNlIGlmIChpc0xpdGVyYWwodG9rZW4pKSB7XG4gICAgbm9kZSA9IHN5bWJvbFRhYmxlW0xJVEVSQUxdO1xuICB9XG4gIGVsc2UgaWYgKGlzUmVmZXJlbmNlKHRva2VuKSkge1xuICAgIG5vZGUgPSBzeW1ib2xUYWJsZVtSRUZFUkVOQ0VdO1xuICB9XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odG9rZW4pKSB7XG4gICAgbm9kZSA9IHN5bWJvbFRhYmxlW0ZVTkNUSU9OXTtcbiAgfVxuICBlbHNlIHtcbiAgICBoYWx0KGBVbmV4cGVjdGVkICR7dG9rZW4udHlwZX0gdG9rZW46ICR7dG9rZW4udmFsdWV9YCk7XG4gIH1cblxuICBjdXJyZW50Tm9kZSA9IE9iamVjdC5jcmVhdGUobm9kZSk7XG4gIGN1cnJlbnROb2RlLnR5cGUgPSB0b2tlbi50eXBlO1xuICBjdXJyZW50Tm9kZS52YWx1ZSA9IHRva2VuLnZhbHVlO1xuICBpZiAodG9rZW4ubG9jKSB7XG4gICAgY3VycmVudE5vZGUubG9jID0gWyAuLi50b2tlbi5sb2MgXTtcbiAgfVxuICByZXR1cm4gY3VycmVudE5vZGU7XG59XG5cbmZ1bmN0aW9uIGV4cHJlc3Npb24gKHJicCkge1xuICBsZXQgdCA9IGN1cnJlbnROb2RlO1xuICBhZHZhbmNlKG51bGwsIHQpO1xuICBsZXQgbGVmdCA9IHQubnVkKCk7XG4gIHdoaWxlIChyYnAgPCBjdXJyZW50Tm9kZS5sYnApIHtcbiAgICB0ID0gY3VycmVudE5vZGU7XG4gICAgYWR2YW5jZShudWxsLCB0KTtcbiAgICBsZWZ0ID0gdC5sZWQobGVmdCk7XG4gIH1cbiAgcmV0dXJuIGxlZnQ7XG59XG5cbmNvbnN0IG9yaWdpbmFsX3N5bWJvbCA9IHtcbiAgLy8gbnVsbCBkZW5vdGF0aW9uXG4gIG51ZDogKCkgPT4gaGFsdCgnSW52YWxpZCBzeW50YXgnKSwgLy8gVW5kZWZpbmVkXG4gIC8vIGxlZnQgZGVub3RhdGlvblxuICBsZWQ6ICgpID0+IGhhbHQoJ01pc3Npbmcgb3BlcmF0b3InKVxufTtcblxuLy8gYnAgPSBiaW5kaW5nIHBvd2VyXG5mdW5jdGlvbiBzeW1ib2wgKGlkLCBicCA9IDApIHtcbiAgbGV0IHMgPSBzeW1ib2xUYWJsZVtpZF07XG4gIGlmIChzKSB7XG4gICAgaWYgKGJwID49IHMubGJwKSB7XG4gICAgICBzLmxicCA9IGJwO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBzID0geyAuLi5vcmlnaW5hbF9zeW1ib2wgfTtcbiAgICBzLmlkID0gaWQ7XG4gICAgcy52YWx1ZSA9IGlkO1xuICAgIHMubGJwID0gYnA7XG4gICAgc3ltYm9sVGFibGVbaWRdID0gcztcbiAgfVxuICByZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gaW5maXggKGlkLCBicCwgbGVkKSB7XG4gIGNvbnN0IHMgPSBzeW1ib2woaWQsIGJwKTtcbiAgcy5sZWQgPSBsZWQgfHwgZnVuY3Rpb24gKGxlZnQpIHtcbiAgICB0aGlzLnR5cGUgPSBCSU5BUlk7XG4gICAgdGhpcy5vcGVyYXRvciA9IHRoaXMudmFsdWU7XG4gICAgZGVsZXRlIHRoaXMudmFsdWU7XG4gICAgY29uc3QgcmlnaHQgPSBleHByZXNzaW9uKGJwKTtcbiAgICB0aGlzLmFyZ3VtZW50cyA9IFsgbGVmdCwgcmlnaHQgXTtcbiAgICBpZiAodGhpcy5sb2MpIHtcbiAgICAgIHRoaXMubG9jID0gWyBsZWZ0LmxvY1swXSwgcmlnaHQubG9jWzFdIF07XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICByZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gcG9zdGZpeCAoaWQsIGxlZCkge1xuICBjb25zdCBzID0gc3ltYm9sKGlkLCAwKTtcbiAgcy5sYnAgPSA3MDtcbiAgcy5sZWQgPSBsZWQgfHwgZnVuY3Rpb24gKGxlZnQpIHtcbiAgICB0aGlzLnR5cGUgPSBVTkFSWTtcbiAgICB0aGlzLm9wZXJhdG9yID0gdGhpcy52YWx1ZTtcbiAgICBkZWxldGUgdGhpcy52YWx1ZTtcbiAgICB0aGlzLmFyZ3VtZW50cyA9IFsgbGVmdCBdO1xuICAgIGlmICh0aGlzLmxvYykge1xuICAgICAgdGhpcy5sb2NbMF0gPSBsZWZ0LmxvY1swXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiBwcmVmaXggKGlkLCBudWQpIHtcbiAgY29uc3QgcyA9IHN5bWJvbChpZCk7XG4gIHMubnVkID0gbnVkIHx8IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnR5cGUgPSBVTkFSWTtcbiAgICB0aGlzLm9wZXJhdG9yID0gdGhpcy52YWx1ZTtcbiAgICBkZWxldGUgdGhpcy52YWx1ZTtcbiAgICBjb25zdCBzdWJleHByID0gZXhwcmVzc2lvbig3MCk7XG4gICAgdGhpcy5hcmd1bWVudHMgPSBbIHN1YmV4cHIgXTtcbiAgICBpZiAodGhpcy5sb2MpIHtcbiAgICAgIHRoaXMubG9jWzFdID0gc3ViZXhwci5sb2NbMV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICByZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gcmFuZ2VJbmZpeCAoaWQsIGJwKSB7XG4gIHJldHVybiBpbmZpeChpZCwgYnAsIGZ1bmN0aW9uIChsZWZ0KSB7XG4gICAgaWYgKCFpc1JlZmVyZW5jZU5vZGUobGVmdCkpIHtcbiAgICAgIGhhbHQoYFVuZXhwZWN0ZWQgJHtpZH0gb3BlcmF0b3JgKTtcbiAgICB9XG4gICAgY29uc3QgcmlnaHQgPSBleHByZXNzaW9uKGJwKTtcbiAgICBpZiAoIWlzUmVmZXJlbmNlTm9kZShyaWdodCwgdHJ1ZSkpIHtcbiAgICAgIGhhbHQoYFVuZXhwZWN0ZWQgJHtjdXJyZW50Tm9kZS50eXBlfSBmb2xsb3dpbmcgJHt0aGlzLmlkfWApO1xuICAgIH1cbiAgICB0aGlzLnR5cGUgPSBCSU5BUlk7XG4gICAgdGhpcy5vcGVyYXRvciA9IHRoaXMudmFsdWUudHJpbSgpID8gdGhpcy52YWx1ZSA6ICcgJzsgLy8gaGFjayBhcm91bmQgd2hpdGVzcGFjZSBvcFxuICAgIGRlbGV0ZSB0aGlzLnZhbHVlO1xuICAgIHRoaXMuYXJndW1lbnRzID0gWyBsZWZ0LCByaWdodCBdO1xuICAgIGlmICh0aGlzLmxvYykge1xuICAgICAgdGhpcy5sb2MgPSBbIGxlZnQubG9jWzBdLCByaWdodC5sb2NbMV0gXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xufVxuXG5zeW1ib2woRU5EKTtcblxuLy8gcmVmZXJlbmNlIG9wZXJhdG9yc1xucmFuZ2VJbmZpeCgnOicsIDgwKTsgLy8gcmFuZ2Ugam9pbi9leHRlbmQgPUI3Ok9GRlNFVChBMSwxMCwxMClcbmNvbnN0IGNvbW1hID0gcmFuZ2VJbmZpeCgnLCcsIDgwKTsgLy8gdW5pb24gPUI3OkQ3LEM2OkM4XG5yYW5nZUluZml4KFdISVRFU1BBQ0UsIDgwKTsgLy8gaW50ZXJzZWN0OiA9Qjc6RDcgQzY6QzhcblxuLy8gRXhjZWwncyBncmFtbWFyIGlzIGFtYmlndW91cy4gVGhpcyB0dXJucyB0aGUgLCBvcGVyYXRvcidzIGxlZnQgYmluZGluZ1xuLy8gcG93ZXIgb24vb2ZmIHdoaWNoIGFsbG93cyB1cyB0byB0cmVhdCAsIGFzIGEgc3ltYm9sIHdoZXJlIHdlIG5lZWQuXG5jb25zdCB1bmlvblJlZnMgPSBlbmFibGUgPT4ge1xuICBjb25zdCBjdXJyU3RhdGUgPSBjb21tYS5sYnAgPiAwO1xuICBpZiAoZW5hYmxlICE9IG51bGwpIHsgY29tbWEubGJwID0gZW5hYmxlID8gODAgOiAwOyB9XG4gIHJldHVybiBjdXJyU3RhdGU7XG59O1xuXG4vLyBhcml0aG1ldGljIGFuZCBzdHJpbmcgb3BlcmF0aW9uc1xucG9zdGZpeCgnJScpOyAvLyBwZXJjZW50XG5wb3N0Zml4KCcjJywgZnVuY3Rpb24gKGxlZnQpIHsgLy8gc3BpbGxlZCByYW5nZSAoX3hsZm4uQU5DSE9SQVJSQVkpXG4gIGlmICghaXNSZWZlcmVuY2VOb2RlKGxlZnQpKSB7XG4gICAgaGFsdCgnIyBleHBlY3RzIGEgcmVmZXJlbmNlJyk7XG4gIH1cbiAgdGhpcy50eXBlID0gVU5BUlk7XG4gIHRoaXMub3BlcmF0b3IgPSB0aGlzLnZhbHVlO1xuICBkZWxldGUgdGhpcy52YWx1ZTtcbiAgdGhpcy5hcmd1bWVudHMgPSBbIGxlZnQgXTtcbiAgcmV0dXJuIHRoaXM7XG59KTsgLy8gcmFuZ2VcbnByZWZpeCgnKycpOyAvLyB1bmFyeSBwbHVzXG5wcmVmaXgoJy0nKTsgLy8gdW5hcnkgbWludXNcbnByZWZpeCgnQCcpOyAvLyBpbXBsaWNpdCBpbnRlcnNlY3Rpb24gKF94bGZuLlNJTkdMRSlcbmluZml4KCdeJywgNTApOyAvLyBwb3dlclxuaW5maXgoJyonLCA0MCk7IC8vIG11bHRpcGx5XG5pbmZpeCgnLycsIDQwKTsgLy8gZGl2aWRlXG5pbmZpeCgnKycsIDMwKTsgLy8gYWRkXG5pbmZpeCgnLScsIDMwKTsgLy8gc3VidHJhY3RcbmluZml4KCcmJywgMjApOyAvLyB0ZXh0IGNvbmNhdFxuXG4vLyBjb21wYXJpc29uXG5pbmZpeCgnPScsIDEwKTtcbmluZml4KCc8JywgMTApO1xuaW5maXgoJz4nLCAxMCk7XG5pbmZpeCgnPD0nLCAxMCk7XG5pbmZpeCgnPj0nLCAxMCk7XG5pbmZpeCgnPD4nLCAxMCk7XG5zeW1ib2woTElURVJBTCkubnVkID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCB7IHR5cGUsIHZhbHVlIH0gPSB0aGlzO1xuICB0aGlzLnR5cGUgPSBMSVRFUkFMO1xuICB0aGlzLnJhdyA9IHZhbHVlO1xuICBpZiAodHlwZSA9PT0gTlVNQkVSKSB7XG4gICAgdGhpcy52YWx1ZSA9ICt2YWx1ZTtcbiAgfVxuICBlbHNlIGlmICh0eXBlID09PSBCT09MRUFOKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlLnRvVXBwZXJDYXNlKCkgPT09ICdUUlVFJztcbiAgfVxuICBlbHNlIGlmICh0eXBlID09PSBFUlJPUikge1xuICAgIHRoaXMudHlwZSA9IEVSUk9SX0xJVEVSQUw7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZSA9PT0gU1RSSU5HKSB7XG4gICAgLy8gRklYTUU6IHRocm93IGFuIGVycm9yIGlmIHRoZSBzdHJpbmcgaXMgdW50ZXJtaW5hdGVkXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlLnNsaWNlKDEsIC0xKS5yZXBsYWNlKC9cIlwiL2csICdcIicpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgbGl0ZXJhbCB0eXBlOiAnICsgdHlwZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuc3ltYm9sKFJFRkVSRU5DRSkubnVkID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy50eXBlID09PSBSRUZfTkFNRUQpIHtcbiAgICB0aGlzLmtpbmQgPSAnbmFtZSc7XG4gIH1cbiAgZWxzZSBpZiAodGhpcy50eXBlID09PSBSRUZfU1RSVUNUKSB7XG4gICAgdGhpcy5raW5kID0gJ3RhYmxlJzsgLy8gc3RydWN0dXJlZCA/XG4gIH1cbiAgZWxzZSBpZiAodGhpcy50eXBlID09PSBSRUZfQkVBTSkge1xuICAgIHRoaXMua2luZCA9ICdiZWFtJztcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLmtpbmQgPSAncmFuZ2UnO1xuICB9XG4gIHRoaXMudHlwZSA9IFJFRkVSRU5DRTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBwYXJlbnNcbnN5bWJvbCgnKScpO1xucHJlZml4KCcoJywgZnVuY3Rpb24gKCkge1xuICBjb25zdCBwcmV2U3RhdGUgPSB1bmlvblJlZnModHJ1ZSk7XG4gIGNvbnN0IGUgPSBleHByZXNzaW9uKDApO1xuICBhZHZhbmNlKCcpJywgZSk7XG4gIHVuaW9uUmVmcyhwcmV2U3RhdGUpO1xuICByZXR1cm4gZTtcbn0pO1xuXG4vLyBmdW5jdGlvbiBjYWxsXG5zeW1ib2woRlVOQ1RJT04pLm51ZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuaW5maXgoJygnLCA5MCwgZnVuY3Rpb24gKGxlZnQpIHtcbiAgbGV0IGNhbGxlZSA9IHtcbiAgICB0eXBlOiBJREVOVElGSUVSLFxuICAgIG5hbWU6IGxlZnQudmFsdWVcbiAgfTtcbiAgaWYgKGxlZnQuaWQgIT09IEZVTkNUSU9OKSB7XG4gICAgaWYgKFxuICAgICAgbGVmdC50eXBlID09PSBMQU1CREEgfHxcbiAgICAgIC8vIEV4Y2VsIG9ubHkgYWxsb3dzIGNhbGxzIHRvIFwibmFtZXNcIiBhbmQgcmVmIGZ1bmN0aW9ucy4gU2luY2Ugd2UgZG9uJ3RcbiAgICAgIC8vIGRpZmZlcmVudGlhdGUgYmV0d2VlbiB0aGUgdHdvICh0aGlzIHJlcXVpcmVzIGEgdGFibGUgb2YgZnVuY3Rpb24gbmFtZXMpXG4gICAgICAvLyB3ZSdyZSBvdmVybHkgcGVybWlzc2l2ZSBoZXJlOlxuICAgICAgbGVmdC50eXBlID09PSBDQUxMIHx8XG4gICAgICBsZWZ0LnR5cGUgPT09IExFVCB8fFxuICAgICAgbGVmdC50eXBlID09PSBSRUZFUkVOQ0UgfHxcbiAgICAgIChsZWZ0LnR5cGUgPT09IFVOQVJZICYmIGxlZnQudmFsdWUgPT09ICcjJykgfHwgLy8gQmVjYXVzZSBpdCdzIHJlYWxseSBTSU5HTEUoLi4uKSgpXG4gICAgICAobGVmdC50eXBlID09PSBFUlJPUl9MSVRFUkFMICYmIGxlZnQudmFsdWUgPT09ICcjUkVGIScpXG4gICAgKSB7XG4gICAgICAvLyBpbiB0aGUgY2FzZSBvZiBSRUZFUkVOQ0UsIGRvIHdlIHdhbnQgdG8gc2V0IHRoZSBub2RlIHRvIElkZW50aWZpZXI/XG4gICAgICBjYWxsZWUgPSBsZWZ0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGhhbHQoJ1VuZXhwZWN0ZWQgY2FsbCcsIHRva2VuSW5kZXggLSAxKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgbGNGbiA9IGxlZnQudmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgaWYgKGxjRm4gPT09ICdsYW1iZGEnKSB7XG4gICAgcmV0dXJuIHBhcnNlTGFtYmRhLmNhbGwodGhpcywgbGVmdCk7XG4gIH1cbiAgaWYgKGxjRm4gPT09ICdsZXQnKSB7XG4gICAgcmV0dXJuIHBhcnNlTGV0LmNhbGwodGhpcywgbGVmdCk7XG4gIH1cbiAgY29uc3QgYXJncyA9IFtdO1xuICBsZXQgbGFzdFdhc0NvbW1hID0gZmFsc2U7XG4gIGlmIChjdXJyZW50Tm9kZS5pZCAhPT0gJyknKSB7XG4gICAgY29uc3QgcHJldlN0YXRlID0gdW5pb25SZWZzKGZhbHNlKTtcbiAgICB3aGlsZSAoY3VycmVudE5vZGUuaWQgIT09ICcpJykge1xuICAgICAgaWYgKGlzV2hpdGVzcGFjZShjdXJyZW50Tm9kZSkpIHtcbiAgICAgICAgYWR2YW5jZSgpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnROb2RlLmlkID09PSAnLCcpIHtcbiAgICAgICAgYXJncy5wdXNoKG51bGwpO1xuICAgICAgICBsYXN0V2FzQ29tbWEgPSB0cnVlO1xuICAgICAgICBhZHZhbmNlKCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgYXJnID0gZXhwcmVzc2lvbigwKTtcbiAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgIGxhc3RXYXNDb21tYSA9IGZhbHNlO1xuICAgICAgICBpZiAoY3VycmVudE5vZGUuaWQgPT09ICcsJykge1xuICAgICAgICAgIGFkdmFuY2UoJywnKTtcbiAgICAgICAgICBsYXN0V2FzQ29tbWEgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHVuaW9uUmVmcyhwcmV2U3RhdGUpO1xuICB9XG4gIGlmIChsYXN0V2FzQ29tbWEpIHtcbiAgICBhcmdzLnB1c2gobnVsbCk7XG4gIH1cbiAgY29uc3QgY2xvc2VQYXJlbiA9IGN1cnJlbnROb2RlO1xuICBkZWxldGUgdGhpcy52YWx1ZTtcbiAgdGhpcy50eXBlID0gQ0FMTDtcbiAgdGhpcy5jYWxsZWUgPSBjYWxsZWU7XG4gIGlmIChsZWZ0LmxvYykge1xuICAgIHRoaXMuY2FsbGVlLmxvYyA9IFsgLi4ubGVmdC5sb2MgXTtcbiAgfVxuICB0aGlzLmFyZ3VtZW50cyA9IGFyZ3M7XG4gIGlmIChsZWZ0LmxvYykge1xuICAgIHRoaXMubG9jID0gWyBsZWZ0LmxvY1swXSwgY2xvc2VQYXJlbi5sb2NbMV0gXTtcbiAgfVxuICBhZHZhbmNlKCcpJywgdGhpcyk7XG4gIHJldHVybiB0aGlzO1xufSk7XG5cbmZ1bmN0aW9uIHBhcnNlTGFtYmRhIChsZWZ0KSB7XG4gIGNvbnN0IGFyZ3MgPSBbXTtcbiAgY29uc3QgYXJnTmFtZXMgPSB7fTtcbiAgbGV0IGJvZHk7XG4gIGxldCBkb25lID0gZmFsc2U7XG4gIGNvbnN0IHByZXZTdGF0ZSA9IHVuaW9uUmVmcyhmYWxzZSk7XG4gIGlmIChjdXJyZW50Tm9kZS5pZCAhPT0gJyknKSB7XG4gICAgd2hpbGUgKCFkb25lKSB7XG4gICAgICBpZiAoaXNXaGl0ZXNwYWNlKGN1cnJlbnROb2RlKSkge1xuICAgICAgICBhZHZhbmNlKCk7XG4gICAgICB9XG4gICAgICBjb25zdCBhcmdUb2tlbkluZGV4ID0gdG9rZW5JbmRleDtcbiAgICAgIGNvbnN0IGFyZyA9IGV4cHJlc3Npb24oMCk7XG4gICAgICBpZiAoY3VycmVudE5vZGUuaWQgPT09ICcsJykge1xuICAgICAgICAvLyBhbGwgYnV0IGxhc3QgYXJncyBtdXN0IGJlIG5hbWVzXG4gICAgICAgIGlmIChhcmcudHlwZSA9PT0gUkVGRVJFTkNFICYmIGFyZy5raW5kID09PSAnbmFtZScpIHtcbiAgICAgICAgICAvLyBuYW1lcyBtYXkgbm90IGJlIGR1cGxpY2F0ZXNcbiAgICAgICAgICBjb25zdCBjdXJyTmFtZSA9IGFyZy52YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIGlmIChjdXJyTmFtZSBpbiBhcmdOYW1lcykge1xuICAgICAgICAgICAgaGFsdCgnRHVwbGljYXRlIG5hbWU6ICcgKyBhcmcudmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhcmdOYW1lc1tjdXJyTmFtZV0gPSAxO1xuICAgICAgICAgIGNvbnN0IGEgPSB7IHR5cGU6IElERU5USUZJRVIsIG5hbWU6IGFyZy52YWx1ZSB9O1xuICAgICAgICAgIGlmIChhcmcubG9jKSB7IGEubG9jID0gYXJnLmxvYzsgfVxuICAgICAgICAgIGFyZ3MucHVzaChhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0b2tlbkluZGV4ID0gYXJnVG9rZW5JbmRleDtcbiAgICAgICAgICBoYWx0KCdMQU1CREEgYXJndW1lbnQgaXMgbm90IGEgbmFtZScpO1xuICAgICAgICB9XG4gICAgICAgIGFkdmFuY2UoJywnKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBib2R5ID0gYXJnO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdW5pb25SZWZzKHByZXZTdGF0ZSk7XG4gIGRlbGV0ZSB0aGlzLnZhbHVlO1xuICB0aGlzLnR5cGUgPSBMQU1CREE7XG4gIHRoaXMucGFyYW1zID0gYXJncztcbiAgdGhpcy5ib2R5ID0gYm9keSB8fCBudWxsO1xuICBpZiAobGVmdC5sb2MpIHtcbiAgICB0aGlzLmxvYyA9IFsgbGVmdC5sb2NbMF0sIGN1cnJlbnROb2RlLmxvY1sxXSBdO1xuICB9XG4gIGFkdmFuY2UoJyknLCB0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGV0IChsZWZ0KSB7XG4gIGNvbnN0IGFyZ3MgPSBbXTtcbiAgY29uc3QgdmFscyA9IFtdO1xuICBjb25zdCBhcmdOYW1lcyA9IHt9O1xuICBsZXQgYm9keTtcbiAgbGV0IGFyZ0NvdW50ZXIgPSAwO1xuICBjb25zdCBhZGRBcmd1bWVudCA9IChhcmcsIGxhc3RBcmcpID0+IHtcbiAgICBpZiAoYm9keSkge1xuICAgICAgaGFsdCgnVW5leHBlY3RlZCBhcmd1bWVudCBmb2xsb3dpbmcgY2FsY3VsYXRpb24nKTtcbiAgICB9XG4gICAgaWYgKGxhc3RBcmcgJiYgYXJnQ291bnRlciA+PSAyKSB7XG4gICAgICBib2R5ID0gYXJnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IHdhbnROYW1lID0gIShhcmdDb3VudGVyICUgMik7XG4gICAgICBpZiAod2FudE5hbWUpIHtcbiAgICAgICAgaWYgKGFyZyAmJiAoYXJnLnR5cGUgPT09IFJFRkVSRU5DRSAmJiBhcmcua2luZCA9PT0gJ25hbWUnKSkge1xuICAgICAgICAgIC8vIG5hbWVzIG1heSBub3QgYmUgZHVwbGljYXRlc1xuICAgICAgICAgIGNvbnN0IGN1cnJOYW1lID0gYXJnLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgaWYgKGN1cnJOYW1lIGluIGFyZ05hbWVzKSB7XG4gICAgICAgICAgICBoYWx0KCdEdXBsaWNhdGUgbmFtZTogJyArIGFyZy52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFyZ05hbWVzW2N1cnJOYW1lXSA9IDE7XG4gICAgICAgICAgYXJncy5wdXNoKHsgdHlwZTogSURFTlRJRklFUiwgbmFtZTogYXJnLnZhbHVlLCBsb2M6IGFyZy5sb2MgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJnQ291bnRlciA+PSAyKSB7XG4gICAgICAgICAgYm9keSA9IGFyZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBoYWx0KCdBcmd1bWVudCBpcyBub3QgYSBuYW1lJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB2YWxzLnB1c2goYXJnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgYXJnQ291bnRlcisrO1xuICB9O1xuICBjb25zdCBwcmV2U3RhdGUgPSB1bmlvblJlZnMoZmFsc2UpO1xuICBsZXQgbGFzdFdhc0NvbW1hID0gZmFsc2U7XG4gIGlmIChjdXJyZW50Tm9kZS5pZCAhPT0gJyknKSB7XG4gICAgd2hpbGUgKGN1cnJlbnROb2RlLmlkICE9PSAnKScpIHtcbiAgICAgIGlmIChpc1doaXRlc3BhY2UoY3VycmVudE5vZGUpKSB7XG4gICAgICAgIGFkdmFuY2UoKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50Tm9kZS5pZCA9PT0gJywnKSB7XG4gICAgICAgIGFkZEFyZ3VtZW50KG51bGwpO1xuICAgICAgICBsYXN0V2FzQ29tbWEgPSB0cnVlO1xuICAgICAgICBhZHZhbmNlKCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgYXJnID0gZXhwcmVzc2lvbigwKTtcbiAgICAgICAgYWRkQXJndW1lbnQoYXJnLCBjdXJyZW50Tm9kZS5pZCAhPT0gJywnKTtcbiAgICAgICAgbGFzdFdhc0NvbW1hID0gZmFsc2U7XG4gICAgICAgIGlmIChjdXJyZW50Tm9kZS5pZCA9PT0gJywnKSB7XG4gICAgICAgICAgYWR2YW5jZSgnLCcpO1xuICAgICAgICAgIGxhc3RXYXNDb21tYSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdW5pb25SZWZzKHByZXZTdGF0ZSk7XG4gIH1cbiAgaWYgKGxhc3RXYXNDb21tYSkge1xuICAgIGFkZEFyZ3VtZW50KG51bGwsIHRydWUpO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZmluZWRcbiAgaWYgKGJvZHkgPT09IHVuZGVmaW5lZCkge1xuICAgIGhhbHQoJ1VuZXhwZWN0ZWQgZW5kIG9mIGFyZ3VtZW50cycpO1xuICB9XG4gIHVuaW9uUmVmcyhwcmV2U3RhdGUpO1xuICBkZWxldGUgdGhpcy52YWx1ZTtcbiAgdGhpcy50eXBlID0gTEVUO1xuICB0aGlzLmRlY2xhcmF0aW9ucyA9IFtdO1xuICBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgaGFsdCgnVW5leHBlY3RlZCBlbmQgb2YgYXJndW1lbnRzJyk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcyA9IHtcbiAgICAgIHR5cGU6IExFVF9ERUNMLFxuICAgICAgaWQ6IGFyZ3NbaV0sXG4gICAgICBpbml0OiB2YWxzW2ldLFxuICAgICAgbG9jOiBhcmdzW2ldLmxvYyAmJiBbIGFyZ3NbaV0ubG9jWzBdLCB2YWxzW2ldLmxvY1sxXSBdXG4gICAgfTtcbiAgICB0aGlzLmRlY2xhcmF0aW9ucy5wdXNoKHMpO1xuICB9XG4gIHRoaXMuYm9keSA9IGJvZHk7XG4gIGlmIChsZWZ0LmxvYykge1xuICAgIHRoaXMubG9jID0gWyBsZWZ0LmxvY1swXSwgY3VycmVudE5vZGUubG9jWzFdIF07XG4gIH1cbiAgYWR2YW5jZSgnKScsIHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gYXJyYXkgbGl0ZXJhbFxuc3ltYm9sKCd9Jyk7XG5zeW1ib2woJzsnKTtcbnByZWZpeCgneycsIGZ1bmN0aW9uICgpIHtcbiAgaWYgKGN1cnJlbnROb2RlLmlkID09PSAnfScpIHsgLy8gYXJyYXlzIG11c3Qgbm90IGJlIGVtcHR5XG4gICAgaGFsdCgnVW5leHBlY3RlZCBlbXB0eSBhcnJheScpO1xuICB9XG4gIGxldCByb3cgPSBbXTtcbiAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgY29uc3Qgcm93cyA9IFsgcm93IF07XG4gIGNvbnN0IHByZXZTdGF0ZSA9IHVuaW9uUmVmcyhmYWxzZSk7XG4gIHdoaWxlICghZG9uZSkge1xuICAgIGlmIChpc1doaXRlc3BhY2UoY3VycmVudE5vZGUpKSB7XG4gICAgICBhZHZhbmNlKCk7XG4gICAgfVxuICAgIC8vIGFycmF5cyBhbGxvdyBvbmx5IGxpdGVyYWxzLCByYW5nZXMgKGluIEdTaGVldHMpIGFuZCAsOzogb3BlcmF0b3JzLlxuICAgIC8vIEZJWE1FOiBpZiB7IG5lZ2F0aXZlTnVtYmVyczogZmFsc2UgfSB3ZSBtdXN0IGNvbnN1bWUgbWludXNlcyBhcyB3ZWxsLlxuICAgIC8vIEV4Y2VsIGFsbG93cyA9ey0xfSBidXQgbm90ID17KC0xKX0gYW5kID17MSV9XG4gICAgaWYgKGlzTGl0ZXJhbChjdXJyZW50Tm9kZSkpIHtcbiAgICAgIHJvdy5wdXNoKHN5bWJvbFRhYmxlW0xJVEVSQUxdLm51ZC5jYWxsKGN1cnJlbnROb2RlKSk7XG4gICAgICBhZHZhbmNlKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHBlcm1pdEFycmF5UmFuZ2VzICYmIGlzUmVmZXJlbmNlTm9kZShjdXJyZW50Tm9kZSkpIHtcbiAgICAgIHJvdy5wdXNoKHN5bWJvbFRhYmxlW1JFRkVSRU5DRV0ubnVkLmNhbGwoY3VycmVudE5vZGUpKTtcbiAgICAgIGFkdmFuY2UoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAocGVybWl0QXJyYXlDYWxscyAmJiBpc0Z1bmN0aW9uKGN1cnJlbnROb2RlKSkge1xuICAgICAgY29uc3QgYXJnID0gZXhwcmVzc2lvbigwKTtcbiAgICAgIHJvdy5wdXNoKGFyZyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaGFsdChgVW5leHBlY3RlZCAke2N1cnJlbnROb2RlLnR5cGV9IGluIGFycmF5OiAke2N1cnJlbnROb2RlLnZhbHVlfWApO1xuICAgIH1cbiAgICBpZiAoY3VycmVudE5vZGUuaWQgPT09ICcsJykge1xuICAgICAgLy8gbmV4dCBpdGVtXG4gICAgICBhZHZhbmNlKCcsJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGN1cnJlbnROb2RlLmlkID09PSAnOycpIHtcbiAgICAgIC8vIG5leHQgcm93XG4gICAgICBhZHZhbmNlKCc7Jyk7XG4gICAgICByb3cgPSBbXTtcbiAgICAgIHJvd3MucHVzaChyb3cpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBjb25zdCBjbG9zaW5nQnJhY2UgPSBjdXJyZW50Tm9kZTtcbiAgYWR2YW5jZSgnfScpO1xuICB1bmlvblJlZnMocHJldlN0YXRlKTtcbiAgdGhpcy50eXBlID0gQVJSQVk7XG4gIHRoaXMuZWxlbWVudHMgPSByb3dzO1xuICBpZiAodGhpcy5sb2MpIHtcbiAgICB0aGlzLmxvY1sxXSA9IGNsb3NpbmdCcmFjZS5sb2NbMV07XG4gIH1cbiAgZGVsZXRlIHRoaXMudmFsdWU7XG4gIHJldHVybiB0aGlzO1xufSk7XG5cbi8qKlxuICogUGFyc2VzIGEgc3RyaW5nIGZvcm11bGEgb3IgbGlzdCBvZiB0b2tlbnMgaW50byBhbiBBU1QuXG4gKlxuICogVGhlIHBhcnNlciByZXF1aXJlcyBgbWVyZ2VSZWZzYCB0byBoYXZlIGJlZW4gYHRydWVgIGluIHRva2VubGlzdCBvcHRpb25zLFxuICogYmVjYXVzZSBpdCBkb2VzIG5vdCByZWNvZ25pemUgcmVmZXJlbmNlIGNvbnRleHQgdG9rZW5zLlxuICpcbiAqIFRoZSBBU1QgQWJzdHJhY3QgU3ludGF4IFRyZWUncyBmb3JtYXQgaXMgZG9jdW1lbnRlZCBpblxuICogW0FTVF9mb3JtYXQubWRdKC4vQVNUX2Zvcm1hdC5tZClcbiAqXG4gKiBAc2VlIG5vZGVUeXBlc1xuICogQHBhcmFtIHsoc3RyaW5nIHwgVG9rZW5bXSl9IGZvcm11bGEgQW4gRXhjZWwgZm9ybXVsYSBzdHJpbmcgKGFuIEV4Y2VsIGV4cHJlc3Npb24pIG9yIGFuIGFycmF5IG9mIHRva2Vucy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gIE9wdGlvbnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYWxsb3dOYW1lZD10cnVlXSAgRW5hYmxlIHBhcnNpbmcgbmFtZXMgYXMgd2VsbCBhcyByYW5nZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFsbG93VGVybmFyeT1mYWxzZV0gIEVuYWJsZXMgdGhlIHJlY29nbml0aW9uIG9mIHRlcm5hcnkgcmFuZ2VzIGluIHRoZSBzdHlsZSBvZiBgQTE6QWAgb3IgYEExOjFgLiBUaGVzZSBhcmUgc3VwcG9ydGVkIGJ5IEdvb2dsZSBTaGVldHMgYnV0IG5vdCBFeGNlbC4gU2VlOiBSZWZlcmVuY2VzLm1kLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5uZWdhdGl2ZU51bWJlcnM9dHJ1ZV0gIE1lcmdlcyB1bmFyeSBtaW51c2VzIHdpdGggdGhlaXIgaW1tZWRpYXRlbHkgZm9sbG93aW5nIG51bWJlciB0b2tlbnMgKGAtYCxgMWApID0+IGAtMWAgKGFsdGVybmF0aXZlbHkgdGhlc2Ugd2lsbCBiZSB1bmFyeSBvcGVyYXRpb25zIGluIHRoZSB0cmVlKS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucGVybWl0QXJyYXlSYW5nZXM9ZmFsc2VdICBSYW5nZXMgYXJlIGFsbG93ZWQgYXMgZWxlbWVudHMgb2YgYXJyYXlzLiBUaGlzIGlzIGEgZmVhdHVyZSBpbiBHb29nbGUgU2hlZXRzIHdoaWxlIEV4Y2VsIGRvZXMgbm90IGFsbG93IGl0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wZXJtaXRBcnJheUNhbGxzPWZhbHNlXSAgRnVuY3Rpb24gY2FsbHMgYXJlIGFsbG93ZWQgYXMgZWxlbWVudHMgb2YgYXJyYXlzLiBUaGlzIGlzIGEgZmVhdHVyZSBpbiBHb29nbGUgU2hlZXRzIHdoaWxlIEV4Y2VsIGRvZXMgbm90IGFsbG93IGl0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yMWMxPWZhbHNlXSAgUmFuZ2VzIGFyZSBleHBlY3RlZCB0byBiZSBpbiB0aGUgUjFDMSBzdHlsZSBmb3JtYXQgcmF0aGVyIHRoYW4gdGhlIG1vcmUgcG9wdWxhciBBMSBzdHlsZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMud2l0aExvY2F0aW9uPWZhbHNlXSAgTm9kZXMgd2lsbCBpbmNsdWRlIHNvdXJjZSBwb3NpdGlvbiBvZmZzZXRzIHRvIHRoZSB0b2tlbnM6IGB7IGxvYzogWyBzdGFydCwgZW5kIF0gfWBcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMueGxzeD1mYWxzZV0gIFN3aXRjaGVzIHRvIHRoZSBgWzFdU2hlZXQxIUExYCBvciBgWzFdIW5hbWVgIHByZWZpeCBzeW50YXggZm9ybSBmb3IgZXh0ZXJuYWwgd29ya2Jvb2tzLiBTZWU6IFtQcmVmaXhlcy5tZF0oLi9QcmVmaXhlcy5tZClcbiAqIEByZXR1cm5zIHtBc3RFeHByZXNzaW9ufSBBbiBBU1Qgb2Ygbm9kZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlIChmb3JtdWxhLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZm9ybXVsYSA9PT0gJ3N0cmluZycpIHtcbiAgICB0b2tlbnMgPSB0b2tlbml6ZShmb3JtdWxhLCB7XG4gICAgICB3aXRoTG9jYXRpb246IGZhbHNlLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIG1lcmdlUmVmczogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZm9ybXVsYSkpIHtcbiAgICB0b2tlbnMgPSBmb3JtdWxhO1xuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignUGFyc2UgcmVxdWlyZXMgYSBzdHJpbmcgb3IgYXJyYXkgb2YgdG9rZW5zLicpO1xuICB9XG4gIC8vIGFsbG93IHJhbmdlcyBpbiBhcnJheSBcImxpdGVyYWxzXCI/XG4gIHBlcm1pdEFycmF5UmFuZ2VzID0gb3B0aW9ucz8ucGVybWl0QXJyYXlSYW5nZXM7XG4gIC8vIGFsbG93IGNhbGxzIGluIGFycmF5cyBcImxpdGVyYWxzXCI/XG4gIHBlcm1pdEFycmF5Q2FsbHMgPSBvcHRpb25zPy5wZXJtaXRBcnJheUNhbGxzO1xuICAvLyBzZXQgaW5kZXggdG8gc3RhcnRcbiAgdG9rZW5JbmRleCA9IDA7XG4gIC8vIGRpc2NhcmQgcmVkdW5kYW50IHdoaXRlc3BhY2UgYW5kID0gcHJlZml4XG4gIHdoaWxlIChpc1doaXRlc3BhY2UodG9rZW5zW3Rva2VuSW5kZXhdKSB8fCBpc0Z4UHJlZml4KHRva2Vuc1t0b2tlbkluZGV4XSkpIHtcbiAgICB0b2tlbkluZGV4Kys7XG4gIH1cbiAgYWR2YW5jZSgpO1xuICB1bmlvblJlZnModHJ1ZSk7XG4gIGNvbnN0IHJvb3QgPSBleHByZXNzaW9uKDApO1xuICBhZHZhbmNlKEVORCk7XG4gIHJldHVybiByb290O1xufVxuIiwiaW1wb3J0IHtcbiAgRlhfUFJFRklYLFxuICBDT05URVhULFxuICBDT05URVhUX1FVT1RFLFxuICBSRUZfUkFOR0UsXG4gIFJFRl9URVJOQVJZLFxuICBSRUZfTkFNRUQsXG4gIFJFRl9CRUFNLFxuICBSRUZfU1RSVUNULFxuICBPUEVSQVRPUlxufSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBsZXhlcnNSZWZzIH0gZnJvbSAnLi9sZXhlclBhcnRzLmpzJztcbmltcG9ydCB7IGdldFRva2VucyB9IGZyb20gJy4vbGV4ZXIuanMnO1xuXG4vLyBMaWJlcmFsbHkgc3BsaXQgYSBjb250ZXh0IHN0cmluZyB1cCBpbnRvIHBhcnRzLlxuLy8gUGVybWl0cyBhbnkgY29tYmluYXRpb24gb2YgYnJhY2VkIGFuZCB1bmJyYWNlZCBpdGVtcy5cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFByZWZpeCAoc3RyLCBzdHJpbmdzT25seSA9IGZhbHNlKSB7XG4gIGxldCBpbkJyYWNlID0gZmFsc2U7XG4gIGxldCBjdXJyU3RyID0gJyc7XG4gIGNvbnN0IHBhcnRzID0gW107XG4gIGNvbnN0IGZsdXNoID0gKCkgPT4ge1xuICAgIGlmIChjdXJyU3RyKSB7XG4gICAgICBwYXJ0cy5wdXNoKFxuICAgICAgICBzdHJpbmdzT25seVxuICAgICAgICAgID8gY3VyclN0clxuICAgICAgICAgIDogeyB2YWx1ZTogY3VyclN0ciwgYnJhY2VkOiBpbkJyYWNlIH1cbiAgICAgICk7XG4gICAgfVxuICAgIGN1cnJTdHIgPSAnJztcbiAgfTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGFyID0gc3RyW2ldO1xuICAgIGlmIChjaGFyID09PSAnWycpIHtcbiAgICAgIGZsdXNoKCk7XG4gICAgICBpbkJyYWNlID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hhciA9PT0gJ10nKSB7XG4gICAgICBmbHVzaCgpO1xuICAgICAgaW5CcmFjZSA9IGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGN1cnJTdHIgKz0gY2hhcjtcbiAgICB9XG4gIH1cbiAgZmx1c2goKTtcbiAgcmV0dXJuIHBhcnRzO1xufVxuXG5mdW5jdGlvbiBzcGxpdENvbnRleHQgKGNvbnRleHRTdHJpbmcpIHtcbiAgcmV0dXJuIHsgY29udGV4dDogc3BsaXRQcmVmaXgoY29udGV4dFN0cmluZywgdHJ1ZSkgfTtcbn1cblxuZnVuY3Rpb24gc3BsaXRDb250ZXh0WGxzeCAoY29udGV4dFN0cmluZykge1xuICBjb25zdCBjb250ZXh0ID0ge307XG4gIGNvbnN0IGN0eCA9IHNwbGl0UHJlZml4KGNvbnRleHRTdHJpbmcpO1xuICBpZiAoY3R4Lmxlbmd0aCA+IDEpIHtcbiAgICBjb250ZXh0Lndvcmtib29rTmFtZSA9IGN0eFtjdHgubGVuZ3RoIC0gMl0udmFsdWU7XG4gICAgY29udGV4dC5zaGVldE5hbWUgPSBjdHhbY3R4Lmxlbmd0aCAtIDFdLnZhbHVlO1xuICB9XG4gIGVsc2UgaWYgKGN0eC5sZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCBpdGVtID0gY3R4WzBdO1xuICAgIGlmIChpdGVtLmJyYWNlZCkge1xuICAgICAgY29udGV4dC53b3JrYm9va05hbWUgPSBpdGVtLnZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbnRleHQuc2hlZXROYW1lID0gaXRlbS52YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5cbmNvbnN0IHVucXVvdGUgPSBkID0+IGQuc2xpY2UoMSwgLTEpLnJlcGxhY2UoLycnL2csIFwiJ1wiKTtcblxuY29uc3QgcFJhbmdlT3AgPSB0ID0+IHQgJiYgKHQudmFsdWUgPT09ICc6JyB8fCB0LnZhbHVlID09PSAnLjonIHx8IHQudmFsdWUgPT09ICc6LicgfHwgdC52YWx1ZSA9PT0gJy46LicpICYmIHsgb3BlcmF0b3I6IHQudmFsdWUgfTtcbmNvbnN0IHBSYW5nZSA9IHQgPT4gdCAmJiB0LnR5cGUgPT09IFJFRl9SQU5HRSAmJiB7IHIwOiB0LnZhbHVlIH07XG5jb25zdCBwUGFydGlhbCA9IHQgPT4gdCAmJiB0LnR5cGUgPT09IFJFRl9URVJOQVJZICYmIHsgcjA6IHQudmFsdWUgfTtcbmNvbnN0IHBSYW5nZTIgPSB0ID0+IHQgJiYgdC50eXBlID09PSBSRUZfUkFOR0UgJiYgeyByMTogdC52YWx1ZSB9O1xuY29uc3QgcEJhbmcgPSB0ID0+IHQgJiYgdC50eXBlID09PSBPUEVSQVRPUiAmJiB0LnZhbHVlID09PSAnIScgJiYge307XG5jb25zdCBwQmVhbSA9IHQgPT4gdCAmJiB0LnR5cGUgPT09IFJFRl9CRUFNICYmIHsgcjA6IHQudmFsdWUgfTtcbmNvbnN0IHBTdHJ1Y3VyZWQgPSB0ID0+IHQgJiYgdC50eXBlID09PSBSRUZfU1RSVUNUICYmIHsgc3RydWN0OiB0LnZhbHVlIH07XG5jb25zdCBwQ29udGV4dCA9ICh0LCBvcHRzKSA9PiB7XG4gIGNvbnN0IHNwbGl0dGVyID0gb3B0cy54bHN4ID8gc3BsaXRDb250ZXh0WGxzeCA6IHNwbGl0Q29udGV4dDtcbiAgaWYgKHQgJiYgdC50eXBlID09PSBDT05URVhUKSB7XG4gICAgcmV0dXJuIHNwbGl0dGVyKHQudmFsdWUpO1xuICB9XG4gIGlmICh0ICYmIHQudHlwZSA9PT0gQ09OVEVYVF9RVU9URSkge1xuICAgIHJldHVybiBzcGxpdHRlcih1bnF1b3RlKHQudmFsdWUpKTtcbiAgfVxufTtcbmNvbnN0IHBOYW1lZCA9IHQgPT4gdCAmJiB0LnR5cGUgPT09IFJFRl9OQU1FRCAmJiB7IG5hbWU6IHQudmFsdWUgfTtcblxuY29uc3QgdmFsaWRSdW5zID0gW1xuICBbIHBQYXJ0aWFsIF0sXG4gIFsgcFJhbmdlLCBwUmFuZ2VPcCwgcFJhbmdlMiBdLFxuICBbIHBSYW5nZSBdLFxuICBbIHBCZWFtIF0sXG4gIFsgcENvbnRleHQsIHBCYW5nLCBwUGFydGlhbCBdLFxuICBbIHBDb250ZXh0LCBwQmFuZywgcFJhbmdlLCBwUmFuZ2VPcCwgcFJhbmdlMiBdLFxuICBbIHBDb250ZXh0LCBwQmFuZywgcFJhbmdlIF0sXG4gIFsgcENvbnRleHQsIHBCYW5nLCBwQmVhbSBdXG5dO1xuXG5jb25zdCB2YWxpZFJ1bnNOYW1lZCA9IHZhbGlkUnVucy5jb25jYXQoW1xuICBbIHBOYW1lZCBdLFxuICBbIHBDb250ZXh0LCBwQmFuZywgcE5hbWVkIF0sXG4gIFsgcFN0cnVjdXJlZCBdLFxuICBbIHBOYW1lZCwgcFN0cnVjdXJlZCBdLFxuICBbIHBDb250ZXh0LCBwQmFuZywgcE5hbWVkLCBwU3RydWN1cmVkIF1cbl0pO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSZWYgKHJlZiwgb3B0cykge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIHdpdGhMb2NhdGlvbjogZmFsc2UsXG4gICAgbWVyZ2VSZWZzOiBmYWxzZSxcbiAgICBhbGxvd1Rlcm5hcnk6IGZhbHNlLFxuICAgIGFsbG93TmFtZWQ6IHRydWUsXG4gICAgcjFjMTogZmFsc2UsXG4gICAgeGxzeDogZmFsc2UsXG4gICAgLi4ub3B0c1xuICB9O1xuICBjb25zdCB0b2tlbnMgPSBnZXRUb2tlbnMocmVmLCBsZXhlcnNSZWZzLCBvcHRpb25zKTtcbiAgY29uc3QgcmVmRGF0YSA9IG9wdGlvbnMueGxzeFxuICAgID8ge1xuICAgICAgd29ya2Jvb2tOYW1lOiAnJyxcbiAgICAgIHNoZWV0TmFtZTogJycsXG4gICAgICByMDogJycsXG4gICAgICByMTogJycsXG4gICAgICBuYW1lOiAnJyxcbiAgICAgIG9wZXJhdG9yOiAnJ1xuICAgIH1cbiAgICA6IHtcbiAgICAgIGNvbnRleHQ6IFtdLFxuICAgICAgcjA6ICcnLFxuICAgICAgcjE6ICcnLFxuICAgICAgbmFtZTogJycsXG4gICAgICBvcGVyYXRvcjogJydcbiAgICB9O1xuICAvLyBkaXNjYXJkIHRoZSBcIj1cIi1wcmVmaXggaWYgaXQgaXMgdGhlcmVcbiAgaWYgKHRva2Vucy5sZW5ndGggJiYgdG9rZW5zWzBdLnR5cGUgPT09IEZYX1BSRUZJWCkge1xuICAgIHRva2Vucy5zaGlmdCgpO1xuICB9XG4gIGNvbnN0IHJ1bnMgPSBvcHRpb25zLmFsbG93TmFtZWQgPyB2YWxpZFJ1bnNOYW1lZCA6IHZhbGlkUnVucztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBydW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZGF0YSA9IHsgLi4ucmVmRGF0YSB9O1xuICAgIGlmIChydW5zW2ldLmxlbmd0aCA9PT0gdG9rZW5zLmxlbmd0aCkge1xuICAgICAgY29uc3QgdmFsaWQgPSBydW5zW2ldLmV2ZXJ5KChwYXJzZSwgaikgPT4ge1xuICAgICAgICBjb25zdCBkID0gcGFyc2UodG9rZW5zW2pdLCBvcHRpb25zKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihkYXRhLCBkKTtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgICB9KTtcbiAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJjb25zdCBjaGFyRnJvbSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbi8qKlxuICogQ29udmVydCBhIDAgYmFzZWQgb2Zmc2V0IG51bWJlciB0byBhIGNvbHVtbiBzdHJpbmdcbiAqIHJlcHJlc2VudGF0aW9uIChgMmAgPSBgXCJDXCJgKS5cbiAqXG4gKiBUaGUgbWV0aG9kIGV4cGVjdHMgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxNjM4My4gT3RoZXIgaW5wdXQgd2lsbFxuICogcmV0dXJuIGdhcmJhZ2UuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbkluZGV4IFplcm8gYmFzZWQgY29sdW1uIGluZGV4IG51bWJlclxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbHVtbiBzdHJpbmcgaWRlbnRpZmllclxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9Db2wgKGNvbHVtbkluZGV4KSB7XG4gIHJldHVybiAoXG4gICAgKGNvbHVtbkluZGV4ID49IDcwMlxuICAgICAgPyBjaGFyRnJvbSgoKCgoY29sdW1uSW5kZXggLSA3MDIpIC8gNjc2KSAtIDApICUgMjYpICsgNjUpXG4gICAgICA6ICcnKSArXG4gICAgKGNvbHVtbkluZGV4ID49IDI2XG4gICAgICA/IGNoYXJGcm9tKCgoKChjb2x1bW5JbmRleCAvIDI2KSAtIDEpICUgMjYpICsgNjUpKVxuICAgICAgOiAnJykgK1xuICAgIGNoYXJGcm9tKChjb2x1bW5JbmRleCAlIDI2KSArIDY1KVxuICApO1xufVxuIiwiY29uc3QgcmVCYW5uZWRDaGFycyA9IC9bXjAtOUEtWmEtei5fwqHCpMKnwqjCqlxcdTAwYWTCry1cXHVmZmZmXS87XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlQcmVmaXggKHJlZikge1xuICBsZXQgcHJlID0gJyc7XG4gIGxldCBxdW90ZSA9IDA7XG4gIGxldCBudGggPSAwO1xuICBjb25zdCBjb250ZXh0ID0gcmVmLmNvbnRleHQgfHwgW107XG4gIGZvciAobGV0IGkgPSBjb250ZXh0Lmxlbmd0aDsgaSA+IC0xOyBpLS0pIHtcbiAgICBjb25zdCBzY29wZSA9IGNvbnRleHRbaV07XG4gICAgaWYgKHNjb3BlKSB7XG4gICAgICBjb25zdCBwYXJ0ID0gKG50aCAlIDIpID8gJ1snICsgc2NvcGUgKyAnXScgOiBzY29wZTtcbiAgICAgIHByZSA9IHBhcnQgKyBwcmU7XG4gICAgICBxdW90ZSArPSArcmVCYW5uZWRDaGFycy50ZXN0KHNjb3BlKTtcbiAgICAgIG50aCsrO1xuICAgIH1cbiAgfVxuICBpZiAocXVvdGUpIHtcbiAgICBwcmUgPSBcIidcIiArIHByZS5yZXBsYWNlKC8nL2csIFwiJydcIikgKyBcIidcIjtcbiAgfVxuICByZXR1cm4gcHJlID8gcHJlICsgJyEnIDogcHJlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5UHJlZml4QWx0IChyZWYpIHtcbiAgbGV0IHByZSA9ICcnO1xuICBsZXQgcXVvdGUgPSAwO1xuICBjb25zdCB7IHdvcmtib29rTmFtZSwgc2hlZXROYW1lIH0gPSByZWY7XG4gIGlmICh3b3JrYm9va05hbWUpIHtcbiAgICBwcmUgKz0gJ1snICsgd29ya2Jvb2tOYW1lICsgJ10nO1xuICAgIHF1b3RlICs9ICtyZUJhbm5lZENoYXJzLnRlc3Qod29ya2Jvb2tOYW1lKTtcbiAgfVxuICBpZiAoc2hlZXROYW1lKSB7XG4gICAgcHJlICs9IHNoZWV0TmFtZTtcbiAgICBxdW90ZSArPSArcmVCYW5uZWRDaGFycy50ZXN0KHNoZWV0TmFtZSk7XG4gIH1cbiAgaWYgKHF1b3RlKSB7XG4gICAgcHJlID0gXCInXCIgKyBwcmUucmVwbGFjZSgvJy9nLCBcIicnXCIpICsgXCInXCI7XG4gIH1cbiAgcmV0dXJuIHByZSA/IHByZSArICchJyA6IHByZTtcbn1cbiIsImltcG9ydCB7IE1BWF9ST1dTLCBNQVhfQ09MUyB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IHBhcnNlUmVmIH0gZnJvbSAnLi9wYXJzZVJlZi5qcyc7XG5pbXBvcnQgeyB0b0NvbCB9IGZyb20gJy4vdG9Db2wuanMnO1xuaW1wb3J0IHsgZnJvbUNvbCB9IGZyb20gJy4vZnJvbUNvbC5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlQcmVmaXgsIHN0cmluZ2lmeVByZWZpeEFsdCB9IGZyb20gJy4vc3RyaW5naWZ5UHJlZml4LmpzJztcblxuY29uc3QgY2xhbXAgPSAobWluLCB2YWwsIG1heCkgPT4gTWF0aC5taW4oTWF0aC5tYXgodmFsLCBtaW4pLCBtYXgpO1xuY29uc3QgdG9Db2xTdHIgPSAoYywgYSkgPT4gKGEgPyAnJCcgOiAnJykgKyB0b0NvbChjKTtcbmNvbnN0IHRvUm93U3RyID0gKHIsIGEpID0+IChhID8gJyQnIDogJycpICsgdG9Sb3cocik7XG5cbi8vIC8qKlxuLy8gICogQ29udmVydCBhIGNvbHVtbiBzdHJpbmcgcmVwcmVzZW50YXRpb24gdG8gYSAwIGJhc2VkXG4vLyAgKiBvZmZzZXQgbnVtYmVyIChgXCJDXCJgID0gYDJgKS5cbi8vICAqXG4vLyAgKiBUaGUgbWV0aG9kIGV4cGVjdHMgYSB2YWxpZCBjb2x1bW4gaWRlbnRpZmllciBtYWRlIHVwIG9mIF9vbmx5X1xuLy8gICogQS1aIGxldHRlcnMsIHdoaWNoIG1heSBiZSBlaXRoZXIgdXBwZXIgb3IgbG93ZXIgY2FzZS4gT3RoZXIgaW5wdXQgd2lsbFxuLy8gICogcmV0dXJuIGdhcmJhZ2UuXG4vLyAgKlxuLy8gICogQHBhcmFtIHtzdHJpbmd9IGNvbHVtblN0cmluZyAgVGhlIGNvbHVtbiBzdHJpbmcgaWRlbnRpZmllclxuLy8gICogQHJldHVybnMge251bWJlcn0gIFplcm8gYmFzZWQgY29sdW1uIGluZGV4IG51bWJlclxuLy8gICovXG4vLyBleHBvcnQgZnVuY3Rpb24gZnJvbUNvbCAoY29sdW1uU3RyaW5nKSB7XG4vLyAgIGNvbnN0IHggPSAoY29sdW1uU3RyaW5nIHx8ICcnKTtcbi8vICAgY29uc3QgbCA9IHgubGVuZ3RoO1xuLy8gICBsZXQgbiA9IDA7XG4vLyAgIGlmIChsID4gMikge1xuLy8gICAgIGNvbnN0IGMgPSB4LmNoYXJDb2RlQXQobCAtIDMpO1xuLy8gICAgIGNvbnN0IGEgPSBjID4gOTUgPyAzMiA6IDA7XG4vLyAgICAgbiArPSAoMSArIGMgLSBhIC0gNjUpICogNjc2O1xuLy8gICB9XG4vLyAgIGlmIChsID4gMSkge1xuLy8gICAgIGNvbnN0IGMgPSB4LmNoYXJDb2RlQXQobCAtIDIpO1xuLy8gICAgIGNvbnN0IGEgPSBjID4gOTUgPyAzMiA6IDA7XG4vLyAgICAgbiArPSAoMSArIGMgLSBhIC0gNjUpICogMjY7XG4vLyAgIH1cbi8vICAgaWYgKGwpIHtcbi8vICAgICBjb25zdCBjID0geC5jaGFyQ29kZUF0KGwgLSAxKTtcbi8vICAgICBjb25zdCBhID0gYyA+IDk1ID8gMzIgOiAwO1xuLy8gICAgIG4gKz0gKGMgLSBhKSAtIDY1O1xuLy8gICB9XG4vLyAgIHJldHVybiBuO1xuLy8gfVxuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdyAocm93U3RyKSB7XG4gIHJldHVybiArcm93U3RyIC0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUm93ICh0b3ApIHtcbiAgcmV0dXJuIFN0cmluZyh0b3AgKyAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUmVsYXRpdmUgKHJhbmdlKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByYW5nZSwgeyAkbGVmdDogZmFsc2UsICRyaWdodDogZmFsc2UsICR0b3A6IGZhbHNlLCAkYm90dG9tOiBmYWxzZSB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQWJzb2x1dGUgKHJhbmdlKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByYW5nZSwgeyAkbGVmdDogdHJ1ZSwgJHJpZ2h0OiB0cnVlLCAkdG9wOiB0cnVlLCAkYm90dG9tOiB0cnVlIH0pO1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB7J2hlYWQnIHwgJ3RhaWwnIHwgJ2JvdGgnIHwgbnVsbCB8IHVuZGVmaW5lZH0gdHJpbSBEb2VzIHRoZSByYW5nZSBoYXZlIHRyaW1taW5nP1xuICogQHJldHVybnMge3N0cmluZ30gVGhlIGFwcHJvcHJpYXRlIHJhbmdlIGpvaW4gb3BlcmF0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlT3BlcmF0b3IgKHRyaW0pIHtcbiAgaWYgKHRyaW0gPT09ICdib3RoJykge1xuICAgIHJldHVybiAnLjouJztcbiAgfVxuICBlbHNlIGlmICh0cmltID09PSAnaGVhZCcpIHtcbiAgICByZXR1cm4gJy46JztcbiAgfVxuICBlbHNlIGlmICh0cmltID09PSAndGFpbCcpIHtcbiAgICByZXR1cm4gJzouJztcbiAgfVxuICByZXR1cm4gJzonO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJpbURpcmVjdGlvbiAoaGVhZCwgdGFpbCkge1xuICBpZiAoaGVhZCAmJiB0YWlsKSB7XG4gICAgcmV0dXJuICdib3RoJztcbiAgfVxuICBpZiAoaGVhZCkge1xuICAgIHJldHVybiAnaGVhZCc7XG4gIH1cbiAgaWYgKHRhaWwpIHtcbiAgICByZXR1cm4gJ3RhaWwnO1xuICB9XG59XG5cbi8qKlxuICogU3RyaW5naWZ5IGEgcmFuZ2Ugb2JqZWN0IGludG8gQTEgc3ludGF4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAaWdub3JlXG4gKiBAc2VlIHBhcnNlQTFSZWZcbiAqIEBwYXJhbSB7UmFuZ2VBMX0gcmFuZ2UgIEEgcmFuZ2Ugb2JqZWN0XG4gKiBAcmV0dXJucyB7c3RyaW5nfSAgQW4gQTEtc3R5bGUgc3RyaW5nIHJlcHJlc2VuYXRpb24gb2YgYSByYW5nZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9BMSAocmFuZ2UpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICBsZXQgeyB0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQsIHRyaW0gfSA9IHJhbmdlO1xuICBjb25zdCB7ICRsZWZ0LCAkcmlnaHQsICR0b3AsICRib3R0b20gfSA9IHJhbmdlO1xuICBjb25zdCBub0xlZnQgPSBsZWZ0ID09IG51bGw7XG4gIGNvbnN0IG5vUmlnaHQgPSByaWdodCA9PSBudWxsO1xuICBjb25zdCBub1RvcCA9IHRvcCA9PSBudWxsO1xuICBjb25zdCBub0JvdHRvbSA9IGJvdHRvbSA9PSBudWxsO1xuICAvLyBhbGxvdyBza2lwcGluZyByaWdodCBhbmQgYm90dG9tIHRvIGRlZmluZSBhIGNlbGxcbiAgdG9wID0gY2xhbXAoMCwgdG9wIHwgMCwgTUFYX1JPV1MpO1xuICBsZWZ0ID0gY2xhbXAoMCwgbGVmdCB8IDAsIE1BWF9DT0xTKTtcbiAgaWYgKCFub0xlZnQgJiYgIW5vVG9wICYmIG5vUmlnaHQgJiYgbm9Cb3R0b20pIHtcbiAgICBib3R0b20gPSB0b3A7XG4gICAgcmlnaHQgPSBsZWZ0O1xuICB9XG4gIGVsc2Uge1xuICAgIGJvdHRvbSA9IGNsYW1wKDAsIGJvdHRvbSB8IDAsIE1BWF9ST1dTKTtcbiAgICByaWdodCA9IGNsYW1wKDAsIHJpZ2h0IHwgMCwgTUFYX0NPTFMpO1xuICB9XG4gIGNvbnN0IG9wID0gcmFuZ2VPcGVyYXRvcih0cmltKTtcbiAgLy8gQTpBXG4gIGNvbnN0IGFsbFJvd3MgPSB0b3AgPT09IDAgJiYgYm90dG9tID49IE1BWF9ST1dTO1xuICBjb25zdCBoYXZlQWJzQ29sID0gKCRsZWZ0ICYmICFub0xlZnQpIHx8ICgkcmlnaHQgJiYgIW5vUmlnaHQpO1xuICBpZiAoKGFsbFJvd3MgJiYgIW5vTGVmdCAmJiAhbm9SaWdodCAmJiAoIWhhdmVBYnNDb2wgfHwgbGVmdCA9PT0gcmlnaHQpKSB8fCAobm9Ub3AgJiYgbm9Cb3R0b20pKSB7XG4gICAgcmV0dXJuIHRvQ29sU3RyKGxlZnQsICRsZWZ0KSArIG9wICsgdG9Db2xTdHIocmlnaHQsICRyaWdodCk7XG4gIH1cbiAgLy8gMToxXG4gIGNvbnN0IGFsbENvbHMgPSBsZWZ0ID09PSAwICYmIHJpZ2h0ID49IE1BWF9DT0xTO1xuICBjb25zdCBoYXZlQWJzUm93ID0gKCR0b3AgJiYgIW5vVG9wKSB8fCAoJGJvdHRvbSAmJiAhbm9Cb3R0b20pO1xuICBpZiAoKGFsbENvbHMgJiYgIW5vVG9wICYmICFub0JvdHRvbSAmJiAoIWhhdmVBYnNSb3cgfHwgdG9wID09PSBib3R0b20pKSB8fCAobm9MZWZ0ICYmIG5vUmlnaHQpKSB7XG4gICAgcmV0dXJuIHRvUm93U3RyKHRvcCwgJHRvcCkgKyBvcCArIHRvUm93U3RyKGJvdHRvbSwgJGJvdHRvbSk7XG4gIH1cbiAgLy8gQTE6MVxuICBpZiAoIW5vTGVmdCAmJiAhbm9Ub3AgJiYgIW5vUmlnaHQgJiYgbm9Cb3R0b20pIHtcbiAgICByZXR1cm4gdG9Db2xTdHIobGVmdCwgJGxlZnQpICsgdG9Sb3dTdHIodG9wLCAkdG9wKSArIG9wICsgdG9Db2xTdHIocmlnaHQsICRyaWdodCk7XG4gIH1cbiAgLy8gQTpBMSA9PiBBMToxXG4gIGlmICghbm9MZWZ0ICYmIG5vVG9wICYmICFub1JpZ2h0ICYmICFub0JvdHRvbSkge1xuICAgIHJldHVybiB0b0NvbFN0cihsZWZ0LCAkbGVmdCkgKyB0b1Jvd1N0cihib3R0b20sICRib3R0b20pICsgb3AgKyB0b0NvbFN0cihyaWdodCwgJHJpZ2h0KTtcbiAgfVxuICAvLyBBMTpBXG4gIGlmICghbm9MZWZ0ICYmICFub1RvcCAmJiBub1JpZ2h0ICYmICFub0JvdHRvbSkge1xuICAgIHJldHVybiB0b0NvbFN0cihsZWZ0LCAkbGVmdCkgKyB0b1Jvd1N0cih0b3AsICR0b3ApICsgb3AgKyB0b1Jvd1N0cihib3R0b20sICRib3R0b20pO1xuICB9XG4gIC8vIEE6QTEgPT4gQTE6QVxuICBpZiAobm9MZWZ0ICYmICFub1RvcCAmJiAhbm9SaWdodCAmJiAhbm9Cb3R0b20pIHtcbiAgICByZXR1cm4gdG9Db2xTdHIocmlnaHQsICRyaWdodCkgKyB0b1Jvd1N0cih0b3AsICR0b3ApICsgb3AgKyB0b1Jvd1N0cihib3R0b20sICRib3R0b20pO1xuICB9XG4gIC8vIEExOkExXG4gIGlmIChyaWdodCAhPT0gbGVmdCB8fCBib3R0b20gIT09IHRvcCB8fCAkcmlnaHQgIT09ICRsZWZ0IHx8ICRib3R0b20gIT09ICR0b3ApIHtcbiAgICByZXR1cm4gdG9Db2xTdHIobGVmdCwgJGxlZnQpICsgdG9Sb3dTdHIodG9wLCAkdG9wKSArIG9wICtcbiAgICAgICAgICAgdG9Db2xTdHIocmlnaHQsICRyaWdodCkgKyB0b1Jvd1N0cihib3R0b20sICRib3R0b20pO1xuICB9XG4gIC8vIEExXG4gIHJldHVybiB0b0NvbFN0cihsZWZ0LCAkbGVmdCkgKyB0b1Jvd1N0cih0b3AsICR0b3ApO1xufVxuXG5mdW5jdGlvbiBzcGxpdEExIChzdHIpIHtcbiAgY29uc3QgbSA9IC9eKD89LikoXFwkKD89XFxEKSk/KFtBLVphLXpdezAsM30pPyhcXCQpPyhbMS05XVswLTldezAsNn0pPyQvLmV4ZWMoc3RyKTtcbiAgaWYgKCFtIHx8ICghbVsyXSAmJiAhbVs0XSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gW1xuICAgIG1bNF0gPyBmcm9tUm93KG1bNF0pIDogbnVsbCwgLy8gcm93IGluZGV4IG9yIG51bGxcbiAgICBtWzJdID8gZnJvbUNvbChtWzJdKSA6IG51bGwsIC8vIGNvbCBpbmRleCBvciBudWxsXG4gICAgISFtWzNdLCAvLyBpcyByb3cgYWJzb2x1dGU/XG4gICAgISFtWzFdICAvLyBpcyBjb2wgYWJzb2x1dGU/XG4gIF07XG59XG5cbi8qKlxuICogUGFyc2UgYSBzaW1wbGUgc3RyaW5nIHJlZmVyZW5jZSB0byBhbiBBMSByYW5nZSBpbnRvIGEgcmFuZ2Ugb2JqZWN0LlxuICogV2lsbCBhY2NlcHQgYEExYCwgYEEyYCwgYEE6QWAsIG9yIGAxOjFgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAaWdub3JlXG4gKiBAc2VlIHBhcnNlQTFSZWZcbiAqIEBwYXJhbSB7c3RyaW5nfSByYW5nZVN0cmluZyAgQSByYW5nZSBzdHJpbmdcbiAqIEByZXR1cm5zIHsoUmFuZ2VBMXxudWxsKX0gQW4gb2JqZWN0IHJlcHJlc2VudGluZyBhIHZhbGlkIHJhbmdlIG9yIG51bGwgaWYgaXQgaXMgaW52YWxpZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21BMSAocmFuZ2VTdHJpbmcpIHtcbiAgbGV0IHRvcCA9IG51bGw7XG4gIGxldCBsZWZ0ID0gbnVsbDtcbiAgbGV0IGJvdHRvbSA9IG51bGw7XG4gIGxldCByaWdodCA9IG51bGw7XG4gIGxldCAkdG9wID0gZmFsc2U7XG4gIGxldCAkbGVmdCA9IGZhbHNlO1xuICBsZXQgJGJvdHRvbSA9IGZhbHNlO1xuICBsZXQgJHJpZ2h0ID0gZmFsc2U7XG4gIGNvbnN0IFsgcGFydDEsIG9wMSwgcGFydDIsIG9wMiwgcGFydDMgXSA9IHJhbmdlU3RyaW5nLnNwbGl0KC8oXFwuPzpcXC4/KS8pO1xuICBpZiAob3AyIHx8IHBhcnQzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgdHJpbSA9IHRyaW1EaXJlY3Rpb24oISFvcDEgJiYgb3AxWzBdID09PSAnLicsICEhb3AxICYmIG9wMVtvcDEubGVuZ3RoIC0gMV0gPT09ICcuJyk7XG4gIGNvbnN0IHAxID0gc3BsaXRBMShwYXJ0MSk7XG4gIGNvbnN0IHAyID0gcGFydDIgPyBzcGxpdEExKHBhcnQyKSA6IG51bGw7XG4gIGlmICghcDEgfHwgKHBhcnQyICYmICFwMikpIHtcbiAgICAvLyBpbnZhbGlkIHNlY3Rpb25cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBwYXJ0IDEgYml0c1xuICBpZiAocDFbMF0gIT0gbnVsbCAmJiBwMVsxXSAhPSBudWxsKSB7XG4gICAgWyB0b3AsIGxlZnQsICR0b3AsICRsZWZ0IF0gPSBwMTtcbiAgfVxuICBlbHNlIGlmIChwMVswXSA9PSBudWxsICYmIHAxWzFdICE9IG51bGwpIHtcbiAgICBbICwgbGVmdCwgLCAkbGVmdCBdID0gcDE7XG4gIH1cbiAgZWxzZSBpZiAocDFbMF0gIT0gbnVsbCAmJiBwMVsxXSA9PSBudWxsKSB7XG4gICAgWyB0b3AsICwgJHRvcCBdID0gcDE7XG4gIH1cbiAgLy8gcGFydCAyIGJpdHNcbiAgaWYgKCFwYXJ0Mikge1xuICAgIC8vIHBhcnQgMiBtdXN0IGV4aXN0IGlmIGVpdGhlciB0b3Agb3IgbGVmdCBpcyBudWxsOlxuICAgIC8vIHRoaXMgZGlzYWxsb3dzIGEgc2luZ2xlIG51bSBvciBjb2wgcGF0dGVybnNcbiAgICBpZiAodG9wID09IG51bGwgfHwgbGVmdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYm90dG9tID0gdG9wO1xuICAgIHJpZ2h0ID0gbGVmdDtcbiAgICAkYm90dG9tID0gJHRvcDtcbiAgICAkcmlnaHQgPSAkbGVmdDtcbiAgfVxuICBlbHNlIGlmIChwMlswXSAhPSBudWxsICYmIHAyWzFdICE9IG51bGwpIHtcbiAgICBbIGJvdHRvbSwgcmlnaHQsICRib3R0b20sICRyaWdodCBdID0gcDI7XG4gIH1cbiAgZWxzZSBpZiAocDJbMF0gPT0gbnVsbCAmJiBwMlsxXSAhPSBudWxsKSB7XG4gICAgWyAsIHJpZ2h0LCAsICRyaWdodCBdID0gcDI7XG4gIH1cbiAgZWxzZSBpZiAocDJbMF0gIT0gbnVsbCAmJiBwMlsxXSA9PSBudWxsKSB7XG4gICAgWyBib3R0b20sICwgJGJvdHRvbSBdID0gcDI7XG4gIH1cbiAgLy8gZmxpcCBsZWZ0L3JpZ2h0IGFuZCB0b3AvYm90dG9tIGFzIG5lZWRlZFxuICAvLyBmb3IgcGFydGlhbCByYW5nZXMgd2UgcGVyZmVyIHRoZSBjb29yZCBvbiB0aGUgbGVmdC1zaWRlIG9mIHRoZSA6XG4gIGlmIChyaWdodCAhPSBudWxsICYmIChsZWZ0ID09IG51bGwgfHwgKGxlZnQgIT0gbnVsbCAmJiByaWdodCA8IGxlZnQpKSkge1xuICAgIFsgbGVmdCwgcmlnaHQsICRsZWZ0LCAkcmlnaHQgXSA9IFsgcmlnaHQsIGxlZnQsICRyaWdodCwgJGxlZnQgXTtcbiAgfVxuICBpZiAoYm90dG9tICE9IG51bGwgJiYgKHRvcCA9PSBudWxsIHx8ICh0b3AgIT0gbnVsbCAmJiBib3R0b20gPCB0b3ApKSkge1xuICAgIFsgdG9wLCBib3R0b20sICR0b3AsICRib3R0b20gXSA9IFsgYm90dG9tLCB0b3AsICRib3R0b20sICR0b3AgXTtcbiAgfVxuICBjb25zdCByID0geyB0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQsICR0b3AsICRsZWZ0LCAkYm90dG9tLCAkcmlnaHQgfTtcbiAgaWYgKHRyaW0pIHsgci50cmltID0gdHJpbTsgfVxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyByZWZlcmVuY2UgaW50byBhbiBvYmplY3QgcmVwcmVzZW50aW5nIGl0LlxuICpcbiAqIGBgYGpzXG4gKiBwYXJzZUExUmVmKCdTaGVldDEhQSQxOiRCMicpO1xuICogLy8gPT4ge1xuICogLy8gICBjb250ZXh0OiBbICdTaGVldDEnIF0sXG4gKiAvLyAgIHJhbmdlOiB7XG4gKiAvLyAgICAgdG9wOiAwLFxuICogLy8gICAgIGxlZnQ6IDAsXG4gKiAvLyAgICAgYm90dG9tOiAxLFxuICogLy8gICAgIHJpZ2h0OiAxXG4gKiAvLyAgICAgJHRvcDogdHJ1ZSxcbiAqIC8vICAgICAkbGVmdDogZmFsc2UsXG4gKiAvLyAgICAgJGJvdHRvbTogZmFsc2UsXG4gKiAvLyAgICAgJHJpZ2h0OiB0cnVlXG4gKiAvLyAgIH1cbiAqIC8vIH1cbiAqIGBgYFxuICpcbiAqIEZvciBBOkEgb3IgQTE6QSBzdHlsZSByYW5nZXMsIGBudWxsYCB3aWxsIGJlIHVzZWQgZm9yIGFueSBkaW1lbnNpb25zIHRoYXQgdGhlXG4gKiBzeW50YXggZG9lcyBub3Qgc3BlY2lmeTpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVmU3RyaW5nICBBbiBBMS1zdHlsZSByZWZlcmVuY2Ugc3RyaW5nXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dICBPcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFsbG93TmFtZWQ9dHJ1ZV0gIEVuYWJsZSBwYXJzaW5nIG5hbWVzIGFzIHdlbGwgYXMgcmFuZ2VzLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hbGxvd1Rlcm5hcnk9ZmFsc2VdICBFbmFibGVzIHRoZSByZWNvZ25pdGlvbiBvZiB0ZXJuYXJ5IHJhbmdlcyBpbiB0aGUgc3R5bGUgb2YgYEExOkFgIG9yIGBBMToxYC4gVGhlc2UgYXJlIHN1cHBvcnRlZCBieSBHb29nbGUgU2hlZXRzIGJ1dCBub3QgRXhjZWwuIFNlZTogUmVmZXJlbmNlcy5tZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMueGxzeD1mYWxzZV0gIFN3aXRjaGVzIHRvIHRoZSBgWzFdU2hlZXQxIUExYCBvciBgWzFdIW5hbWVgIHByZWZpeCBzeW50YXggZm9ybSBmb3IgZXh0ZXJuYWwgd29ya2Jvb2tzLiBTZWU6IFtQcmVmaXhlcy5tZF0oLi9QcmVmaXhlcy5tZClcbiAqIEByZXR1cm5zIHsoUmVmZXJlbmNlQTF8bnVsbCl9IEFuIG9iamVjdCByZXByZXNlbnRpbmcgYSB2YWxpZCByZWZlcmVuY2Ugb3IgbnVsbCBpZiBpdCBpcyBpbnZhbGlkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBMVJlZiAocmVmU3RyaW5nLCB7IGFsbG93TmFtZWQgPSB0cnVlLCBhbGxvd1Rlcm5hcnkgPSBmYWxzZSwgeGxzeCA9IGZhbHNlIH0gPSB7fSkge1xuICBjb25zdCBkID0gcGFyc2VSZWYocmVmU3RyaW5nLCB7IGFsbG93TmFtZWQsIGFsbG93VGVybmFyeSwgeGxzeCwgcjFjMTogZmFsc2UgfSk7XG4gIGlmIChkICYmIChkLnIwIHx8IGQubmFtZSkpIHtcbiAgICBsZXQgcmFuZ2UgPSBudWxsO1xuICAgIGlmIChkLnIwKSB7XG4gICAgICByYW5nZSA9IGZyb21BMShkLnIxID8gZC5yMCArIGQub3BlcmF0b3IgKyBkLnIxIDogZC5yMCk7XG4gICAgfVxuICAgIGlmIChyYW5nZSkge1xuICAgICAgcmV0dXJuIHhsc3hcbiAgICAgICAgPyB7IHdvcmtib29rTmFtZTogZC53b3JrYm9va05hbWUsIHNoZWV0TmFtZTogZC5zaGVldE5hbWUsIHJhbmdlIH1cbiAgICAgICAgOiB7IGNvbnRleHQ6IGQuY29udGV4dCwgcmFuZ2UgfTtcbiAgICB9XG4gICAgaWYgKGQubmFtZSkge1xuICAgICAgcmV0dXJuIHhsc3hcbiAgICAgICAgPyB7IHdvcmtib29rTmFtZTogZC53b3JrYm9va05hbWUsIHNoZWV0TmFtZTogZC5zaGVldE5hbWUsIG5hbWU6IGQubmFtZSB9XG4gICAgICAgIDogeyBjb250ZXh0OiBkLmNvbnRleHQsIG5hbWU6IGQubmFtZSB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBHZXQgYW4gQTEtc3R5bGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgcmVmZXJlbmNlIG9iamVjdC5cbiAqXG4gKiBgYGBqc1xuICogc3RyaW5naWZ5QTFSZWYoe1xuICogICBjb250ZXh0OiBbICdTaGVldDEnIF0sXG4gKiAgIHJhbmdlOiB7XG4gKiAgICAgdG9wOiAwLFxuICogICAgIGxlZnQ6IDAsXG4gKiAgICAgYm90dG9tOiAxLFxuICogICAgIHJpZ2h0OiAxLFxuICogICAgICR0b3A6IHRydWUsXG4gKiAgICAgJGxlZnQ6IGZhbHNlLFxuICogICAgICRib3R0b206IGZhbHNlLFxuICogICAgICRyaWdodDogdHJ1ZVxuICogICB9XG4gKiB9KTtcbiAqIC8vID0+ICdTaGVldDEhQSQxOiRCMidcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7UmVmZXJlbmNlQTF9IHJlZk9iamVjdCBBIHJlZmVyZW5jZSBvYmplY3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gIE9wdGlvbnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMueGxzeD1mYWxzZV0gIFN3aXRjaGVzIHRvIHRoZSBgWzFdU2hlZXQxIUExYCBvciBgWzFdIW5hbWVgIHByZWZpeCBzeW50YXggZm9ybSBmb3IgZXh0ZXJuYWwgd29ya2Jvb2tzLiBTZWU6IFtQcmVmaXhlcy5tZF0oLi9QcmVmaXhlcy5tZClcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSByZWZlcmVuY2UgaW4gQTEtc3R5bGUgc3RyaW5nIGZvcm1hdFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5QTFSZWYgKHJlZk9iamVjdCwgeyB4bHN4ID0gZmFsc2UgfSA9IHt9KSB7XG4gIGNvbnN0IHByZWZpeCA9IHhsc3hcbiAgICA/IHN0cmluZ2lmeVByZWZpeEFsdChyZWZPYmplY3QpXG4gICAgOiBzdHJpbmdpZnlQcmVmaXgocmVmT2JqZWN0KTtcbiAgcmV0dXJuIHByZWZpeCArIChcbiAgICByZWZPYmplY3QubmFtZSA/IHJlZk9iamVjdC5uYW1lIDogdG9BMShyZWZPYmplY3QucmFuZ2UpXG4gICk7XG59XG5cbi8qKlxuICogRmlsbCB0aGUgYW55IG1pc3NpbmcgYm91bmRzIGluIHJhbmdlIG9iamVjdHMuIFRvcCB3aWxsIGJlIHNldCB0byAwLCBib3R0b20gdG9cbiAqIDEwNDg1NzUsIGxlZnQgdG8gMCwgYW5kIHJpZ2h0IHRvIDE2MzgzLCBpZiB0aGV5IGFyZSBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gKlxuICogYGBganNcbiAqIGFkZEExUmFuZ2VCb3VuZHMoe1xuICogICBjb250ZXh0OiBbICdTaGVldDEnIF0sXG4gKiAgIHJhbmdlOiB7XG4gKiAgICAgdG9wOiAwLFxuICogICAgIGxlZnQ6IDAsXG4gKiAgICAgYm90dG9tOiAxLFxuICogICAgICR0b3A6IHRydWUsXG4gKiAgICAgJGxlZnQ6IGZhbHNlLFxuICogICAgICRib3R0b206IGZhbHNlLFxuICogICB9XG4gKiB9KTtcbiAqIC8vID0+IHtcbiAqIC8vICAgY29udGV4dDogWyAnU2hlZXQxJyBdLFxuICogLy8gICByYW5nZToge1xuICogLy8gICAgIHRvcDogMCxcbiAqIC8vICAgICBsZWZ0OiAwLFxuICogLy8gICAgIGJvdHRvbTogMSxcbiAqIC8vICAgICByaWdodDogMTYzODMsXG4gKiAvLyAgICAgJHRvcDogdHJ1ZSxcbiAqIC8vICAgICAkbGVmdDogZmFsc2UsXG4gKiAvLyAgICAgJGJvdHRvbTogZmFsc2UsXG4gKiAvLyAgICAgJHJpZ2h0OiBmYWxzZVxuICogLy8gICB9XG4gKiAvLyB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1JhbmdlQTF9IHJhbmdlIFRoZSByYW5nZSBwYXJ0IG9mIGEgcmVmZXJlbmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtSYW5nZUExfSBzYW1lIHJhbmdlIHdpdGggbWlzc2luZyBib3VuZHMgZmlsbGVkIGluLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkQTFSYW5nZUJvdW5kcyAocmFuZ2UpIHtcbiAgaWYgKHJhbmdlLnRvcCA9PSBudWxsKSB7XG4gICAgcmFuZ2UudG9wID0gMDtcbiAgICByYW5nZS4kdG9wID0gZmFsc2U7XG4gIH1cbiAgaWYgKHJhbmdlLmJvdHRvbSA9PSBudWxsKSB7XG4gICAgcmFuZ2UuYm90dG9tID0gTUFYX1JPV1M7XG4gICAgcmFuZ2UuJGJvdHRvbSA9IGZhbHNlO1xuICB9XG4gIGlmIChyYW5nZS5sZWZ0ID09IG51bGwpIHtcbiAgICByYW5nZS5sZWZ0ID0gMDtcbiAgICByYW5nZS4kbGVmdCA9IGZhbHNlO1xuICB9XG4gIGlmIChyYW5nZS5yaWdodCA9PSBudWxsKSB7XG4gICAgcmFuZ2UucmlnaHQgPSBNQVhfQ09MUztcbiAgICByYW5nZS4kcmlnaHQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gcmFuZ2U7XG59XG4iLCJpbXBvcnQgeyBwYXJzZVJlZiB9IGZyb20gJy4vcGFyc2VSZWYuanMnO1xuaW1wb3J0IHsgcGFyc2VTUmFuZ2UgfSBmcm9tICcuL3BhcnNlU1JhbmdlLmpzJztcblxuLyoqXG4gKiBQYXJzZSBhIHN0cnVjdHVyZWQgcmVmZXJlbmNlIHN0cmluZyBpbnRvIGFuIG9iamVjdCByZXByZXNlbnRpbmcgaXQuXG4gKlxuICogYGBganNcbiAqIHBhcnNlU3RydWN0UmVmKCd3b3JrYm9vay54bHN4IXRhYmxlTmFtZVtbI0RhdGFdLFtDb2x1bW4xXTpbQ29sdW1uMl1dJyk7XG4gKiAvLyA9PiB7XG4gKiAvLyAgIGNvbnRleHQ6IFsgJ3dvcmtib29rLnhsc3gnIF0sXG4gKiAvLyAgIHNlY3Rpb25zOiBbICdkYXRhJyBdLFxuICogLy8gICBjb2x1bW5zOiBbICdteSBjb2x1bW4nLCAnQGZvbycgXSxcbiAqIC8vICAgdGFibGU6ICd0YWJsZU5hbWUnLFxuICogLy8gfVxuICogYGBgXG4gKlxuICogRm9yIEE6QSBvciBBMTpBIHN0eWxlIHJhbmdlcywgYG51bGxgIHdpbGwgYmUgdXNlZCBmb3IgYW55IGRpbWVuc2lvbnMgdGhhdCB0aGVcbiAqIHN5bnRheCBkb2VzIG5vdCBzcGVjaWZ5OlxuICpcbiAqIEB0dXRvcmlhbCBSZWZlcmVuY2VzLm1kXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVmICBBIHN0cnVjdHVyZWQgcmVmZXJlbmNlIHN0cmluZ1xuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSAgT3B0aW9uc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy54bHN4PWZhbHNlXSAgU3dpdGNoZXMgdG8gdGhlIGBbMV1TaGVldDEhQTFgIG9yIGBbMV0hbmFtZWAgcHJlZml4IHN5bnRheCBmb3JtIGZvciBleHRlcm5hbCB3b3JrYm9va3MuIFNlZTogW1ByZWZpeGVzLm1kXSguL1ByZWZpeGVzLm1kKVxuICogQHJldHVybnMgeyhSZWZlcmVuY2VTdHJ1Y3R8bnVsbCl9IEFuIG9iamVjdCByZXByZXNlbnRpbmcgYSB2YWxpZCByZWZlcmVuY2Ugb3IgbnVsbCBpZiBpdCBpcyBpbnZhbGlkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdHJ1Y3RSZWYgKHJlZiwgb3B0aW9ucyA9IHsgeGxzeDogZmFsc2UgfSkge1xuICBjb25zdCByID0gcGFyc2VSZWYocmVmLCBvcHRpb25zKTtcbiAgaWYgKHIgJiYgci5zdHJ1Y3QpIHtcbiAgICBjb25zdCBzdHJ1Y3REYXRhID0gcGFyc2VTUmFuZ2Uoci5zdHJ1Y3QpO1xuICAgIGlmIChzdHJ1Y3REYXRhICYmIHN0cnVjdERhdGEubGVuZ3RoID09PSByLnN0cnVjdC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLnhsc3hcbiAgICAgICAgPyB7XG4gICAgICAgICAgd29ya2Jvb2tOYW1lOiByLndvcmtib29rTmFtZSxcbiAgICAgICAgICBzaGVldE5hbWU6IHIuc2hlZXROYW1lLFxuICAgICAgICAgIHRhYmxlOiByLm5hbWUsXG4gICAgICAgICAgY29sdW1uczogc3RydWN0RGF0YS5jb2x1bW5zLFxuICAgICAgICAgIHNlY3Rpb25zOiBzdHJ1Y3REYXRhLnNlY3Rpb25zXG4gICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgY29udGV4dDogci5jb250ZXh0LFxuICAgICAgICAgIHRhYmxlOiByLm5hbWUsXG4gICAgICAgICAgY29sdW1uczogc3RydWN0RGF0YS5jb2x1bW5zLFxuICAgICAgICAgIHNlY3Rpb25zOiBzdHJ1Y3REYXRhLnNlY3Rpb25zXG4gICAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuIiwiaW1wb3J0IHsgUkVGX1JBTkdFLCBSRUZfQkVBTSwgUkVGX1RFUk5BUlksIFVOS05PV04sIFJFRl9TVFJVQ1QgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBwYXJzZUExUmVmIH0gZnJvbSAnLi9hMS5qcyc7XG5pbXBvcnQgeyBwYXJzZVN0cnVjdFJlZiB9IGZyb20gJy4vcGFyc2VTdHJ1Y3RSZWYuanMnO1xuXG5mdW5jdGlvbiBnZXRJRGVyICgpIHtcbiAgbGV0IGkgPSAxO1xuICByZXR1cm4gKCkgPT4gJ2Z4ZycgKyAoaSsrKTtcbn1cblxuZnVuY3Rpb24gc2FtZVZhbHVlIChhLCBiKSB7XG4gIGlmIChhID09IG51bGwgJiYgYiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbmZ1bmN0aW9uIHNhbWVBcnJheSAoYSwgYikge1xuICBpZiAoKEFycmF5LmlzQXJyYXkoYSkgIT09IEFycmF5LmlzQXJyYXkoYikpIHx8IGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIXNhbWVWYWx1ZShhW2ldLCBiW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2FtZVN0ciAoYSwgYikge1xuICBpZiAoIWEgJiYgIWIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gU3RyaW5nKGEpLnRvTG93ZXJDYXNlKCkgPT09IFN0cmluZyhiKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBpc0VxdWl2YWxlbnQgKHJlZkEsIHJlZkIpIHtcbiAgLy8gaWYgbmFtZWQsIG5hbWUgbXVzdCBtYXRjaFxuICBpZiAoKHJlZkEubmFtZSB8fCByZWZCLm5hbWUpICYmIHJlZkEubmFtZSAhPT0gcmVmQi5uYW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIGlmIHN0cnVjdHVyZWRcbiAgaWYgKChyZWZBLmNvbHVtbnMgfHwgcmVmQi5jb2x1bW5zKSkge1xuICAgIGlmIChyZWZBLnRhYmxlICE9PSByZWZCLnRhYmxlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghc2FtZUFycmF5KHJlZkEuY29sdW1ucywgcmVmQi5jb2x1bW5zKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXNhbWVBcnJheShyZWZBLnNlY3Rpb25zLCByZWZCLnNlY3Rpb25zKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBpZiByYW5nZWQsIHJhbmdlIG11c3QgaGF2ZSB0aGUgc2FtZSBkaW1lbnNpb25zICh3ZSBkb24ndCBjYXJlIGFib3V0ICQpXG4gIGlmIChyZWZBLnJhbmdlIHx8IHJlZkIucmFuZ2UpIHtcbiAgICBpZiAoXG4gICAgICAhc2FtZVZhbHVlKHJlZkEucmFuZ2UudG9wLCByZWZCLnJhbmdlLnRvcCkgfHxcbiAgICAgICFzYW1lVmFsdWUocmVmQS5yYW5nZS5ib3R0b20sIHJlZkIucmFuZ2UuYm90dG9tKSB8fFxuICAgICAgIXNhbWVWYWx1ZShyZWZBLnJhbmdlLmxlZnQsIHJlZkIucmFuZ2UubGVmdCkgfHxcbiAgICAgICFzYW1lVmFsdWUocmVmQS5yYW5nZS5yaWdodCwgcmVmQi5yYW5nZS5yaWdodClcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gbXVzdCBoYXZlIHNhbWUgY29udGV4dFxuICBpZiAoXG4gICAgIXNhbWVTdHIocmVmQS53b3JrYm9va05hbWUsIHJlZkIud29ya2Jvb2tOYW1lKSB8fFxuICAgICFzYW1lU3RyKHJlZkEuc2hlZXROYW1lLCByZWZCLnNoZWV0TmFtZSlcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBhZGRDb250ZXh0IChyZWYsIHNoZWV0TmFtZSwgd29ya2Jvb2tOYW1lKSB7XG4gIGlmICghcmVmLnNoZWV0TmFtZSkge1xuICAgIHJlZi5zaGVldE5hbWUgPSBzaGVldE5hbWU7XG4gIH1cbiAgaWYgKCFyZWYud29ya2Jvb2tOYW1lKSB7XG4gICAgcmVmLndvcmtib29rTmFtZSA9IHdvcmtib29rTmFtZTtcbiAgfVxuICByZXR1cm4gcmVmO1xufVxuXG4vKipcbiAqIFJ1bnMgdGhyb3VnaCBhIGxpc3Qgb2YgdG9rZW5zIGFuZCBhZGRzIGV4dHJhIGF0dHJpYnV0ZXMgc3VjaCBhcyBtYXRjaGluZ1xuICogcGFyZW5zIGFuZCByYW5nZXMuXG4gKlxuICogVGhlIGBjb250ZXh0YCBwYXJhbWV0ZXIgZGVmaW5lcyBkZWZhdWx0IHJlZmVyZW5jZSBhdHRyaWJ1dGVzOlxuICogYHsgd29ya2Jvb2tOYW1lOiAncmVwb3J0Lnhsc3gnLCBzaGVldE5hbWU6ICdTaGVldDEnIH1gLlxuICogSWYgc3VwcGxpZWQsIHRoZXNlIGFyZSB1c2VkIHRvIG1hdGNoIGBBMWAgdG8gYFNoZWV0MSFBMWAuXG4gKlxuICogQWxsIHRva2VucyB3aWxsIGJlIHRhZ2dlZCB3aXRoIGEgYC5kZXB0aGAgbnVtYmVyIHZhbHVlIHRvIGluZGljYXRpbmcgdGhlXG4gKiBsZXZlbCBvZiBuZXN0aW5nIGluIHBhcmVudGhlc2VzIGFzIHdlbGwgYXMgYW4gYC5pbmRleGAgbnVtYmVyIGluZGljYXRpbmdcbiAqIHRoZWlyIHplcm8gYmFzZWQgcG9zaXRpb24gaW4gdGhlIGxpc3QuXG4gKlxuICogVGhlIHJldHVybmVkIG91dHB1dCB3aWxsIGJlIHRoZSBzYW1lIGFycmF5IG9mIHRva2VucyBidXQgdGhlIGZvbGxvd2luZ1xuICogcHJvcGVydGllcyB3aWxsIGFkZGVkIHRvIHRva2VucyAoYXMgYXBwbGljYWJsZSk6XG4gKlxuICogIyMjIyBQYXJlbnRoZXNlcyAoIClcbiAqXG4gKiBNYXRjaGluZyBwYXJlbnMgd2lsbCBiZSB0YWdnZWQgd2l0aCBgLmdyb3VwSWRgIHN0cmluZyBpZGVudGlmaWVyIGFzIHdlbGwgYXNcbiAqIGEgYC5kZXB0aGAgbnVtYmVyIHZhbHVlIChpbmRpY2F0aW5nIHRoZSBsZXZlbCBvZiBuZXN0aW5nKS5cbiAqXG4gKiBDbG9zaW5nIHBhcmVucyB3aXRob3V0IGEgY291bnRlcnBhcnQgd2lsbCBiZSB0YWdnZWQgd2l0aCBgLmVycm9yYFxuICogKGJvb2xlYW4gdHJ1ZSkuXG4gKlxuICogIyMjIyBDdXJseSBicmFja2V0cyB7IH1cbiAqXG4gKiBNYXRjaGluZyBjdXJseSBicmFja2V0cyB3aWxsIGJlIHRhZ2dlZCB3aXRoIGAuZ3JvdXBJZGAgc3RyaW5nIGlkZW50aWZpZXIuXG4gKiBUaGVzZSBtYXkgbm90IGJlIG5lc3RlZCBpbiBFeGNlbC5cbiAqXG4gKiBDbG9zaW5nIGN1cmx5IGJyYWNrZXRzIHdpdGhvdXQgYSBjb3VudGVycGFydCB3aWxsIGJlIHRhZ2dlZCB3aXRoIGAuZXJyb3JgXG4gKiAoYm9vbGVhbiBgdHJ1ZWApLlxuICpcbiAqICMjIyMgUmFuZ2VzIChgUkVGX1JBTkdFYCBvciBgUkVGX0JFQU1gIHR5cGUgdG9rZW5zKVxuICpcbiAqIEFsbCByYW5nZXMgd2lsbCBiZSB0YWdnZWQgd2l0aCBgLmdyb3VwSWRgIHN0cmluZyBpZGVudGlmaWVyIHJlZ2FyZGxlc3Mgb2ZcbiAqIHRoZSBudW1iZXIgb2YgdGltZXMgdGhleSBvY2N1ci5cbiAqXG4gKiAjIyMjIFRva2VucyBvZiB0eXBlIGBVTktOT1dOYFxuICpcbiAqIEFsbCB3aWxsIGJlIHRhZ2dlZCB3aXRoIGAuZXJyb3JgIChib29sZWFuIGB0cnVlYCkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxUb2tlbj59IHRva2VubGlzdCBBbiBhcnJheSBvZiB0b2tlbnMgKGZyb20gYHRva2VuaXplKClgKVxuICogQHBhcmFtIHtvYmplY3R9IFtjb250ZXh0PXt9XSBBIGNvbnRlc3QgdXNlZCB0byBtYXRjaCBgQTFgIHRvIGBTaGVldDEhQTFgLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb250ZXh0LnNoZWV0TmFtZT0nJ10gQW4gaW1wbGllZCBzaGVldCBuYW1lICgnU2hlZXQxJylcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29udGV4dC53b3JrYm9va05hbWU9JyddIEFuIGltcGxpZWQgd29ya2Jvb2sgbmFtZSAoJ3JlcG9ydC54bHN4JylcbiAqIEByZXR1cm5zIHtBcnJheTxUb2tlbkVuaGFuY2VkPn0gVGhlIGlucHV0IGFycmF5IHdpdGggdGhlIGVuY2hhbmNlZCB0b2tlbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFRva2VuTWV0YSAodG9rZW5saXN0LCB7IHNoZWV0TmFtZSA9ICcnLCB3b3JrYm9va05hbWUgPSAnJyB9ID0ge30pIHtcbiAgY29uc3QgcGFyZW5TdGFjayA9IFtdO1xuICBsZXQgYXJyYXlTdGFydCA9IG51bGw7XG4gIGNvbnN0IHVpZCA9IGdldElEZXIoKTtcbiAgY29uc3Qga25vd25SZWZzID0gW107XG5cbiAgY29uc3QgZ2V0Q3VyckRlcHRoID0gKCkgPT4gcGFyZW5TdGFjay5sZW5ndGggKyAoYXJyYXlTdGFydCA/IDEgOiAwKTtcblxuICB0b2tlbmxpc3QuZm9yRWFjaCgodG9rZW4sIGkpID0+IHtcbiAgICB0b2tlbi5pbmRleCA9IGk7XG4gICAgdG9rZW4uZGVwdGggPSBnZXRDdXJyRGVwdGgoKTtcbiAgICBpZiAodG9rZW4udmFsdWUgPT09ICcoJykge1xuICAgICAgcGFyZW5TdGFjay5wdXNoKHRva2VuKTtcbiAgICAgIHRva2VuLmRlcHRoID0gZ2V0Q3VyckRlcHRoKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuLnZhbHVlID09PSAnKScpIHtcbiAgICAgIGNvbnN0IGNvdW50ZXIgPSBwYXJlblN0YWNrLnBvcCgpO1xuICAgICAgaWYgKGNvdW50ZXIpIHtcbiAgICAgICAgY29uc3QgcGFpcklkID0gdWlkKCk7XG4gICAgICAgIHRva2VuLmdyb3VwSWQgPSBwYWlySWQ7XG4gICAgICAgIHRva2VuLmRlcHRoID0gY291bnRlci5kZXB0aDtcbiAgICAgICAgY291bnRlci5ncm91cElkID0gcGFpcklkO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRva2VuLmVycm9yID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW4udmFsdWUgPT09ICd7Jykge1xuICAgICAgaWYgKCFhcnJheVN0YXJ0KSB7XG4gICAgICAgIGFycmF5U3RhcnQgPSB0b2tlbjtcbiAgICAgICAgdG9rZW4uZGVwdGggPSBnZXRDdXJyRGVwdGgoKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0b2tlbi5lcnJvciA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuLnZhbHVlID09PSAnfScpIHtcbiAgICAgIGlmIChhcnJheVN0YXJ0KSB7XG4gICAgICAgIGNvbnN0IHBhaXJJZCA9IHVpZCgpO1xuICAgICAgICB0b2tlbi5ncm91cElkID0gcGFpcklkO1xuICAgICAgICB0b2tlbi5kZXB0aCA9IGFycmF5U3RhcnQuZGVwdGg7XG4gICAgICAgIGFycmF5U3RhcnQuZ3JvdXBJZCA9IHBhaXJJZDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0b2tlbi5lcnJvciA9IHRydWU7XG4gICAgICB9XG4gICAgICBhcnJheVN0YXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZSBpZiAoXG4gICAgICB0b2tlbi50eXBlID09PSBSRUZfUkFOR0UgfHxcbiAgICAgIHRva2VuLnR5cGUgPT09IFJFRl9CRUFNIHx8XG4gICAgICB0b2tlbi50eXBlID09PSBSRUZfVEVSTkFSWSB8fFxuICAgICAgdG9rZW4udHlwZSA9PT0gUkVGX1NUUlVDVFxuICAgICkge1xuICAgICAgY29uc3QgcmVmID0gKHRva2VuLnR5cGUgPT09IFJFRl9TVFJVQ1QpXG4gICAgICAgID8gcGFyc2VTdHJ1Y3RSZWYodG9rZW4udmFsdWUsIHsgeGxzeDogdHJ1ZSB9KVxuICAgICAgICA6IHBhcnNlQTFSZWYodG9rZW4udmFsdWUsIHsgYWxsb3dUZXJuYXJ5OiB0cnVlLCB4bHN4OiB0cnVlIH0pO1xuICAgICAgaWYgKHJlZiAmJiAocmVmLnJhbmdlIHx8IHJlZi5jb2x1bW5zKSkge1xuICAgICAgICByZWYuc291cmNlID0gdG9rZW4udmFsdWU7XG4gICAgICAgIGFkZENvbnRleHQocmVmLCBzaGVldE5hbWUsIHdvcmtib29rTmFtZSk7XG4gICAgICAgIGNvbnN0IGtub3duID0ga25vd25SZWZzLmZpbmQoZCA9PiBpc0VxdWl2YWxlbnQoZCwgcmVmKSk7XG4gICAgICAgIGlmIChrbm93bikge1xuICAgICAgICAgIHRva2VuLmdyb3VwSWQgPSBrbm93bi5ncm91cElkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJlZi5ncm91cElkID0gdWlkKCk7XG4gICAgICAgICAgdG9rZW4uZ3JvdXBJZCA9IHJlZi5ncm91cElkO1xuICAgICAgICAgIGtub3duUmVmcy5wdXNoKHJlZik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gVU5LTk9XTikge1xuICAgICAgdG9rZW4uZXJyb3IgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0b2tlbmxpc3Q7XG59XG4iLCIvKlxuKiogUkMgbm90YXRpb24gd29ya3MgZGlmZmVyZW50bHkgZnJvbSBBMSBpbiB0aGF0IHdlIGNhbid0IG1lcmdlIHN0YXRpY1xuKiogcmVmZXJlbmNlcyBqb2luZWQgYnkgYDpgLiBNZXJnaW5nIGNhbiBvbmx5IHdvcmsgYmV0d2VlbiByZWZlcmVuY2VzXG4qKiB0aGF0IGFyZSByZWxhdGl2ZS9hYnNvbHV0ZSBvbiB0aGUgc2FtZSBheGVzLCBzbzpcbioqIC0gUjFDMTpSMkMyIHdpbGwgd29yayxcbioqIC0gUlsxXUMxOlJbMl1DMiB3aWxsIGFsc28gd29yaywgYnV0XG4qKiAtIFJbMV1DWzFdOlIyQzIgZG9lc24ndCBoYXZlIGEgZGlyZWN0IHJlY3RhbmdsZSByZXByZXNlbnRpb24gd2l0aG91dCBjb250ZXh0LlxuKi9cbmltcG9ydCB7IHJhbmdlT3BlcmF0b3IsIHRyaW1EaXJlY3Rpb24gfSBmcm9tICcuL2ExLmpzJztcbmltcG9ydCB7IE1BWF9ST1dTLCBNQVhfQ09MUyB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IHBhcnNlUmVmIH0gZnJvbSAnLi9wYXJzZVJlZi5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlQcmVmaXgsIHN0cmluZ2lmeVByZWZpeEFsdCB9IGZyb20gJy4vc3RyaW5naWZ5UHJlZml4LmpzJztcblxuY29uc3QgY2xhbXAgPSAobWluLCB2YWwsIG1heCkgPT4gTWF0aC5taW4oTWF0aC5tYXgodmFsLCBtaW4pLCBtYXgpO1xuXG5mdW5jdGlvbiB0b0Nvb3JkICh2YWx1ZSwgaXNBYnMpIHtcbiAgaWYgKGlzQWJzKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSArIDEpO1xuICB9XG4gIHJldHVybiB2YWx1ZSA/ICdbJyArIHZhbHVlICsgJ10nIDogJyc7XG59XG5cbi8qKlxuICogU3RyaW5naWZ5IGEgcmFuZ2Ugb2JqZWN0IGludG8gUjFDMSBzeW50YXguXG4gKlxuICogQGlnbm9yZVxuICogQHByaXZhdGVcbiAqIEBzZWUgcGFyc2VSMUMxUmVmXG4gKiBAcGFyYW0ge1JhbmdlUjFDMX0gcmFuZ2UgIEEgcmFuZ2Ugb2JqZWN0XG4gKiBAcmV0dXJucyB7c3RyaW5nfSAgQW4gUjFDMS1zdHlsZSBzdHJpbmcgcmVwcmVzZW5hdGlvbiBvZiBhIHJhbmdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1IxQzEgKHJhbmdlKSB7XG4gIGxldCB7IHIwLCBjMCwgcjEsIGMxIH0gPSByYW5nZTtcbiAgY29uc3QgeyAkYzAsICRjMSwgJHIwLCAkcjEgfSA9IHJhbmdlO1xuICBjb25zdCBudWxsUjAgPSByMCA9PSBudWxsO1xuICBjb25zdCBudWxsQzAgPSBjMCA9PSBudWxsO1xuICBsZXQgbnVsbFIxID0gcjEgPT0gbnVsbDtcbiAgbGV0IG51bGxDMSA9IGMxID09IG51bGw7XG4gIGNvbnN0IG9wID0gcmFuZ2VPcGVyYXRvcihyYW5nZS50cmltKTtcbiAgY29uc3QgaGFzVHJpbSA9ICEhcmFuZ2UudHJpbTtcbiAgcjAgPSBjbGFtcCgkcjAgPyAwIDogLU1BWF9ST1dTLCByMCB8IDAsIE1BWF9ST1dTKTtcbiAgYzAgPSBjbGFtcCgkYzAgPyAwIDogLU1BWF9DT0xTLCBjMCB8IDAsIE1BWF9DT0xTKTtcbiAgaWYgKCFudWxsUjAgJiYgbnVsbFIxICYmICFudWxsQzAgJiYgbnVsbEMxKSB7XG4gICAgcjEgPSByMDtcbiAgICBudWxsUjEgPSBmYWxzZTtcbiAgICBjMSA9IGMwO1xuICAgIG51bGxDMSA9IGZhbHNlO1xuICB9XG4gIGVsc2Uge1xuICAgIHIxID0gY2xhbXAoJHIxID8gMCA6IC1NQVhfUk9XUywgcjEgfCAwLCBNQVhfUk9XUyk7XG4gICAgYzEgPSBjbGFtcCgkYzEgPyAwIDogLU1BWF9DT0xTLCBjMSB8IDAsIE1BWF9DT0xTKTtcbiAgfVxuICAvLyBDOkNcbiAgY29uc3QgYWxsUm93cyA9IHIwID09PSAwICYmIHIxID49IE1BWF9ST1dTO1xuICBpZiAoKGFsbFJvd3MgJiYgIW51bGxDMCAmJiAhbnVsbEMxKSB8fCAobnVsbFIwICYmIG51bGxSMSkpIHtcbiAgICBjb25zdCBhID0gdG9Db29yZChjMCwgJGMwKTtcbiAgICBjb25zdCBiID0gdG9Db29yZChjMSwgJGMxKTtcbiAgICByZXR1cm4gJ0MnICsgKGEgPT09IGIgJiYgIWhhc1RyaW0gPyBhIDogYSArIG9wICsgJ0MnICsgYik7XG4gIH1cbiAgLy8gUjpSXG4gIGNvbnN0IGFsbENvbHMgPSBjMCA9PT0gMCAmJiBjMSA+PSBNQVhfQ09MUztcbiAgaWYgKChhbGxDb2xzICYmICFudWxsUjAgJiYgIW51bGxSMSkgfHwgKG51bGxDMCAmJiBudWxsQzEpKSB7XG4gICAgY29uc3QgYSA9IHRvQ29vcmQocjAsICRyMCk7XG4gICAgY29uc3QgYiA9IHRvQ29vcmQocjEsICRyMSk7XG4gICAgcmV0dXJuICdSJyArIChhID09PSBiICYmICFoYXNUcmltID8gYSA6IGEgKyBvcCArICdSJyArIGIpO1xuICB9XG4gIGNvbnN0IHNfcjAgPSB0b0Nvb3JkKHIwLCAkcjApO1xuICBjb25zdCBzX3IxID0gdG9Db29yZChyMSwgJHIxKTtcbiAgY29uc3Qgc19jMCA9IHRvQ29vcmQoYzAsICRjMCk7XG4gIGNvbnN0IHNfYzEgPSB0b0Nvb3JkKGMxLCAkYzEpO1xuICAvLyBSQzpSLCBSQzpDXG4gIGlmIChudWxsUjAgfHwgbnVsbFIxIHx8IG51bGxDMCB8fCBudWxsQzEpIHtcbiAgICByZXR1cm4gKFxuICAgICAgKG51bGxSMCA/ICcnIDogJ1InICsgc19yMCkgK1xuICAgICAgKG51bGxDMCA/ICcnIDogJ0MnICsgc19jMCkgK1xuICAgICAgb3AgK1xuICAgICAgKG51bGxSMSA/ICcnIDogJ1InICsgc19yMSkgK1xuICAgICAgKG51bGxDMSA/ICcnIDogJ0MnICsgc19jMSlcbiAgICApO1xuICB9XG4gIC8vIFJDOlJDXG4gIGlmIChzX3IwICE9PSBzX3IxIHx8IHNfYzAgIT09IHNfYzEpIHtcbiAgICByZXR1cm4gJ1InICsgc19yMCArICdDJyArIHNfYzAgKyBvcCArICdSJyArIHNfcjEgKyAnQycgKyBzX2MxO1xuICB9XG4gIC8vIFJDXG4gIHJldHVybiAnUicgKyBzX3IwICsgJ0MnICsgc19jMDtcbn1cblxuZnVuY3Rpb24gcGFyc2VSMUMxUGFydCAocmVmKSB7XG4gIGxldCByMCA9IG51bGw7XG4gIGxldCBjMCA9IG51bGw7XG4gIGxldCAkcjAgPSBudWxsO1xuICBsZXQgJGMwID0gbnVsbDtcbiAgLy8gUiBwYXJ0XG4gIGNvbnN0IHJtID0gL15SKD86XFxbKFsrLV0/XFxkKylcXF18KFxcZCspKT8vLmV4ZWMocmVmKTtcbiAgaWYgKHJtKSB7XG4gICAgaWYgKHJtWzFdKSB7XG4gICAgICByMCA9IHBhcnNlSW50KHJtWzFdLCAxMCk7XG4gICAgICAkcjAgPSBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAocm1bMl0pIHtcbiAgICAgIHIwID0gcGFyc2VJbnQocm1bMl0sIDEwKSAtIDE7XG4gICAgICAkcjAgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHIwID0gMDtcbiAgICAgICRyMCA9IGZhbHNlO1xuICAgIH1cbiAgICByZWYgPSByZWYuc2xpY2Uocm1bMF0ubGVuZ3RoKTtcbiAgfVxuICAvLyBDIHBhcnRcbiAgY29uc3QgY20gPSAvXkMoPzpcXFsoWystXT9cXGQrKVxcXXwoXFxkKykpPy8uZXhlYyhyZWYpO1xuICBpZiAoY20pIHtcbiAgICBpZiAoY21bMV0pIHtcbiAgICAgIGMwID0gcGFyc2VJbnQoY21bMV0sIDEwKTtcbiAgICAgICRjMCA9IGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChjbVsyXSkge1xuICAgICAgYzAgPSBwYXJzZUludChjbVsyXSwgMTApIC0gMTtcbiAgICAgICRjMCA9IHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYzAgPSAwO1xuICAgICAgJGMwID0gZmFsc2U7XG4gICAgfVxuICAgIHJlZiA9IHJlZi5zbGljZShjbVswXS5sZW5ndGgpO1xuICB9XG4gIC8vIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgcGFydCAoYW5kIG5vdGhpbmcgbW9yZSlcbiAgaWYgKCghcm0gJiYgIWNtKSB8fCByZWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIFsgcjAsIGMwLCAkcjAsICRjMCBdO1xufVxuXG4vKipcbiAqIFBhcnNlIGEgc2ltcGxlIHN0cmluZyByZWZlcmVuY2UgdG8gYW4gUjFDMSByYW5nZSBpbnRvIGEgcmFuZ2Ugb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAaWdub3JlXG4gKiBAc2VlIHBhcnNlQTFSZWZcbiAqIEBwYXJhbSB7c3RyaW5nfSByYW5nZVN0cmluZyAgQSByYW5nZSBzdHJpbmdcbiAqIEByZXR1cm5zIHsoUmFuZ2VSMUMxfG51bGwpfSBBbiBvYmplY3QgcmVwcmVzZW50aW5nIGEgdmFsaWQgcmVmZXJlbmNlIG9yIG51bGwgaWYgaXQgaXMgaW52YWxpZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21SMUMxIChyYW5nZVN0cmluZykge1xuICBsZXQgZmluYWwgPSBudWxsO1xuICBjb25zdCBbIHBhcnQxLCBvcCwgcGFydDIsIG92ZXJmbG93IF0gPSByYW5nZVN0cmluZy5zcGxpdCgvKFxcLj86XFwuPykvKTtcbiAgaWYgKG92ZXJmbG93KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgcmFuZ2UgPSBwYXJzZVIxQzFQYXJ0KHBhcnQxKTtcbiAgY29uc3QgdHJpbSA9IHRyaW1EaXJlY3Rpb24oISFvcCAmJiBvcFswXSA9PT0gJy4nLCAhIW9wICYmIG9wW29wLmxlbmd0aCAtIDFdID09PSAnLicpO1xuICBpZiAocmFuZ2UpIHtcbiAgICBjb25zdCBbIHIwLCBjMCwgJHIwLCAkYzAgXSA9IHJhbmdlO1xuICAgIGlmIChwYXJ0Mikge1xuICAgICAgY29uc3QgZXh0ZW5kVG8gPSBwYXJzZVIxQzFQYXJ0KHBhcnQyKTtcbiAgICAgIGlmIChleHRlbmRUbykge1xuICAgICAgICBmaW5hbCA9IHt9O1xuICAgICAgICBjb25zdCBbIHIxLCBjMSwgJHIxLCAkYzEgXSA9IGV4dGVuZFRvO1xuICAgICAgICAvLyByb3dzXG4gICAgICAgIGlmIChyMCAhPSBudWxsICYmIHIxICE9IG51bGwpIHtcbiAgICAgICAgICBmaW5hbC5yMCA9ICRyMCA9PT0gJHIxID8gTWF0aC5taW4ocjAsIHIxKSA6IHIwO1xuICAgICAgICAgIGZpbmFsLiRyMCA9ICRyMDtcbiAgICAgICAgICBmaW5hbC5yMSA9ICRyMCA9PT0gJHIxID8gTWF0aC5tYXgocjAsIHIxKSA6IHIxO1xuICAgICAgICAgIGZpbmFsLiRyMSA9ICRyMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyMCAhPSBudWxsICYmIHIxID09IG51bGwpIHtcbiAgICAgICAgICAvLyBwYXJ0aWFsIFJDOkNcbiAgICAgICAgICBmaW5hbC5yMCA9IHIwO1xuICAgICAgICAgIGZpbmFsLiRyMCA9ICRyMDtcbiAgICAgICAgICBmaW5hbC5yMSA9IG51bGw7XG4gICAgICAgICAgZmluYWwuJHIxID0gJHIwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHIwID09IG51bGwgJiYgcjEgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIHBhcnRpYWwgQzpSQ1xuICAgICAgICAgIGZpbmFsLnIwID0gcjE7XG4gICAgICAgICAgZmluYWwuJHIwID0gJHIxO1xuICAgICAgICAgIGZpbmFsLnIxID0gbnVsbDtcbiAgICAgICAgICBmaW5hbC4kcjEgPSAkcjE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocjAgPT0gbnVsbCAmJiByMSA9PSBudWxsKSB7XG4gICAgICAgICAgLy8gQzpDXG4gICAgICAgICAgZmluYWwucjAgPSBudWxsO1xuICAgICAgICAgIGZpbmFsLiRyMCA9IGZhbHNlO1xuICAgICAgICAgIGZpbmFsLnIxID0gbnVsbDtcbiAgICAgICAgICBmaW5hbC4kcjEgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb2x1bW5zXG4gICAgICAgIGlmIChjMCAhPSBudWxsICYmIGMxICE9IG51bGwpIHtcbiAgICAgICAgICBmaW5hbC5jMCA9ICRjMCA9PT0gJGMxID8gTWF0aC5taW4oYzAsIGMxKSA6IGMwO1xuICAgICAgICAgIGZpbmFsLiRjMCA9ICRjMDtcbiAgICAgICAgICBmaW5hbC5jMSA9ICRjMCA9PT0gJGMxID8gTWF0aC5tYXgoYzAsIGMxKSA6IGMxO1xuICAgICAgICAgIGZpbmFsLiRjMSA9ICRjMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjMCAhPSBudWxsICYmIGMxID09IG51bGwpIHtcbiAgICAgICAgICBmaW5hbC5jMCA9IGMwO1xuICAgICAgICAgIGZpbmFsLiRjMCA9ICRjMDtcbiAgICAgICAgICBmaW5hbC5jMSA9IG51bGw7XG4gICAgICAgICAgZmluYWwuJGMxID0gJGMwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMwID09IG51bGwgJiYgYzEgIT0gbnVsbCkge1xuICAgICAgICAgIGZpbmFsLmMwID0gYzE7XG4gICAgICAgICAgZmluYWwuJGMwID0gJGMxO1xuICAgICAgICAgIGZpbmFsLmMxID0gbnVsbDtcbiAgICAgICAgICBmaW5hbC4kYzEgPSAkYzE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYzAgPT0gbnVsbCAmJiBjMSA9PSBudWxsKSB7XG4gICAgICAgICAgZmluYWwuYzAgPSBudWxsO1xuICAgICAgICAgIGZpbmFsLiRjMCA9IGZhbHNlO1xuICAgICAgICAgIGZpbmFsLmMxID0gbnVsbDtcbiAgICAgICAgICBmaW5hbC4kYzEgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyByYW5nZSBvbmx5IC0gbm8gc2Vjb25kIHBhcnRcbiAgICBlbHNlIGlmIChyMCAhPSBudWxsICYmIGMwID09IG51bGwpIHtcbiAgICAgIGZpbmFsID0ge1xuICAgICAgICByMDogcjAsXG4gICAgICAgIGMwOiBudWxsLFxuICAgICAgICByMTogcjAsXG4gICAgICAgIGMxOiBudWxsLFxuICAgICAgICAkcjA6ICRyMCxcbiAgICAgICAgJGMwOiBmYWxzZSxcbiAgICAgICAgJHIxOiAkcjAsXG4gICAgICAgICRjMTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKHIwID09IG51bGwgJiYgYzAgIT0gbnVsbCkge1xuICAgICAgZmluYWwgPSB7XG4gICAgICAgIHIwOiBudWxsLFxuICAgICAgICBjMDogYzAsXG4gICAgICAgIHIxOiBudWxsLFxuICAgICAgICBjMTogYzAsXG4gICAgICAgICRyMDogZmFsc2UsXG4gICAgICAgICRjMDogJGMwLFxuICAgICAgICAkcjE6IGZhbHNlLFxuICAgICAgICAkYzE6ICRjMFxuICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBmaW5hbCA9IHtcbiAgICAgICAgcjA6IHIwIHx8IDAsXG4gICAgICAgIGMwOiBjMCB8fCAwLFxuICAgICAgICByMTogcjAgfHwgMCxcbiAgICAgICAgYzE6IGMwIHx8IDAsXG4gICAgICAgICRyMDogJHIwIHx8IGZhbHNlLFxuICAgICAgICAkYzA6ICRjMCB8fCBmYWxzZSxcbiAgICAgICAgJHIxOiAkcjAgfHwgZmFsc2UsXG4gICAgICAgICRjMTogJGMwIHx8IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBpZiAoZmluYWwgJiYgdHJpbSkge1xuICAgIGZpbmFsLnRyaW0gPSB0cmltO1xuICB9XG4gIHJldHVybiBmaW5hbDtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyByZWZlcmVuY2UgaW50byBhbiBvYmplY3QgcmVwcmVzZW50aW5nIGl0LlxuICpcbiAqIGBgYGpzXG4gKiBwYXJzZVIxQzFSZWYoJ1NoZWV0MSFSWzldQzk6Uls5XUM5Jyk7XG4gKiAvLyA9PiB7XG4gKiAvLyAgIGNvbnRleHQ6IFsgJ1NoZWV0MScgXSxcbiAqIC8vICAgcmFuZ2U6IHtcbiAqIC8vICAgICByMDogOSxcbiAqIC8vICAgICBjMDogOCxcbiAqIC8vICAgICByMTogOSxcbiAqIC8vICAgICBjMTogOCxcbiAqIC8vICAgICAkYzA6IHRydWUsXG4gKiAvLyAgICAgJGMxOiB0cnVlXG4gKiAvLyAgICAgJHIwOiBmYWxzZSxcbiAqIC8vICAgICAkcjE6IGZhbHNlXG4gKiAvLyAgIH1cbiAqIC8vIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWZTdHJpbmcgQW4gUjFDMS1zdHlsZSByZWZlcmVuY2Ugc3RyaW5nXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dICBPcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFsbG93TmFtZWQ9dHJ1ZV0gIEVuYWJsZSBwYXJzaW5nIG5hbWVzIGFzIHdlbGwgYXMgcmFuZ2VzLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hbGxvd1Rlcm5hcnk9ZmFsc2VdICBFbmFibGVzIHRoZSByZWNvZ25pdGlvbiBvZiB0ZXJuYXJ5IHJhbmdlcyBpbiB0aGUgc3R5bGUgb2YgYEExOkFgIG9yIGBBMToxYC4gVGhlc2UgYXJlIHN1cHBvcnRlZCBieSBHb29nbGUgU2hlZXRzIGJ1dCBub3QgRXhjZWwuIFNlZTogUmVmZXJlbmNlcy5tZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMueGxzeD1mYWxzZV0gIFN3aXRjaGVzIHRvIHRoZSBgWzFdU2hlZXQxIUExYCBvciBgWzFdIW5hbWVgIHByZWZpeCBzeW50YXggZm9ybSBmb3IgZXh0ZXJuYWwgd29ya2Jvb2tzLiBTZWU6IFtQcmVmaXhlcy5tZF0oLi9QcmVmaXhlcy5tZClcbiAqIEByZXR1cm5zIHsoUmVmZXJlbmNlUjFDMXxudWxsKX0gQW4gb2JqZWN0IHJlcHJlc2VudGluZyBhIHZhbGlkIHJlZmVyZW5jZSBvciBudWxsIGlmIGl0IGlzIGludmFsaWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVIxQzFSZWYgKHJlZlN0cmluZywgeyBhbGxvd05hbWVkID0gdHJ1ZSwgYWxsb3dUZXJuYXJ5ID0gZmFsc2UsIHhsc3ggPSBmYWxzZSB9ID0ge30pIHtcbiAgY29uc3QgZCA9IHBhcnNlUmVmKHJlZlN0cmluZywgeyBhbGxvd05hbWVkLCBhbGxvd1Rlcm5hcnksIHhsc3gsIHIxYzE6IHRydWUgfSk7XG4gIGlmIChkICYmIChkLnIwIHx8IGQubmFtZSkpIHtcbiAgICBjb25zdCByYW5nZSA9IGQucjFcbiAgICAgID8gZnJvbVIxQzEoZC5yMCArIGQub3BlcmF0b3IgKyBkLnIxKVxuICAgICAgOiBmcm9tUjFDMShkLnIwKTtcbiAgICBpZiAocmFuZ2UpIHtcbiAgICAgIHJldHVybiB4bHN4XG4gICAgICAgID8geyB3b3JrYm9va05hbWU6IGQud29ya2Jvb2tOYW1lLCBzaGVldE5hbWU6IGQuc2hlZXROYW1lLCByYW5nZSB9XG4gICAgICAgIDogeyBjb250ZXh0OiBkLmNvbnRleHQsIHJhbmdlIH07XG4gICAgfVxuICAgIGlmIChkLm5hbWUpIHtcbiAgICAgIHJldHVybiB4bHN4XG4gICAgICAgID8geyB3b3JrYm9va05hbWU6IGQud29ya2Jvb2tOYW1lLCBzaGVldE5hbWU6IGQuc2hlZXROYW1lLCBuYW1lOiBkLm5hbWUgfVxuICAgICAgICA6IHsgY29udGV4dDogZC5jb250ZXh0LCBuYW1lOiBkLm5hbWUgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogR2V0IGFuIFIxQzEtc3R5bGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgcmVmZXJlbmNlIG9iamVjdC5cbiAqXG4gKiBgYGBqc1xuICogc3RyaW5naWZ5UjFDMVJlZih7XG4gKiAgIGNvbnRleHQ6IFsgJ1NoZWV0MScgXSxcbiAqICAgcmFuZ2U6IHtcbiAqICAgICByMDogOSxcbiAqICAgICBjMDogOCxcbiAqICAgICByMTogOSxcbiAqICAgICBjMTogOCxcbiAqICAgICAkYzA6IHRydWUsXG4gKiAgICAgJGMxOiB0cnVlXG4gKiAgICAgJHIwOiBmYWxzZSxcbiAqICAgICAkcjE6IGZhbHNlXG4gKiAgIH1cbiAqIH0pO1xuICogLy8gPT4gJ1NoZWV0MSFSWzldQzk6Uls5XUM5J1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtSZWZlcmVuY2VSMUMxfSByZWZPYmplY3QgQSByZWZlcmVuY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dICBPcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnhsc3g9ZmFsc2VdICBTd2l0Y2hlcyB0byB0aGUgYFsxXVNoZWV0MSFBMWAgb3IgYFsxXSFuYW1lYCBwcmVmaXggc3ludGF4IGZvcm0gZm9yIGV4dGVybmFsIHdvcmtib29rcy4gU2VlOiBbUHJlZml4ZXMubWRdKC4vUHJlZml4ZXMubWQpXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcmVmZXJlbmNlIGluIFIxQzEtc3R5bGUgc3RyaW5nIGZvcm1hdFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5UjFDMVJlZiAocmVmT2JqZWN0LCB7IHhsc3ggPSBmYWxzZSB9ID0ge30pIHtcbiAgY29uc3QgcHJlZml4ID0geGxzeFxuICAgID8gc3RyaW5naWZ5UHJlZml4QWx0KHJlZk9iamVjdClcbiAgICA6IHN0cmluZ2lmeVByZWZpeChyZWZPYmplY3QpO1xuICByZXR1cm4gcHJlZml4ICsgKFxuICAgIHJlZk9iamVjdC5uYW1lID8gcmVmT2JqZWN0Lm5hbWUgOiB0b1IxQzEocmVmT2JqZWN0LnJhbmdlKVxuICApO1xufVxuIiwiaW1wb3J0IHsgTUFYX1JPV1MsIE1BWF9DT0xTLCBFUlJPUiB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IGZyb21BMSwgcGFyc2VBMVJlZiwgc3RyaW5naWZ5QTFSZWYgfSBmcm9tICcuL2ExLmpzJztcbmltcG9ydCB7IHBhcnNlUjFDMVJlZiwgc3RyaW5naWZ5UjFDMVJlZiB9IGZyb20gJy4vcmMuanMnO1xuaW1wb3J0IHsgdG9rZW5pemUgfSBmcm9tICcuL2xleGVyLmpzJztcbmltcG9ydCB7IGlzUmFuZ2UgfSBmcm9tICcuL2lzVHlwZS5qcyc7XG5cbmNvbnN0IGNhbGMgPSAoYWJzLCB2WCwgYVgpID0+IHtcbiAgaWYgKHZYID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gYWJzID8gdlggOiB2WCAtIGFYO1xufTtcblxuY29uc3Qgc2V0dGluZ3MgPSB7XG4gIHdpdGhMb2NhdGlvbjogZmFsc2UsXG4gIG1lcmdlUmVmczogZmFsc2UsXG4gIGFsbG93VGVybmFyeTogdHJ1ZSxcbiAgcjFjMTogZmFsc2Vcbn07XG5cbi8qKlxuICogVHJhbnNsYXRlcyByYW5nZXMgaW4gYSBmb3JtdWxhIG9yIGxpc3Qgb2YgdG9rZW5zIGZyb20gYWJzb2x1dGUgQTEgc3ludGF4IHRvXG4gKiByZWxhdGl2ZSBSMUMxIHN5bnRheC5cbiAqXG4gKiBSZXR1cm5zIHRoZSBzYW1lIGZvcm11bGEgd2l0aCB0aGUgcmFuZ2VzIHRyYW5zbGF0ZWQuIElmIGFuIGFycmF5IG9mIHRva2Vuc1xuICogd2FzIHN1cHBsaWVkLCB0aGVuIHRoZSBzYW1lIGFycmF5IGlzIHJldHVybmVkLlxuICpcbiAqIGBgYGpzXG4gKiB0cmFuc2xhdGVUb1IxQzEoXCI9U1VNKEUxMCwkRSQyLFNoZWV0ISRFJDMpXCIsIFwiRDEwXCIpO1xuICogLy8gPT4gXCI9U1VNKFJDWzFdLFIyQzUsU2hlZXQhUjNDNSlcIik7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0geyhzdHJpbmcgfCBBcnJheTxUb2tlbj4pfSBmb3JtdWxhIEEgc3RyaW5nIChhbiBFeGNlbCBmb3JtdWxhKSBvciBhIHRva2VuIGxpc3QgdGhhdCBzaG91bGQgYmUgYWRqdXN0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gYW5jaG9yQ2VsbCBBIHNpbXBsZSBzdHJpbmcgcmVmZXJlbmNlIHRvIGFuIEExIGNlbGwgSUQgKGBBRjEyM2Agb3JgJEMkNWApLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9uc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy54bHN4PWZhbHNlXSAgU3dpdGNoZXMgdG8gdGhlIGBbMV1TaGVldDEhQTFgIG9yIGBbMV0hbmFtZWAgcHJlZml4IHN5bnRheCBmb3JtIGZvciBleHRlcm5hbCB3b3JrYm9va3MuIFNlZTogW1ByZWZpeGVzLm1kXSguL1ByZWZpeGVzLm1kKVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hbGxvd1Rlcm5hcnk9dHJ1ZV0gIEVuYWJsZXMgdGhlIHJlY29nbml0aW9uIG9mIHRlcm5hcnkgcmFuZ2VzIGluIHRoZSBzdHlsZSBvZiBgQTE6QWAgb3IgYEExOjFgLiBUaGVzZSBhcmUgc3VwcG9ydGVkIGJ5IEdvb2dsZSBTaGVldHMgYnV0IG5vdCBFeGNlbC4gU2VlOiBSZWZlcmVuY2VzLm1kLlxuICogQHJldHVybnMgeyhzdHJpbmcgfCBBcnJheTxUb2tlbj4pfSBBIGZvcm11bGEgc3RyaW5nIG9yIHRva2VuIGxpc3QgKGRlcGVuZGluZyBvbiB3aGljaCB3YXMgaW5wdXQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGVUb1IxQzEgKGZvcm11bGEsIGFuY2hvckNlbGwsIHsgeGxzeCA9IGZhbHNlLCBhbGxvd1Rlcm5hcnkgPSB0cnVlIH0gPSB7fSkge1xuICBjb25zdCB7IHRvcCwgbGVmdCB9ID0gZnJvbUExKGFuY2hvckNlbGwpO1xuICBjb25zdCBpc1N0cmluZyA9IHR5cGVvZiBmb3JtdWxhID09PSAnc3RyaW5nJztcblxuICBjb25zdCB0b2tlbnMgPSBpc1N0cmluZ1xuICAgID8gdG9rZW5pemUoZm9ybXVsYSwgeyAuLi5zZXR0aW5ncywgeGxzeCwgYWxsb3dUZXJuYXJ5IH0pXG4gICAgOiBmb3JtdWxhO1xuXG4gIGxldCBvZmZzZXRTa2V3ID0gMDtcbiAgY29uc3QgcmVmT3B0cyA9IHsgeGxzeCwgYWxsb3dUZXJuYXJ5IH07XG4gIHRva2Vucy5mb3JFYWNoKHRva2VuID0+IHtcbiAgICBpZiAoaXNSYW5nZSh0b2tlbikpIHtcbiAgICAgIGNvbnN0IHRva2VuVmFsdWUgPSB0b2tlbi52YWx1ZTtcbiAgICAgIGNvbnN0IHJlZiA9IHBhcnNlQTFSZWYodG9rZW5WYWx1ZSwgcmVmT3B0cyk7XG4gICAgICBjb25zdCBkID0gcmVmLnJhbmdlO1xuICAgICAgY29uc3QgcmFuZ2UgPSB7fTtcbiAgICAgIHJhbmdlLnIwID0gY2FsYyhkLiR0b3AsIGQudG9wLCB0b3ApO1xuICAgICAgcmFuZ2UucjEgPSBjYWxjKGQuJGJvdHRvbSwgZC5ib3R0b20sIHRvcCk7XG4gICAgICByYW5nZS5jMCA9IGNhbGMoZC4kbGVmdCwgZC5sZWZ0LCBsZWZ0KTtcbiAgICAgIHJhbmdlLmMxID0gY2FsYyhkLiRyaWdodCwgZC5yaWdodCwgbGVmdCk7XG4gICAgICByYW5nZS4kcjAgPSBkLiR0b3A7XG4gICAgICByYW5nZS4kcjEgPSBkLiRib3R0b207XG4gICAgICByYW5nZS4kYzAgPSBkLiRsZWZ0O1xuICAgICAgcmFuZ2UuJGMxID0gZC4kcmlnaHQ7XG4gICAgICBpZiAoZC50cmltKSB7XG4gICAgICAgIHJhbmdlLnRyaW0gPSBkLnRyaW07XG4gICAgICB9XG4gICAgICByZWYucmFuZ2UgPSByYW5nZTtcbiAgICAgIHRva2VuLnZhbHVlID0gc3RyaW5naWZ5UjFDMVJlZihyZWYsIHJlZk9wdHMpO1xuICAgICAgLy8gaWYgdG9rZW4gaW5jbHVkZXMgb2Zmc2V0cywgdGhvc2Ugb2Zmc2V0cyBhcmUgbm93IGxpa2VseSB3cm9uZyFcbiAgICAgIGlmICh0b2tlbi5sb2MpIHtcbiAgICAgICAgdG9rZW4ubG9jWzBdICs9IG9mZnNldFNrZXc7XG4gICAgICAgIG9mZnNldFNrZXcgKz0gdG9rZW4udmFsdWUubGVuZ3RoIC0gdG9rZW5WYWx1ZS5sZW5ndGg7XG4gICAgICAgIHRva2VuLmxvY1sxXSArPSBvZmZzZXRTa2V3O1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChvZmZzZXRTa2V3ICYmIHRva2VuLmxvYykge1xuICAgICAgdG9rZW4ubG9jWzBdICs9IG9mZnNldFNrZXc7XG4gICAgICB0b2tlbi5sb2NbMV0gKz0gb2Zmc2V0U2tldztcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBpc1N0cmluZ1xuICAgID8gdG9rZW5zLm1hcChkID0+IGQudmFsdWUpLmpvaW4oJycpXG4gICAgOiB0b2tlbnM7XG59XG5cbmZ1bmN0aW9uIHRvRml4ZWQgKHZhbCwgYWJzLCBiYXNlLCBtYXgsIHdyYXBFZGdlcyA9IHRydWUpIHtcbiAgbGV0IHYgPSB2YWw7XG4gIGlmICh2ICE9IG51bGwgJiYgIWFicykge1xuICAgIHYgPSBiYXNlICsgdmFsO1xuICAgIC8vIEV4Y2VsIFwid3JhcHMgYXJvdW5kXCIgd2hlbiB2YWx1ZSBnb2VzIG91dCBvZiBsb3dlciBib3VuZHMuXG4gICAgLy8gSXQncyBhIGJpdCBxdWlya3kgb24gZW50cnkgYXMgRXhjZWwgX3JlYWxseSB3YW50c18gdG8gcmUtcmV3aXRlIHRoZVxuICAgIC8vIHJlZmVyZW5jZXMgYnV0IHRoZSBiZWhhdmlvdXIgaXMgY29uc2lzdGVudCB3aXRoIElORElSRUNUOlxuICAgIC8vIC4uLiBJbiBBMTogUkNbLTFdID0+IFIxQ1sxNjM4M10uXG4gICAgaWYgKHYgPCAwKSB7XG4gICAgICBpZiAoIXdyYXBFZGdlcykge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgfVxuICAgICAgdiA9IG1heCArIHYgKyAxO1xuICAgIH1cbiAgICAvLyAuLi4gSW4gQjE6ID1SQ1sxNjM4M10gPT4gPVJDWy0xXVxuICAgIGlmICh2ID4gbWF4KSB7XG4gICAgICBpZiAoIXdyYXBFZGdlcykge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgfVxuICAgICAgdiAtPSBtYXggKyAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdjtcbn1cblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIHdyYXBFZGdlczogdHJ1ZSxcbiAgbWVyZ2VSZWZzOiB0cnVlLFxuICBhbGxvd1Rlcm5hcnk6IHRydWUsXG4gIHhsc3g6IGZhbHNlXG59O1xuXG4vKipcbiAqIFRyYW5zbGF0ZXMgcmFuZ2VzIGluIGEgZm9ybXVsYSBvciBsaXN0IG9mIHRva2VucyBmcm9tIHJlbGF0aXZlIFIxQzEgc3ludGF4IHRvXG4gKiBhYnNvbHV0ZSBBMSBzeW50YXguXG4gKlxuICogUmV0dXJucyB0aGUgc2FtZSBmb3JtdWxhIHdpdGggdGhlIHJhbmdlcyB0cmFuc2xhdGVkLiBJZiBhbiBhcnJheSBvZiB0b2tlbnNcbiAqIHdhcyBzdXBwbGllZCwgdGhlbiB0aGUgc2FtZSBhcnJheSBpcyByZXR1cm5lZC5cbiAqXG4gKiBgYGBqc1xuICogdHJhbnNsYXRlVG9BMShcIj1TVU0oUkNbMV0sUjJDNSxTaGVldCFSM0M1KVwiLCBcIkQxMFwiKTtcbiAqIC8vID0+IFwiPVNVTShFMTAsJEUkMixTaGVldCEkRSQzKVwiKTtcbiAqIGBgYFxuICpcbiAqIElmIGFuIGlucHV0IHJhbmdlIGlzIC0xLC0xIHJlbGF0aXZlIHJvd3MvY29sdW1ucyBhbmQgdGhlIGFuY2hvciBpcyBBMSwgdGhlXG4gKiByZXN1bHRpbmcgcmFuZ2Ugd2lsbCAoYnkgZGVmYXVsdCkgd3JhcCBhcm91bmQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2hlZXRcbiAqIHJlc3VsdGluZyBpbiB0aGUgcmFuZ2UgWEZEMTA0ODU3Ni4gVGhpcyBtYXkgbm90IGJlIHdoYXQgeW91IHdhbnQgc28gbWF5IHNldFxuICogYHdyYXBFZGdlc2AgdG8gZmFsc2Ugd2hpY2ggd2lsbCBpbnN0ZWFkIHR1cm4gdGhlIHJhbmdlIGludG8gYSBgI1JFRiFgIGVycm9yLlxuICpcbiAqIGBgYGpzXG4gKiB0cmFuc2xhdGVUb0ExKFwiPVJbLTFdQ1stMV1cIiwgXCJBMVwiKTtcbiAqIC8vID0+IFwiPVhGRDEwNDg1NzZcIik7XG4gKlxuICogdHJhbnNsYXRlVG9BMShcIj1SWy0xXUNbLTFdXCIsIFwiQTFcIiwgeyB3cmFwRWRnZXM6IGZhbHNlIH0pO1xuICogLy8gPT4gXCI9I1JFRiFcIik7XG4gKiBgYGBcbiAqXG4gKiBOb3RlIHRoYXQgaWYgeW91IGFyZSBwYXNzaW5nIGluIGEgbGlzdCBvZiB0b2tlbnMgdGhhdCB3YXMgbm90IGNyZWF0ZWQgdXNpbmdcbiAqIGBtZXJnZVJlZnNgIGFuZCB5b3UgZGlzYWJsZSBlZGdlIHdyYXBwaW5nIChvciB5b3Ugc2ltcGx5IHNldCBib3RoIG9wdGlvbnNcbiAqIHRvIGZhbHNlKSwgeW91IGNhbiBlbmQgdXAgd2l0aCBhIGZvcm11bGEgc3VjaCBhcyBgPSNSRUYhOkIyYCBvclxuICogYD1TaGVldDMhI1JFRiE6RjNgLiBUaGVzZSBhcmUgdmFsaWQgZm9ybXVsYXMgaW4gdGhlIEV4Y2VsIGZvcm11bGEgbGFuZ3VhZ2VcbiAqIGFuZCBFeGNlbCB3aWxsIGFjY2VwdCB0aGVtLCBidXQgdGhleSBhcmUgbm90IHN1cHBvcnRlZCBpbiBHb29nbGUgU2hlZXRzLlxuICpcbiAqIEBwYXJhbSB7KHN0cmluZyB8IEFycmF5PFRva2VuPil9IGZvcm11bGEgQSBzdHJpbmcgKGFuIEV4Y2VsIGZvcm11bGEpIG9yIGEgdG9rZW4gbGlzdCB0aGF0IHNob3VsZCBiZSBhZGp1c3RlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhbmNob3JDZWxsIEEgc2ltcGxlIHN0cmluZyByZWZlcmVuY2UgdG8gYW4gQTEgY2VsbCBJRCAoYEFGMTIzYCBvcmAkQyQ1YCkuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLndyYXBFZGdlcz10cnVlXSAgV3JhcCBvdXQtb2YtYm91bmRzIHJhbmdlcyBhcm91bmQgc2hlZXQgZWRnZXMgcmF0aGVyIHRoYW4gdHVybmluZyB0aGVtIHRvICNSRUYhIGVycm9yc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5tZXJnZVJlZnM9dHJ1ZV0gICBTaG91bGQgcmFuZ2VzIGJlIHRyZWF0ZWQgYXMgd2hvbGUgcmVmZXJlbmNlcyAoYFNoZWV0MSFBMTpCMmApIG9yIGFzIHNlcGFyYXRlIHRva2VucyBmb3IgZWFjaCBwYXJ0OiAoYFNoZWV0MWAsYCFgLGBBMWAsYDpgLGBCMmApLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy54bHN4PWZhbHNlXSAgU3dpdGNoZXMgdG8gdGhlIGBbMV1TaGVldDEhQTFgIG9yIGBbMV0hbmFtZWAgcHJlZml4IHN5bnRheCBmb3JtIGZvciBleHRlcm5hbCB3b3JrYm9va3MuIFNlZTogW1ByZWZpeGVzLm1kXSguL1ByZWZpeGVzLm1kKVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hbGxvd1Rlcm5hcnk9dHJ1ZV0gIEVuYWJsZXMgdGhlIHJlY29nbml0aW9uIG9mIHRlcm5hcnkgcmFuZ2VzIGluIHRoZSBzdHlsZSBvZiBgQTE6QWAgb3IgYEExOjFgLiBUaGVzZSBhcmUgc3VwcG9ydGVkIGJ5IEdvb2dsZSBTaGVldHMgYnV0IG5vdCBFeGNlbC4gU2VlOiBSZWZlcmVuY2VzLm1kLlxuICogQHJldHVybnMgeyhzdHJpbmcgfCBBcnJheTxUb2tlbj4pfSBBIGZvcm11bGEgc3RyaW5nIG9yIHRva2VuIGxpc3QgKGRlcGVuZGluZyBvbiB3aGljaCB3YXMgaW5wdXQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGVUb0ExIChmb3JtdWxhLCBhbmNob3JDZWxsLCBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnMpIHtcbiAgY29uc3QgYW5jaG9yID0gZnJvbUExKGFuY2hvckNlbGwpO1xuICBjb25zdCBpc1N0cmluZyA9IHR5cGVvZiBmb3JtdWxhID09PSAnc3RyaW5nJztcbiAgY29uc3Qgb3B0cyA9IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcblxuICBjb25zdCB0b2tlbnMgPSBpc1N0cmluZ1xuICAgID8gdG9rZW5pemUoZm9ybXVsYSwge1xuICAgICAgd2l0aExvY2F0aW9uOiBmYWxzZSxcbiAgICAgIG1lcmdlUmVmczogb3B0cy5tZXJnZVJlZnMsXG4gICAgICB4bHN4OiBvcHRzLnhsc3gsXG4gICAgICBhbGxvd1Rlcm5hcnk6IG9wdHMuYWxsb3dUZXJuYXJ5LFxuICAgICAgcjFjMTogdHJ1ZVxuICAgIH0pXG4gICAgOiBmb3JtdWxhO1xuXG4gIGxldCBvZmZzZXRTa2V3ID0gMDtcbiAgY29uc3QgcmVmT3B0cyA9IHsgeGxzeDogb3B0cy54bHN4LCBhbGxvd1Rlcm5hcnk6IG9wdHMuYWxsb3dUZXJuYXJ5IH07XG4gIHRva2Vucy5mb3JFYWNoKHRva2VuID0+IHtcbiAgICBpZiAoaXNSYW5nZSh0b2tlbikpIHtcbiAgICAgIGNvbnN0IHRva2VuVmFsdWUgPSB0b2tlbi52YWx1ZTtcbiAgICAgIGNvbnN0IHJlZiA9IHBhcnNlUjFDMVJlZih0b2tlblZhbHVlLCByZWZPcHRzKTtcbiAgICAgIGNvbnN0IGQgPSByZWYucmFuZ2U7XG4gICAgICBjb25zdCByYW5nZSA9IHt9O1xuICAgICAgY29uc3QgcjAgPSB0b0ZpeGVkKGQucjAsIGQuJHIwLCBhbmNob3IudG9wLCBNQVhfUk9XUywgb3B0cy53cmFwRWRnZXMpO1xuICAgICAgY29uc3QgcjEgPSB0b0ZpeGVkKGQucjEsIGQuJHIxLCBhbmNob3IudG9wLCBNQVhfUk9XUywgb3B0cy53cmFwRWRnZXMpO1xuICAgICAgaWYgKHIwID4gcjEpIHtcbiAgICAgICAgcmFuZ2UudG9wID0gcjE7XG4gICAgICAgIHJhbmdlLiR0b3AgPSBkLiRyMTtcbiAgICAgICAgcmFuZ2UuYm90dG9tID0gcjA7XG4gICAgICAgIHJhbmdlLiRib3R0b20gPSBkLiRyMDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByYW5nZS50b3AgPSByMDtcbiAgICAgICAgcmFuZ2UuJHRvcCA9IGQuJHIwO1xuICAgICAgICByYW5nZS5ib3R0b20gPSByMTtcbiAgICAgICAgcmFuZ2UuJGJvdHRvbSA9IGQuJHIxO1xuICAgICAgfVxuICAgICAgY29uc3QgYzAgPSB0b0ZpeGVkKGQuYzAsIGQuJGMwLCBhbmNob3IubGVmdCwgTUFYX0NPTFMsIG9wdHMud3JhcEVkZ2VzKTtcbiAgICAgIGNvbnN0IGMxID0gdG9GaXhlZChkLmMxLCBkLiRjMSwgYW5jaG9yLmxlZnQsIE1BWF9DT0xTLCBvcHRzLndyYXBFZGdlcyk7XG4gICAgICBpZiAoYzAgPiBjMSkge1xuICAgICAgICByYW5nZS5sZWZ0ID0gYzE7XG4gICAgICAgIHJhbmdlLiRsZWZ0ID0gZC4kYzE7XG4gICAgICAgIHJhbmdlLnJpZ2h0ID0gYzA7XG4gICAgICAgIHJhbmdlLiRyaWdodCA9IGQuJGMwO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJhbmdlLmxlZnQgPSBjMDtcbiAgICAgICAgcmFuZ2UuJGxlZnQgPSBkLiRjMDtcbiAgICAgICAgcmFuZ2UucmlnaHQgPSBjMTtcbiAgICAgICAgcmFuZ2UuJHJpZ2h0ID0gZC4kYzE7XG4gICAgICB9XG4gICAgICBpZiAoZC50cmltKSB7XG4gICAgICAgIHJhbmdlLnRyaW0gPSBkLnRyaW07XG4gICAgICB9XG4gICAgICBpZiAoaXNOYU4ocjApIHx8IGlzTmFOKHIxKSB8fCBpc05hTihjMCkgfHwgaXNOYU4oYzEpKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgdG8gcmVmIGVycm9yXG4gICAgICAgIHRva2VuLnR5cGUgPSBFUlJPUjtcbiAgICAgICAgdG9rZW4udmFsdWUgPSAnI1JFRiEnO1xuICAgICAgICBkZWxldGUgdG9rZW4uZ3JvdXBJZDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZWYucmFuZ2UgPSByYW5nZTtcbiAgICAgICAgdG9rZW4udmFsdWUgPSBzdHJpbmdpZnlBMVJlZihyZWYsIHJlZk9wdHMpO1xuICAgICAgfVxuICAgICAgLy8gaWYgdG9rZW4gaW5jbHVkZXMgb2Zmc2V0cywgdGhvc2Ugb2Zmc2V0cyBhcmUgbm93IGxpa2VseSB3cm9uZyFcbiAgICAgIGlmICh0b2tlbi5sb2MpIHtcbiAgICAgICAgdG9rZW4ubG9jWzBdICs9IG9mZnNldFNrZXc7XG4gICAgICAgIG9mZnNldFNrZXcgKz0gdG9rZW4udmFsdWUubGVuZ3RoIC0gdG9rZW5WYWx1ZS5sZW5ndGg7XG4gICAgICAgIHRva2VuLmxvY1sxXSArPSBvZmZzZXRTa2V3O1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChvZmZzZXRTa2V3ICYmIHRva2VuLmxvYykge1xuICAgICAgdG9rZW4ubG9jWzBdICs9IG9mZnNldFNrZXc7XG4gICAgICB0b2tlbi5sb2NbMV0gKz0gb2Zmc2V0U2tldztcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBpc1N0cmluZ1xuICAgID8gdG9rZW5zLm1hcChkID0+IGQudmFsdWUpLmpvaW4oJycpXG4gICAgOiB0b2tlbnM7XG59XG4iLCJpbXBvcnQgeyBzdHJpbmdpZnlQcmVmaXgsIHN0cmluZ2lmeVByZWZpeEFsdCB9IGZyb20gJy4vc3RyaW5naWZ5UHJlZml4LmpzJztcblxuZnVuY3Rpb24gcXVvdGVDb2xuYW1lIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW1tcXF0jJ0BdKS9nLCAnXFwnJDEnKTtcbn1cblxuZnVuY3Rpb24gbmVlZHNCcmFjZXMgKHN0cikge1xuICByZXR1cm4gIS9eW2EtekEtWjAtOVxcdTAwYTEtXFx1ZmZmZl0rJC8udGVzdChzdHIpO1xufVxuXG5mdW5jdGlvbiB0b1NlbnRlbmNlQ2FzZSAoc3RyKSB7XG4gIHJldHVybiBzdHJbMF0udG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xufVxuXG4vKipcbiAqIEdldCBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHN0cnVjdHVyZWQgcmVmZXJlbmNlIG9iamVjdC5cbiAqXG4gKiBgYGBqc1xuICogc3RyaW5naWZ5U3RydWN0UmVmKHtcbiAqICAgY29udGV4dDogWyAnd29ya2Jvb2sueGxzeCcgXSxcbiAqICAgc2VjdGlvbnM6IFsgJ2RhdGEnIF0sXG4gKiAgIGNvbHVtbnM6IFsgJ215IGNvbHVtbicsICdAZm9vJyBdLFxuICogICB0YWJsZTogJ3RhYmxlTmFtZScsXG4gKiB9KTtcbiAqIC8vID0+ICd3b3JrYm9vay54bHN4IXRhYmxlTmFtZVtbI0RhdGFdLFtDb2x1bW4xXTpbQ29sdW1uMl1dJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtSZWZlcmVuY2VTdHJ1Y3R9IHJlZk9iamVjdCBBIHN0cnVjdHVyZWQgcmVmZXJlbmNlIG9iamVjdFxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSAgT3B0aW9uc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy54bHN4PWZhbHNlXSAgU3dpdGNoZXMgdG8gdGhlIGBbMV1TaGVldDEhQTFgIG9yIGBbMV0hbmFtZWAgcHJlZml4IHN5bnRheCBmb3JtIGZvciBleHRlcm5hbCB3b3JrYm9va3MuIFNlZTogW1ByZWZpeGVzLm1kXSguL1ByZWZpeGVzLm1kKVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50aGlzUm93PWZhbHNlXSAgRW5mb3JjZXMgdXNpbmcgdGhlIGBbI1RoaXMgUm93XWAgaW5zdGVhZCBvZiB0aGUgYEBgIHNob3J0aGFuZCB3aGVuIHNlcmlhbGl6aW5nIHN0cnVjdHVyZWQgcmFuZ2VzLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHN0cnVjdHVyZWQgcmVmZXJlbmNlIGluIHN0cmluZyBmb3JtYXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeVN0cnVjdFJlZiAocmVmT2JqZWN0LCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgeyB4bHN4LCB0aGlzUm93IH0gPSBvcHRpb25zO1xuICBsZXQgcyA9IHhsc3hcbiAgICA/IHN0cmluZ2lmeVByZWZpeEFsdChyZWZPYmplY3QpXG4gICAgOiBzdHJpbmdpZnlQcmVmaXgocmVmT2JqZWN0KTtcblxuICBpZiAocmVmT2JqZWN0LnRhYmxlKSB7XG4gICAgcyArPSByZWZPYmplY3QudGFibGU7XG4gIH1cbiAgY29uc3QgbnVtQ29sdW1ucyA9IHJlZk9iamVjdC5jb2x1bW5zPy5sZW5ndGggPz8gMDtcbiAgY29uc3QgbnVtU2VjdGlvbnMgPSByZWZPYmplY3Quc2VjdGlvbnM/Lmxlbmd0aCA/PyAwO1xuICAvLyBzaW5nbGUgc2VjdGlvblxuICBpZiAobnVtU2VjdGlvbnMgPT09IDEgJiYgIW51bUNvbHVtbnMpIHtcbiAgICBzICs9IGBbIyR7dG9TZW50ZW5jZUNhc2UocmVmT2JqZWN0LnNlY3Rpb25zWzBdKX1dYDtcbiAgfVxuICAvLyBzaW5nbGUgY29sdW1uXG4gIGVsc2UgaWYgKCFudW1TZWN0aW9ucyAmJiBudW1Db2x1bW5zID09PSAxKSB7XG4gICAgcyArPSBgWyR7cXVvdGVDb2xuYW1lKHJlZk9iamVjdC5jb2x1bW5zWzBdKX1dYDtcbiAgfVxuICBlbHNlIHtcbiAgICBzICs9ICdbJztcbiAgICAvLyBzaW5nbGUgWyN0aGlzIHJvd10gc2VjdGlvbnMgZ2V0IG5vcm1hbGl6ZWQgdG8gYW4gQCBieSBkZWZhdWx0XG4gICAgY29uc3Qgc2luZ2xlQXQgPSAhdGhpc1JvdyAmJiBudW1TZWN0aW9ucyA9PT0gMSAmJiByZWZPYmplY3Quc2VjdGlvbnNbMF0udG9Mb3dlckNhc2UoKSA9PT0gJ3RoaXMgcm93JztcbiAgICBpZiAoc2luZ2xlQXQpIHtcbiAgICAgIHMgKz0gJ0AnO1xuICAgIH1cbiAgICBlbHNlIGlmIChudW1TZWN0aW9ucykge1xuICAgICAgcyArPSByZWZPYmplY3Quc2VjdGlvbnNcbiAgICAgICAgLm1hcChkID0+IGBbIyR7dG9TZW50ZW5jZUNhc2UoZCl9XWApXG4gICAgICAgIC5qb2luKCcsJyk7XG4gICAgICBpZiAobnVtQ29sdW1ucykge1xuICAgICAgICBzICs9ICcsJztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gYSBjYXNlIG9mIGEgc2luZ2xlIGFscGhhbnVtYmVyaWMgY29sdW1uIHdpdGggYSBbI3RoaXMgcm93XSBiZWNvbWVzIFtAY29sXVxuICAgIGlmIChzaW5nbGVBdCAmJiByZWZPYmplY3QuY29sdW1ucy5sZW5ndGggPT09IDEgJiYgIW5lZWRzQnJhY2VzKHJlZk9iamVjdC5jb2x1bW5zWzBdKSkge1xuICAgICAgcyArPSBxdW90ZUNvbG5hbWUocmVmT2JqZWN0LmNvbHVtbnNbMF0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChudW1Db2x1bW5zKSB7XG4gICAgICBzICs9IHJlZk9iamVjdC5jb2x1bW5zLnNsaWNlKDAsIDIpXG4gICAgICAgIC5tYXAoZCA9PiAoYFske3F1b3RlQ29sbmFtZShkKX1dYCkpXG4gICAgICAgIC5qb2luKCc6Jyk7XG4gICAgfVxuICAgIHMgKz0gJ10nO1xuICB9XG4gIHJldHVybiBzO1xufVxuIiwiZXhwb3J0IHsgdG9rZW5pemUgfSBmcm9tICcuL2xleGVyLmpzJztcbmV4cG9ydCB7IHBhcnNlIH0gZnJvbSAnLi9wYXJzZXIuanMnO1xuZXhwb3J0IHsgYWRkVG9rZW5NZXRhIH0gZnJvbSAnLi9hZGRUb2tlbk1ldGEuanMnO1xuZXhwb3J0IHsgdHJhbnNsYXRlVG9SMUMxLCB0cmFuc2xhdGVUb0ExIH0gZnJvbSAnLi90cmFuc2xhdGUuanMnO1xuZXhwb3J0IHsgTUFYX0NPTFMsIE1BWF9ST1dTIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuZXhwb3J0IHsgbWVyZ2VSZWZUb2tlbnMgfSBmcm9tICcuL21lcmdlUmVmVG9rZW5zLmpzJztcbmV4cG9ydCB7IGZpeFJhbmdlcyB9IGZyb20gJy4vZml4UmFuZ2VzLmpzJztcbmV4cG9ydCB7XG4gIGlzRXJyb3IsXG4gIGlzRnVuY3Rpb24sXG4gIGlzRnhQcmVmaXgsXG4gIGlzTGl0ZXJhbCxcbiAgaXNPcGVyYXRvcixcbiAgaXNSYW5nZSxcbiAgaXNSZWZlcmVuY2UsXG4gIGlzV2hpdGVzcGFjZVxufSBmcm9tICcuL2lzVHlwZS5qcyc7XG5cbmV4cG9ydCB7IGZyb21Db2wgfSBmcm9tICcuL2Zyb21Db2wuanMnO1xuZXhwb3J0IHsgdG9Db2wgfSBmcm9tICcuL3RvQ29sLmpzJztcblxuZXhwb3J0IHtcbiAgcGFyc2VBMVJlZixcbiAgc3RyaW5naWZ5QTFSZWYsXG4gIGFkZEExUmFuZ2VCb3VuZHNcbn0gZnJvbSAnLi9hMS5qcyc7XG5cbmV4cG9ydCB7XG4gIHBhcnNlUjFDMVJlZixcbiAgc3RyaW5naWZ5UjFDMVJlZlxufSBmcm9tICcuL3JjLmpzJztcblxuZXhwb3J0IHsgc3RyaW5naWZ5U3RydWN0UmVmIH0gZnJvbSAnLi9zdHJpbmdpZnlTdHJ1Y3RSZWYuanMnO1xuZXhwb3J0IHsgcGFyc2VTdHJ1Y3RSZWYgfSBmcm9tICcuL3BhcnNlU3RydWN0UmVmLmpzJztcblxuaW1wb3J0IHtcbiAgLy8gdG9rZW4gdHlwZXNcbiAgT1BFUkFUT1IsXG4gIEJPT0xFQU4sXG4gIEVSUk9SLFxuICBOVU1CRVIsXG4gIEZVTkNUSU9OLFxuICBORVdMSU5FLFxuICBXSElURVNQQUNFLFxuICBTVFJJTkcsXG4gIENPTlRFWFQsXG4gIENPTlRFWFRfUVVPVEUsXG4gIFJFRl9SQU5HRSxcbiAgUkVGX0JFQU0sXG4gIFJFRl9URVJOQVJZLFxuICBSRUZfTkFNRUQsXG4gIFJFRl9TVFJVQ1QsXG4gIEZYX1BSRUZJWCxcbiAgVU5LTk9XTixcbiAgLy8gQVNUIHR5cGVzXG4gIFVOQVJZLFxuICBCSU5BUlksXG4gIFJFRkVSRU5DRSxcbiAgTElURVJBTCxcbiAgRVJST1JfTElURVJBTCxcbiAgQ0FMTCxcbiAgQVJSQVksXG4gIElERU5USUZJRVJcbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG4vKipcbiAqIEEgZGljdGlvbmFyeSBvZiB0aGUgdHlwZXMgdXNlZCB0byBpZGVudGlmeSB0b2tlbiB2YXJpYW50cy5cbiAqXG4gKiBAcmVhZG9ubHlcbiAqIEBjb25zdGFudCB7T2JqZWN0PHN0cmluZz59IHRva2VuVHlwZXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBPUEVSQVRPUiAtIE5ld2xpbmUgKGBcXG5gKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IEJPT0xFQU4gLSBCb29sZWFuIGxpdGVyYWwgKGBUUlVFYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBFUlJPUiAtIEVycm9yIGxpdGVyYWwgKGAjVkFMVUUhYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBOVU1CRVIgLSBOdW1iZXIgbGl0ZXJhbCAoYDEyMy40YCwgYC0xLjVlKzJgKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IEZVTkNUSU9OIC0gRnVuY3Rpb24gbmFtZSAoYFNVTWApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gTkVXTElORSAtIE5ld2xpbmUgY2hhcmFjdGVyIChgXFxuYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBXSElURVNQQUNFIC0gV2hpdGVzcGFjZSBjaGFyYWN0ZXIgc2VxdWVuY2UgKGAgYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBTVFJJTkcgLSBTdHJpbmcgbGl0ZXJhbCAoYFwiTG9yZW0gaXBzdW1cImApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gQ09OVEVYVCAtIFJlZmVyZW5jZSBjb250ZXh0IChbV29ya2Jvb2sueGxzeF1TaGVldDEpXG4gKiBAcHJvcGVydHkge3N0cmluZ30gQ09OVEVYVF9RVU9URSAtIFF1b3RlZCByZWZlcmVuY2UgY29udGV4dCAoYCdbTXkgd29ya2Jvb2sueGxzeF1TaGVldDEnYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBSRUZfUkFOR0UgLSBBIHJhbmdlIGlkZW50aWZpZXIgKGBBMWApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gUkVGX0JFQU0gLSBBIHJhbmdlIFwiYmVhbVwiIGlkZW50aWZpZXIgKGBBOkFgIG9yIGAxOjFgKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFJFRl9URVJOQVJZIC0gQSB0ZXJuYXJ5IHJhbmdlIGlkZW50aWZpZXIgKGBCMjpCYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBSRUZfTkFNRUQgLSBBIG5hbWUgLyBuYW1lZCByYW5nZSBpZGVudGlmaWVyIChgaW5jb21lYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBSRUZfU1RSVUNUIC0gQSBzdHJ1Y3R1cmVkIHJlZmVyZW5jZSBpZGVudGlmaWVyIChgdGFibGVbW0NvbHVtbjFdOltDb2x1bW4yXV1gKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IEZYX1BSRUZJWCAtIEEgbGVhZGluZyBlcXVhbHMgc2lnbiBhdCB0aGUgc3RhcnQgb2YgYSBmb3JtdWxhIChgPWApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gVU5LTk9XTiAtIEFueSB1bmlkZW50aWZpYWJsZSByYW5nZSBvZiBjaGFyYWN0ZXJzLlxuICogQHNlZSB0b2tlbml6ZVxuICovXG5leHBvcnQgY29uc3QgdG9rZW5UeXBlcyA9IE9iamVjdC5mcmVlemUoe1xuICBPUEVSQVRPUixcbiAgQk9PTEVBTixcbiAgRVJST1IsXG4gIE5VTUJFUixcbiAgRlVOQ1RJT04sXG4gIE5FV0xJTkUsXG4gIFdISVRFU1BBQ0UsXG4gIFNUUklORyxcbiAgQ09OVEVYVCxcbiAgQ09OVEVYVF9RVU9URSxcbiAgUkVGX1JBTkdFLFxuICBSRUZfQkVBTSxcbiAgUkVGX1RFUk5BUlksXG4gIFJFRl9OQU1FRCxcbiAgUkVGX1NUUlVDVCxcbiAgRlhfUFJFRklYLFxuICBVTktOT1dOXG59KTtcblxuLyoqXG4gKiBBIGRpY3Rpb25hcnkgb2YgdGhlIHR5cGVzIHVzZWQgdG8gaWRlbnRpZnkgQVNUIG5vZGUgdmFyaWFudHMuXG4gKlxuICogQHJlYWRvbmx5XG4gKiBAY29uc3RhbnQge09iamVjdDxzdHJpbmc+fSBub2RlVHlwZXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBVTkFSWSAtIEEgdW5hcnkgb3BlcmF0aW9uIChgMTAlYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBCSU5BUlkgLSBBIGJpbmFyeSBvcGVyYXRpb24gKGAxMCsxMGApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gUkVGRVJFTkNFIC0gQSByYW5nZSBpZGVudGlmaWVyIChgQTFgKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IExJVEVSQUwgLSBBIGxpdGVyYWwgKG51bWJlciwgc3RyaW5nLCBvciBib29sZWFuKSAoYDEyM2AsIGBcImZvb1wiYCwgYGZhbHNlYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBFUlJPUiAtIEFuIGVycm9yIGxpdGVyYWwgKGAjVkFMVUUhYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBDQUxMIC0gQSBmdW5jdGlvbiBjYWxsIGV4cHJlc3Npb24gKGBTVU0oMSwyKWApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gQVJSQVkgLSBBbiBhcnJheSBleHByZXNzaW9uIChgezEsMjszLDR9YClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBJREVOVElGSUVSIC0gQSBmdW5jdGlvbiBuYW1lIGlkZW50aWZpZXIgKGBTVU1gKVxuICogQHNlZSBwYXJzZVxuICovXG5leHBvcnQgY29uc3Qgbm9kZVR5cGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFVOQVJZLFxuICBCSU5BUlksXG4gIFJFRkVSRU5DRSxcbiAgTElURVJBTCxcbiAgRVJST1I6IEVSUk9SX0xJVEVSQUwsXG4gIENBTEwsXG4gIEFSUkFZLFxuICBJREVOVElGSUVSXG59KTtcbiIsImltcG9ydCB7IGlzUmFuZ2UgfSBmcm9tICcuL2lzVHlwZS5qcyc7XG5pbXBvcnQgeyBwYXJzZUExUmVmLCBzdHJpbmdpZnlBMVJlZiwgYWRkQTFSYW5nZUJvdW5kcyB9IGZyb20gJy4vYTEuanMnO1xuaW1wb3J0IHsgcGFyc2VTdHJ1Y3RSZWYgfSBmcm9tICcuL3BhcnNlU3RydWN0UmVmLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeVN0cnVjdFJlZiB9IGZyb20gJy4vc3RyaW5naWZ5U3RydWN0UmVmLmpzJztcbmltcG9ydCB7IHRva2VuaXplIH0gZnJvbSAnLi9sZXhlci5qcyc7XG5pbXBvcnQgeyBSRUZfU1RSVUNUIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG4vLyBUaGVyZSBpcyBubyBSMUMxIGNvdW50ZXJwYXJ0IHRvIHRoaXMuIFRoaXMgaXMgYmVjYXVzZSB3aXRob3V0IGFuIGFuY2hvciBjZWxsXG4vLyBpdCBpcyBpbXBvc3NpYmxlIHRvIGRldGVybWluZSBpZiBhIHJlbGF0aXZlK2Fic29sdXRlIHJhbmdlIChSWzFdQ1sxXTpSNUM1KVxuLy8gbmVlZHMgdG8gYmUgZmxpcHBlZCBvciBub3QuIFRoZSBzb2x1dGlvbiBpcyB0byBjb252ZXJ0IHRvIEExIGZpcnN0OlxuLy8gdHJhbnNsYXRlVG9SQyhmaXhSYW5nZXModHJhbnNsYXRlVG9BMSguLi4pKSlcblxuLyoqXG4gKiBOb3JtYWxpemVzIEExIHN0eWxlIHJhbmdlcyBhbmQgc3RydWN0dXJlZCByZWZlcmVuY2VzIGluIGEgZm9ybXVsYSBvciBsaXN0IG9mXG4gKiB0b2tlbnMuXG4gKiBcbiAqIEl0IGVuc3VyZXMgdGhhdCB0aGF0IHRoZSB0b3AgYW5kIGxlZnQgY29vcmRpbmF0ZXMgb2YgYW4gQTEgcmFuZ2UgYXJlIG9uIHRoZVxuICogbGVmdC1oYW5kIHNpZGUgb2YgYSBjb2xvbiBvcGVyYXRvcjpcbiAqXG4gKiBgQjI6QTFgIOKGkiBgQTE6QjJgICBcbiAqIGAxOkExYCDihpIgYEExOjFgICBcbiAqIGBBOkExYCDihpIgYEExOkFgICBcbiAqIGBCOkFgIOKGkiBgQTpCYCAgXG4gKiBgMjoxYCDihpIgYDE6MmAgIFxuICogYEExOkExYCDihpIgYEExYCAgXG4gKlxuICogV2hlbiBgeyBhZGRCb3VuZHM6IHRydWUgfWAgaXMgcGFzc2VkIGFzIGFuIG9wdGlvbiwgdGhlIG1pc3NpbmcgYm91bmRzIGFyZVxuICogYWxzbyBhZGRlZC4gVGhpcyBjYW4gYmUgZG9uZSB0byBlbnN1cmUgRXhjZWwgY29tcGF0aWJsZSByYW5nZXMuIFRoZSBmaXhlc1xuICogdGhlbiBhZGRpdGlvbmFsbHkgaW5jbHVkZTpcbiAqXG4gKiBgMTpBMWAg4oaSIGBBMToxYCDihpIgYDE6MWAgIFxuICogYEE6QTFgIOKGkiBgQTE6QWAg4oaSIGBBOkFgICBcbiAqIGBBMTpBYCDihpIgYEE6QWAgIFxuICogYEExOjFgIOKGkiBgQToxYCAgXG4gKiBgQjI6QmAg4oaSIGBCMjoxMDQ4NTc2YCAgXG4gKiBgQjI6MmAg4oaSIGBCMjpYRkQyYCAgXG4gKlxuICogU3RydWN0dXJlZCByYW5nZXMgYXJlIG5vcm1hbGl6ZWQgY2xlYW5lZCB1cCB0byBoYXZlIGNvbnNpc3RlbnQgb3JkZXIgYW5kXG4gKiBjYXBpdGFsaXphdGlvbiBvZiBzZWN0aW9ucyBhcyB3ZWxsIGFzIHJlbW92aW5nIHJlZHVuZGFudCBvbmVzLlxuICpcbiAqIFJldHVybnMgdGhlIHNhbWUgZm9ybXVsYSB3aXRoIHRoZSByYW5nZXMgdXBkYXRlZC4gSWYgYW4gYXJyYXkgb2YgdG9rZW5zIHdhc1xuICogc3VwcGxpZWQsIHRoZW4gYSBuZXcgYXJyYXkgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHsoc3RyaW5nIHwgQXJyYXk8VG9rZW4+KX0gZm9ybXVsYSBBIHN0cmluZyAoYW4gRXhjZWwgZm9ybXVsYSkgb3IgYSB0b2tlbiBsaXN0IHRoYXQgc2hvdWxkIGJlIGFkanVzdGVkLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSAgT3B0aW9uc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hZGRCb3VuZHM9ZmFsc2VdICBGaWxsIGluIGFueSB1bmRlZmluZWQgYm91bmRzIG9mIHJhbmdlIG9iamVjdHMuIFRvcCB0byAwLCBib3R0b20gdG8gMTA0ODU3NSwgbGVmdCB0byAwLCBhbmQgcmlnaHQgdG8gMTYzODMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnhsc3g9ZmFsc2VdICBTd2l0Y2hlcyB0byB0aGUgYFsxXVNoZWV0MSFBMWAgb3IgYFsxXSFuYW1lYCBwcmVmaXggc3ludGF4IGZvcm0gZm9yIGV4dGVybmFsIHdvcmtib29rcy4gU2VlOiBbUHJlZml4ZXMubWRdKC4vUHJlZml4ZXMubWQpXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRoaXNSb3c9ZmFsc2VdICBFbmZvcmNlcyB1c2luZyB0aGUgYFsjVGhpcyBSb3ddYCBpbnN0ZWFkIG9mIHRoZSBgQGAgc2hvcnRoYW5kIHdoZW4gc2VyaWFsaXppbmcgc3RydWN0dXJlZCByYW5nZXMuXG4gKiBAcmV0dXJucyB7KHN0cmluZyB8IEFycmF5PFRva2VuPil9IEEgZm9ybXVsYSBzdHJpbmcgb3IgdG9rZW4gbGlzdCAoZGVwZW5kaW5nIG9uIHdoaWNoIHdhcyBpbnB1dClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpeFJhbmdlcyAoZm9ybXVsYSwgb3B0aW9ucyA9IHsgYWRkQm91bmRzOiBmYWxzZSB9KSB7XG4gIGlmICh0eXBlb2YgZm9ybXVsYSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZml4UmFuZ2VzKHRva2VuaXplKGZvcm11bGEsIG9wdGlvbnMpLCBvcHRpb25zKVxuICAgICAgLm1hcChkID0+IGQudmFsdWUpXG4gICAgICAuam9pbignJyk7XG4gIH1cbiAgaWYgKCFBcnJheS5pc0FycmF5KGZvcm11bGEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdmaXhSYW5nZXMgZXhwZWN0cyBhbiBhcnJheSBvZiB0b2tlbnMnKTtcbiAgfVxuICBjb25zdCB7IGFkZEJvdW5kcywgcjFjMSwgeGxzeCwgdGhpc1JvdyB9ID0gb3B0aW9ucztcbiAgaWYgKHIxYzEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpeFJhbmdlcyBkb2VzIG5vdCBoYXZlIGFuIFIxQzEgbW9kZScpO1xuICB9XG4gIGxldCBvZmZzZXRTa2V3ID0gMDtcbiAgcmV0dXJuIGZvcm11bGEubWFwKHQgPT4ge1xuICAgIGNvbnN0IHRva2VuID0geyAuLi50IH07XG4gICAgaWYgKHQubG9jKSB7XG4gICAgICB0b2tlbi5sb2MgPSBbIC4uLnQubG9jIF07XG4gICAgfVxuICAgIGxldCBvZmZzZXREZWx0YSA9IDA7XG4gICAgaWYgKHRva2VuLnR5cGUgPT09IFJFRl9TVFJVQ1QpIHtcbiAgICAgIGNvbnN0IHNyZWYgPSBwYXJzZVN0cnVjdFJlZih0b2tlbi52YWx1ZSwgeyB4bHN4IH0pO1xuICAgICAgY29uc3QgbmV3VmFsdWUgPSBzdHJpbmdpZnlTdHJ1Y3RSZWYoc3JlZiwgeyB4bHN4LCB0aGlzUm93IH0pO1xuICAgICAgb2Zmc2V0RGVsdGEgPSBuZXdWYWx1ZS5sZW5ndGggLSB0b2tlbi52YWx1ZS5sZW5ndGg7XG4gICAgICB0b2tlbi52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1JhbmdlKHRva2VuKSkge1xuICAgICAgY29uc3QgcmVmID0gcGFyc2VBMVJlZih0b2tlbi52YWx1ZSwgeyB4bHN4LCBhbGxvd1Rlcm5hcnk6IHRydWUgfSk7XG4gICAgICBjb25zdCByYW5nZSA9IHJlZi5yYW5nZTtcbiAgICAgIC8vIGZpbGwgbWlzc2luZyBkaW1lbnNpb25zP1xuICAgICAgaWYgKGFkZEJvdW5kcykge1xuICAgICAgICBhZGRBMVJhbmdlQm91bmRzKHJhbmdlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gc3RyaW5naWZ5QTFSZWYocmVmLCB7IHhsc3ggfSk7XG4gICAgICBvZmZzZXREZWx0YSA9IG5ld1ZhbHVlLmxlbmd0aCAtIHRva2VuLnZhbHVlLmxlbmd0aDtcbiAgICAgIHRva2VuLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgfVxuICAgIC8vIGVuc3VyZSB0aGF0IHBvc2l0aW9uaW5nIGlzIHN0aWxsIGNvcnJlY3RcbiAgICBpZiAob2Zmc2V0U2tldyB8fCBvZmZzZXREZWx0YSkge1xuICAgICAgaWYgKHRva2VuLmxvYykge1xuICAgICAgICB0b2tlbi5sb2NbMF0gKz0gb2Zmc2V0U2tldztcbiAgICAgIH1cbiAgICAgIG9mZnNldFNrZXcgKz0gb2Zmc2V0RGVsdGE7XG4gICAgICBpZiAodG9rZW4ubG9jKSB7XG4gICAgICAgIHRva2VuLmxvY1sxXSArPSBvZmZzZXRTa2V3O1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG9mZnNldFNrZXcgKz0gb2Zmc2V0RGVsdGE7XG4gICAgfVxuICAgIHJldHVybiB0b2tlbjtcbiAgfSk7XG59XG5cbiJdLCJuYW1lcyI6WyJPUEVSQVRPUiIsIk9QRVJBVE9SX1RSSU0iLCJCT09MRUFOIiwiRVJST1IiLCJOVU1CRVIiLCJGVU5DVElPTiIsIk5FV0xJTkUiLCJXSElURVNQQUNFIiwiU1RSSU5HIiwiQ09OVEVYVF9RVU9URSIsIkNPTlRFWFQiLCJSRUZfUkFOR0UiLCJSRUZfQkVBTSIsIlJFRl9URVJOQVJZIiwiUkVGX05BTUVEIiwiUkVGX1NUUlVDVCIsIkZYX1BSRUZJWCIsIlVOS05PV04iLCJVTkFSWSIsIkJJTkFSWSIsIlJFRkVSRU5DRSIsIkxJVEVSQUwiLCJFUlJPUl9MSVRFUkFMIiwiQ0FMTCIsIkxBTUJEQSIsIkxFVCIsIkFSUkFZIiwiSURFTlRJRklFUiIsIk1BWF9DT0xTIiwiTUFYX1JPV1MiLCJmcm9tQ29sIiwiY29sdW1uU3RyaW5nIiwieCIsImwiLCJsZW5ndGgiLCJuIiwiYyIsImNoYXJDb2RlQXQiLCJyZV9TUmNvbHVtbkIiLCJyZV9TUmNvbHVtbk4iLCJrZXlUZXJtcyIsImhlYWRlcnMiLCJkYXRhIiwidG90YWxzIiwiYWxsIiwiZnoiLCJfbGVuIiwiYXJndW1lbnRzIiwiYSIsIkFycmF5IiwiX2tleSIsIk9iamVjdCIsImZyZWV6ZSIsInNlY3Rpb25NYXAiLCJtYXRjaENvbHVtbiIsInMiLCJhbGxvd1VuYnJhY2VkIiwidW5kZWZpbmVkIiwibSIsImV4ZWMiLCJ2YWx1ZSIsInNsaWNlIiwicmVwbGFjZSIsInBhcnNlU1JhbmdlIiwicmF3IiwiY29sdW1ucyIsIm0xIiwicG9zIiwidGVybXMiLCJrIiwidG9Mb3dlckNhc2UiLCJwdXNoIiwiZXhwZWN0X21vcmUiLCJsZWZ0Q29sIiwicmlnaHRDb2wiLCJzZWN0aW9ucyIsImNvbmNhdCIsInRva2VuIiwicmVfQ09OVEVYVCIsInJlX0NPTlRFWFRfUVVPVEUiLCJybmdQYXJ0IiwiY29sUGFydCIsInJvd1BhcnQiLCJyYW5nZU9wIiwibmV4dE5vdENoYXIiLCJyZV9BMUNPTCIsIlJlZ0V4cCIsInJlX0ExUk9XIiwicmVfQTFSQU5HRSIsInJlX0ExUEFSVElBTCIsInJQYXJ0IiwiY1BhcnQiLCJyZV9SQ0NPTCIsInJlX1JDUk9XIiwicmVfUkNSQU5HRSIsInJlX1JDUEFSVElBTCIsInJlX05BTUVEIiwibWFrZUhhbmRsZXIiLCJ0eXBlIiwicmUiLCJzdHIiLCJsZXhOYW1lZCIsImxjIiwicmVfUVVPVEVEX1ZBTFVFIiwicmVfUVVPVEVEX1ZBTFVFX1hMU1giLCJsZXhDb250ZXh0Iiwib3B0aW9ucyIsIm1xIiwieGxzeCIsInRlc3QiLCJiIiwibGV4U3RydWN0dXJlZCIsInN0cnVjdERhdGEiLCJpIiwicmVSQ051bXMiLCJyZUExTnVtcyIsImxleFJhbmdlIiwidCIsInIxYzEiLCJhbGxvd1Rlcm5hcnkiLCJsYXN0SW5kZXgiLCJ2YWwiLCJwYXJzZUludCIsImxleGVycyIsImxleGVyc1JlZnMiLCJvcHRzIiwicmVmUGFydHNUcmVlIiwicGFja0xpc3QiLCJmIiwibm9kZSIsImtleSIsImZvckVhY2giLCJydW4iLCJyZXZlcnNlIiwibWF0Y2hlciIsInRva2VucyIsImN1cnJOb2RlIiwiYW5jaG9ySW5kZXgiLCJpbmRleCIsIm1lcmdlUmVmVG9rZW5zIiwidG9rZW5saXN0IiwiZmluYWxUb2tlbnMiLCJ2YWxpZCIsInRvTWVyZ2UiLCJtYXAiLCJkIiwiam9pbiIsImxvYyIsInVuc2hpZnQiLCJpc1R5cGUiLCJkZWZhdWx0T3B0aW9ucyIsIndpdGhMb2NhdGlvbiIsIm1lcmdlUmVmcyIsIm5lZ2F0aXZlTnVtYmVycyIsImlzVGV4dFRva2VuIiwiY2F1c2VzQmluYXJ5TWludXMiLCJnZXRUb2tlbnMiLCJmeCIsInRva2VuSGFuZGxlcnMiLCJhc3NpZ24iLCJsZXRPckxhbWJkYSIsInVua25vd25SQyIsInRyaW1PcHMiLCJ0YWlsMCIsInRhaWwxIiwibGFzdFRva2VuIiwicHVzaFRva2VuIiwiaXNDdXJyVW5rbm93biIsImlzTGFzdFVua25vd24iLCJzdGFydFBvcyIsInRva2VuVHlwZSIsInRva2VuVmFsdWUiLCJsYXN0TEMiLCJ2YWxMQyIsInVudGVybWluYXRlZCIsInAiLCJsYXN0MSIsIm1pbnVzIiwicG9wIiwid2l0aGluQ2FsbCIsInBhcmVuRGVwdGgiLCJ2IiwiZml4UkNOYW1lcyIsImJlZm9yZSIsImFmdGVyIiwidG9rZW5pemUiLCJmb3JtdWxhIiwiaXNSYW5nZSIsImlzUmVmZXJlbmNlIiwiaXNMaXRlcmFsIiwiaXNFcnJvciIsImlzV2hpdGVzcGFjZSIsImlzRnVuY3Rpb24iLCJpc0Z4UHJlZml4IiwiaXNPcGVyYXRvciIsIkVORCIsInJlZkZ1bmN0aW9ucyIsImlzUmVmZXJlbmNlRnVuY3Rpb25OYW1lIiwiZm5OYW1lIiwiaW5jbHVkZXMiLCJ0b1VwcGVyQ2FzZSIsImlzUmVmZXJlbmNlTm9kZSIsIm9wZXJhdG9yIiwiY2FsbGVlIiwibmFtZSIsInN5bWJvbFRhYmxlIiwiY3VycmVudE5vZGUiLCJ0b2tlbkluZGV4IiwicGVybWl0QXJyYXlSYW5nZXMiLCJwZXJtaXRBcnJheUNhbGxzIiwiaGFsdCIsIm1lc3NhZ2UiLCJhdEluZGV4IiwiZXJyIiwiRXJyb3IiLCJzb3VyY2UiLCJzb3VyY2VPZmZzZXQiLCJyZWR1Y2UiLCJyZWZJc1VwY29taW5nIiwibmV4dCIsImFsbG93T3BlcmF0b3JzIiwidHJpbSIsImlzUmVmZXJlbmNlVG9rZW4iLCJhZHZhbmNlIiwiZXhwZWN0TmV4dCIsImxlZnROb2RlIiwiaWQiLCJoYXZlUmVmIiwicG9zc2libGVXU09wIiwibmV4dElzQ2FsbCIsImNyZWF0ZSIsImV4cHJlc3Npb24iLCJyYnAiLCJsZWZ0IiwibnVkIiwibGJwIiwibGVkIiwib3JpZ2luYWxfc3ltYm9sIiwic3ltYm9sIiwiYnAiLCJpbmZpeCIsInRoaXMiLCJyaWdodCIsInBvc3RmaXgiLCJwcmVmaXgiLCJzdWJleHByIiwicmFuZ2VJbmZpeCIsImNvbW1hIiwidW5pb25SZWZzIiwiZW5hYmxlIiwiY3VyclN0YXRlIiwicGFyc2VMYW1iZGEiLCJhcmdzIiwiYXJnTmFtZXMiLCJib2R5IiwiZG9uZSIsInByZXZTdGF0ZSIsImFyZ1Rva2VuSW5kZXgiLCJhcmciLCJraW5kIiwiY3Vyck5hbWUiLCJwYXJhbXMiLCJwYXJzZUxldCIsInZhbHMiLCJhcmdDb3VudGVyIiwiYWRkQXJndW1lbnQiLCJsYXN0QXJnIiwibGFzdFdhc0NvbW1hIiwiZGVjbGFyYXRpb25zIiwiaW5pdCIsInNwbGl0UHJlZml4Iiwic3RyaW5nc09ubHkiLCJpbkJyYWNlIiwiY3VyclN0ciIsInBhcnRzIiwiZmx1c2giLCJicmFjZWQiLCJjaGFyIiwic3BsaXRDb250ZXh0IiwiY29udGV4dFN0cmluZyIsImNvbnRleHQiLCJzcGxpdENvbnRleHRYbHN4IiwiY3R4Iiwid29ya2Jvb2tOYW1lIiwic2hlZXROYW1lIiwiaXRlbSIsImUiLCJsY0ZuIiwiY2FsbCIsImNsb3NlUGFyZW4iLCJyb3ciLCJyb3dzIiwiY2xvc2luZ0JyYWNlIiwiZWxlbWVudHMiLCJwUmFuZ2VPcCIsInBSYW5nZSIsInIwIiwicFBhcnRpYWwiLCJwUmFuZ2UyIiwicjEiLCJwQmFuZyIsInBCZWFtIiwicFN0cnVjdXJlZCIsInN0cnVjdCIsInBDb250ZXh0Iiwic3BsaXR0ZXIiLCJwTmFtZWQiLCJ2YWxpZFJ1bnMiLCJ2YWxpZFJ1bnNOYW1lZCIsInBhcnNlUmVmIiwicmVmIiwiYWxsb3dOYW1lZCIsInJlZkRhdGEiLCJzaGlmdCIsInJ1bnMiLCJldmVyeSIsInBhcnNlIiwiaiIsImNoYXJGcm9tIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidG9Db2wiLCJjb2x1bW5JbmRleCIsInJlQmFubmVkQ2hhcnMiLCJzdHJpbmdpZnlQcmVmaXgiLCJwcmUiLCJxdW90ZSIsIm50aCIsInNjb3BlIiwic3RyaW5naWZ5UHJlZml4QWx0IiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJNYXRoIiwidG9Db2xTdHIiLCJ0b1Jvd1N0ciIsInIiLCJyYW5nZU9wZXJhdG9yIiwidHJpbURpcmVjdGlvbiIsImhlYWQiLCJ0YWlsIiwic3BsaXRBMSIsInJvd1N0ciIsImZyb21BMSIsInJhbmdlU3RyaW5nIiwidG9wIiwiYm90dG9tIiwiJHRvcCIsIiRsZWZ0IiwiJGJvdHRvbSIsIiRyaWdodCIsInBhcnQxIiwib3AxIiwicGFydDIiLCJvcDIiLCJwYXJ0MyIsInNwbGl0IiwicDEiLCJwMiIsInBhcnNlQTFSZWYiLCJyZWZTdHJpbmciLCJyYW5nZSIsInN0cmluZ2lmeUExUmVmIiwicmVmT2JqZWN0Iiwibm9MZWZ0Iiwibm9SaWdodCIsIm5vVG9wIiwibm9Cb3R0b20iLCJvcCIsInRvQTEiLCJhZGRBMVJhbmdlQm91bmRzIiwicGFyc2VTdHJ1Y3RSZWYiLCJ0YWJsZSIsInNhbWVWYWx1ZSIsInNhbWVBcnJheSIsImlzQXJyYXkiLCJzYW1lU3RyIiwidG9Db29yZCIsImlzQWJzIiwicGFyc2VSMUMxUGFydCIsImMwIiwiJHIwIiwiJGMwIiwicm0iLCJjbSIsImZyb21SMUMxIiwiZmluYWwiLCJvdmVyZmxvdyIsImV4dGVuZFRvIiwiYzEiLCIkcjEiLCIkYzEiLCJwYXJzZVIxQzFSZWYiLCJzdHJpbmdpZnlSMUMxUmVmIiwibnVsbFIwIiwibnVsbEMwIiwibnVsbFIxIiwibnVsbEMxIiwiaGFzVHJpbSIsInNfcjAiLCJzX3IxIiwic19jMCIsInNfYzEiLCJ0b1IxQzEiLCJjYWxjIiwiYWJzIiwidlgiLCJhWCIsInNldHRpbmdzIiwidG9GaXhlZCIsImJhc2UiLCJ3cmFwRWRnZXMiLCJOYU4iLCJxdW90ZUNvbG5hbWUiLCJ0b1NlbnRlbmNlQ2FzZSIsInN0cmluZ2lmeVN0cnVjdFJlZiIsInRoaXNSb3ciLCJudW1Db2x1bW5zIiwibnVtU2VjdGlvbnMiLCJzaW5nbGVBdCIsInRva2VuVHlwZXMiLCJub2RlVHlwZXMiLCJwYXJlblN0YWNrIiwiYXJyYXlTdGFydCIsInVpZCIsImdldElEZXIiLCJrbm93blJlZnMiLCJnZXRDdXJyRGVwdGgiLCJkZXB0aCIsImNvdW50ZXIiLCJwYWlySWQiLCJncm91cElkIiwiZXJyb3IiLCJhZGRDb250ZXh0Iiwia25vd24iLCJmaW5kIiwicmVmQSIsInJlZkIiLCJpc0VxdWl2YWxlbnQiLCJmaXhSYW5nZXMiLCJhZGRCb3VuZHMiLCJvZmZzZXRTa2V3Iiwib2Zmc2V0RGVsdGEiLCJuZXdWYWx1ZSIsInJvb3QiLCJhbmNob3JDZWxsIiwiYW5jaG9yIiwiaXNTdHJpbmciLCJyZWZPcHRzIiwiaXNOYU4iXSwibWFwcGluZ3MiOiJhQUFPLE1BQU1BLEVBQVcsV0FDWEMsRUFBZ0IsZ0JBQ2hCQyxFQUFVLE9BQ1ZDLEVBQVEsUUFDUkMsRUFBUyxTQUNUQyxFQUFXLE9BQ1hDLEVBQVUsVUFDVkMsRUFBYSxhQUNiQyxFQUFTLFNBQ1RDLEVBQWdCLGdCQUNoQkMsRUFBVSxVQUNWQyxFQUFZLFFBQ1pDLEVBQVcsYUFDWEMsRUFBYyxnQkFDZEMsRUFBWSxjQUNaQyxFQUFhLGFBQ2JDLEVBQVksWUFDWkMsRUFBVSxVQUVWQyxFQUFRLGtCQUNSQyxFQUFTLG1CQUNUQyxFQUFZLHNCQUNaQyxFQUFVLFVBQ1ZDLEVBQWdCLGVBQ2hCQyxFQUFPLGlCQUNQQyxFQUFTLG1CQUNUQyxFQUFNLGdCQUNOQyxFQUFRLGtCQUNSQyxFQUFhLGFBR2JDLEVBQVksTUFDWkMsRUFBWSxRQ3JCbEIsU0FBU0MsRUFBU0MsR0FDdkIsTUFBTUMsRUFBS0QsR0FBZ0IsR0FDckJFLEVBQUlELEVBQUVFLE9BQ1osSUFBSUMsRUFBSSxFQUNSLEdBQUlGLEVBQUksRUFBRyxDQUNULE1BQU1HLEVBQUlKLEVBQUVLLFdBQVdKLEVBQUksR0FFM0JFLEdBQXdCLEtBQWxCLEVBQUlDLEdBREFBLEVBQUksR0FBSyxHQUFLLEdBQ04sR0FDcEIsQ0FDQSxHQUFJSCxFQUFJLEVBQUcsQ0FDVCxNQUFNRyxFQUFJSixFQUFFSyxXQUFXSixFQUFJLEdBRTNCRSxHQUF3QixJQUFsQixFQUFJQyxHQURBQSxFQUFJLEdBQUssR0FBSyxHQUNOLEdBQ3BCLENBQ0EsR0FBSUgsRUFBRyxDQUNMLE1BQU1HLEVBQUlKLEVBQUVLLFdBQVdKLEVBQUksR0FFM0JFLEdB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
